** TODO

- [ ] Remove binary files included by mistake in the repo.
- [ ] Move Forth sources to separate repo.
  - [ ] Make that repo public.
  - [ ] Include the thesis document in that repo.

** What?!

*** What am I trying to accomplish with this thesis?
1. *Learning*: I want to have an overview of how programming languages
   are implemented /from first principles/. I want to know the
   low-level language of the modern processors, so I'll use =x86-64=
   assembly on a 64-bit machine. I want to see how a high-level
   language is implemented, and arguably the highest-level language is
   LISP, thanks to its meta-programming facilities. Implementing a
   LISP compiler in assembly would be difficult, but that's why we
   /incrementally/ increase the level of abstraction. So writing a
   LISP interpreter first makes sense, and that is good, because it
   will also teach me some other stuff. But writing a LISP interpreter
   in assembly is still maybe too big of a jump, so I'd like something
   in between to bridge the gap. So I'll write a FORTH interpreter in
   assembly and the LISP interpreter in FORTH. LISP is ultimate power
   and abstraction. FORTH is a supercharged assembly that hides the
   irrelevant details of hardware and gives enough linguistic
   abstraction power to implement the next stage. Also both LISP and
   FORTH have rich histories and philosophies which I'd love to
   explore.

   Interfacing with hardware I/O etc. wouldn't teach me much about
   language implementation, so I'll have Linux provide me virtual
   memory and hardware abstraction behind a few simple syscalls.

   Writing assembly by hand involves quite a lot of boilerplate, so
   why not use an assembler with some macro capabilities to ease my
   job? I'll use the GNU assembler, =as=.

   And everything will of course be glued together with some shell
   scripts.

   So I'll learn assembly, assembler directives and macros, memory
   layout and intepreter design for a FORTH, enough FORTH to write a
   the non-trivial program which is the LISP interpreter, a bit of
   language design for my choice of LISP, the design of an interpreter
   for a restricted LISP that is still powerful enough to write a
   compiler, then how to write a compiler, how to integrate a runtime
   (written in FORTH or in assembly?) etc. Lots of things!

2. *An academic thesis*: Although learning is nice, I also have to
   produce a document of academic quality in less than three
   months. While working on this project my focus can be anywhere
   between full conformity to academic expectations at the expense of
   a personal journey, and complete disregard for standards in the
   name of self-expression and self-actualization. I think neither
   extreme is ideal.

   At the minimum I'll follow the guidelines for content structuring,
   document type-setting, literature citations etc. The writing cannot
   be too informal, but I'd rather avoid sounding unnecessarily
   pedantic as well. The style I like to read and write is relaxed,
   straight to the point, occasionally witty, honest rather than
   self-important.

   Another choice is between going deep and going fast. If I lose
   myself in the details, I won't finish in time. If I rush it, I
   won't get what I want out of this project. Walking the line means
   making good plans and setting tight schedules, all while being
   disciplined enough to respect them.

3. *An educational material*: If this by this project I learn much
   myself and if I succeed in explaining my process satisfactorily,
   then the result should be useful for other people as well. That
   would be nice!

   Ghuloum's (2006) tutorial paper about incremental compiler
   construction serves as an example here.

4. *Pure pleasure*? The first three goals are rather future
   oriented. They don't take into account the now, the interest, the
   flow of curiosity. It looks like there's a contradiction between
   present pleasure and planning for the future, but is it? What
   /would/ actually happen if I prioritized the fun, the pleasant, the
   momentary interest?

   Chaos and disorganization could ensue. Or the fun I'd have could
   give me lots of energy, pushing me forward in a state of flow and
   enthusiasm. Or something in between.

*** What are the main sources of inspiration for this thesis?
- Abdulaziz Ghuloum, /An Incremental Approach to Compiler
  Construction/ (2006). This is the paper that gave me the idea of
  working towards a pedagogical (and learning) goal. The paper shows
  the process of building a Scheme compiler in Scheme, splitting the
  work in 24 steps, each of them quite understandable. I'd like to
  follow the idea of /presenting a path through the development of an
  increasingly sophisticated programming environment/, in my case from
  programming the processor in the assembly language, having nothing
  at my disposal but a few primitive system calls, to being able to
  program the computer in a high-level language, with first-class
  closures, macros etc.

- Terrence W. Pratt, /Programming Languages: Design and
  Implementation/ (1975). This book discusses and compares aspects of
  programming languages, covering syntax, semantics, execution models,
  simulation vs translation etc. It should be useful for justifying
  the /reason/ for going "upwards" from assembly, determining what
  FORTH & LISP bring to the table etc.

- Michael L. Scott, /Programming Language Pragmatics/ (2016). Big book
  exploring roughly the same concept space as Pratt's. Much more
  modern, much more detailed. Excellent resource, I'd say, but also
  very large. I'd love to have time for it.

**** Implementing FORTH
- R. G. Loeliger, /Threaded Interpretive Languages/ (1981). Detailed
  tutorial book on how to build a FORTH. Gives an architectural
  overview and also lists code routines for both primitives (in Z80
  assembly) and secondaries. Excellent for getting the overall picture
  and also for ideas about useful FORTH words to
  implement. Unfortunately it doesn't assume an underlying operating
  system, so it doesn't suit my approach directly. Also it uses an
  archaic instruction set.

- Richard WM Jones, /JONESFORTH. A sometimes minimal FORTH compiler
  and tutorial/ (2010, [[https://rwmj.wordpress.com/2010/08/07/jonesforth-git-repository/][blog post]]). Inspired from [[https://github.com/albertvanderhorst/ciforth][ciforth]] and [[https://home.hccnet.nl/a.w.m.van.der.horst/lina.html][lina]].

  [[https://news.ycombinator.com/item?id=13506152][Comments on HN]] about JonesFORTH.

- David Smith, /SmithForth. A Forth for x86-64 personal computers/
  (2022, [[https://dacvs.neocities.org/SF/][web page]]). Also targets Linux, but /does not/ use an
  assembler. It's implemented in two source files: =SForth.dmp=
  "contains a primitive Forth system in 1000 hand-written bytes of
  annotated machine code", and =system.fs= "contains 1000 lines of
  system Forth to complete a standard Forth system".

  [[https://www.youtube.com/playlist?list=PLZCIHSjpQ12wX5m6q4dQNQcmmjq9oF3or][Video explanations]] from its author. [[https://www.youtube.com/watch?v=XH6jDiKxod8&list=PLZCIHSjpQ12woLj0sjsnqDH8yVuXwTy3p][Another video series]], from the
  same author, about "Handmade Linux x86 executables". Awesome.


**** Implementing a LISP interpreter
- Hal Abelson, Jerry Sussman, Julie Sussman, /Structure and
  Interpretation of Computer Programs/ (1996). Shows how to implement
  a Scheme interpreter in Scheme. Should be useful for implementing a
  LISP in FORTH as well. And I want to finish reading it anyway.

- Various links related to writing a LISP in FORTH:
  - Mark Probst's [[https://github.com/schani/forthlisp][schani/forthlisp]] (and [[https://news.ycombinator.com/item?id=26882117][HN discussion]])
  - [[https://home.hccnet.nl/a.w.m.van.der.horst/forthlectureH.html][Implementing Lisp in Forth]] by Albert van der Horst ([[https://home.hccnet.nl/a.w.m.van.der.horst/forthlectures.html][other]] lectures)


** Assembly

We'll be using the AT&T syntax of the x86-64 ISA. The host OS will be
Linux.

*** References
- Jonathan Bartlett, /Learn to Program with Assembly/, 2021
- Brown University, [[https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf][x64 Cheat Sheet]], 2019
- Linux system calls: [[https://man7.org/linux/man-pages/man2/syscalls.2.html][man 2 syscalls]]
  - Another list: [[https://www.chromium.org/chromium-os/developer-library/reference/linux-constants/syscalls/][ChromiumOS Linux System Call Table]]
- glibc [[https://www.gnu.org/software/libc/documentation.html][documentation]]

*** Registers
- General-purpose:
  - %rax, %rbx, %rcx, %rdx ("computational" registers)
    - Accumulator/base/counter/data
    - Sub-registers: %rax, %eax, %ax, %ah, %al
  - %rsi, %rdi, %rbp, %rsp ("pointer" registers)
    - Source index/destination index/base pointer/stack pointer
    - No byte access for %rsi and %rdi
  - %r8, %r9 ... %r15 (new 64-bit ISA registers)
- Special-purpose:
  - %rip (instruction pointer)
  - %eflags:
    - ZF (zero flag)
    - CF (carry flag)
    - OF (overflow flag)
    - SF (sign flag)
  
*** Literals
- Decimal: $10
- Binary: $0b1010
- Hexadecimal: $0x0A
- Characters: $'A'
- Strings: "abcd,\n,\t,\\,\0"

*** Instructions
- movq, movl, movw, movb (quadword, long/double-word, word, byte)
- addq, subq, mulq, divq
- adcq (add with carry)
- incq, decq
- imul, idiv (signed variants of mult & div)
- rol, ror (rotate register by number of bits)
- shl, shr (shift bits)
- xchg (exchange values of operands)
- bswap (reverse order of bytes in operand)
- neg (two's complement negation)
- not, and, or, xor (bitwise operators)
- lzcnt, bsf, bsr (bit scanning)
- clc, setc, cld, setd, lahf, sahf (manage status flags)
- jmp (unconditional jump)
- cmp x y: set flags according to "y - x"
- test x y: set flags according to "y & x"
- [[https://www.felixcloutier.com/x86/jcc][jXX]] (condition jump based on flags):
  - jz, jnz, jc, jnc (zero, carry)
  - je, jne
  - ja, jae, jb, jbe (use unsigned comparison: above, below)
    - ~ja x y~ means "jump if x < y"
  - jg, jge, jl, jle (use signed comparison: greater, less)
- [[https://www.felixcloutier.com/x86/cmovcc][cmoveXX]] (conditional move)
- loopX: decrement %rcx and jump to label if result is not zero
  - equivalent to ~dec %rcx; jnz LABEL~ which is /faster/;
  - loopeq, loopneq: jump if previous comparison resulted in an
    (in)equality
- movs, cmps, scas (work with blocks of memory)
- leaq (load effective address):
  - Address = Value(BaseReg,IndexReg,Multiplier)
- push, pop (stack manipulation)
- enter, leave (creating and removing stack frames)
- call, ret (call / return from function)
- syscall

*** Directives
- .equ CONSTANT, 5
- .include "file.s": useful for shared constant definitions
- .incbin "binary-file.png"

**** Sections
- .section (.text | .data | .rodata | .bss)
  - .text = .section .text
  - .data = .section . data
  - .rodata contains data that cannot be modified
  - .bss contains uninitialized data
  
**** Global / local values
- .globl symbol/CONSTANT
  - .global is a synonim
- .lcomm NAME: create local label NAME and place it in .bss
  - .comm: like .lcomm, but merge all locations with same name
- .external documents symbols that are meant to come from another
  module; all symbols are by default external in GNU Assembler.

**** Reserving space
- (.quad | .double | .word | .byte) 2, 3, 4 ...
  - .byte, .2byte, .4byte, .8byte
- .ascii "Some string.\0"
  - .string is identical to .ascii, but appends a '\0' at the end
  - .asciz is a synonim for .string
- .skip NUMBYTES [, INITVAL]
  - synonims: .space, .zero

**** Alignment directives
- .balign aligns the next address to the given multiple
  - second argument (by default 0) sets the spacing value
- .p2align: like .balign, but uses bits to specify alignment
- .align: not recommended

*** System calls
Syscall number goes to %rax.

**** Argument registers
- %rdi
- %rsi
- %rdx
- %r10
- %r8
- %r9
  
**** List of syscalls
- 0x01 /   1: write (fd buf count -- count-written)
- 0x09 /   9: mmap (memory mapping / allocation)
- 0x0b /  11: munmap (return memory allocated with mmap)
- 0x0c /  12: brk (allocate memory by moving the program break)
- 0x3c /  60: exit (exit-code --)
- 0xc9 / 201: unix time (time-ptr -- same-time-ptr)

*** System V ABI calling convention
**** Preserved registers
- %rbp
- %rbx
- %r12, %r13, %r14, %r15

**** Parameter registers
- %rdi
- %rsi
- %rdx
- %rcx
- %r8
- %r9

**** Return values
Put return value into %rax.

**** Stack registers
- %rbp: points to beginning of current stack frame;
  - local values are referenced as offsets to %rbp.
- %rsp: points to top of the stack;
  - moved by pushes, pops and function calls.

**** Setting up a stack frame
1. Save %rbp (push it on the stack);
   - now %rsp points to value of %rbp;
2. Set %rbp to %rsp;
   - now %rbp points to its own value on the stack;
3. Subtract from %rsp enough memory for local variables;
   - each variable will be referenced as offset from %rbp.
#+begin_src asm
	  ## Start of function
	  pushq	%rbp	
	  movq %rsp, %rbp
	  subq $NUMBYTES, %rsp
	  ## OR JUST:
	  enter %NUMBYTES, $0

	  ## End of function
	  movq %rpb, %rsp
	  popq %rbp
	  ## OR JUST:
	  leave
#+end_src

*** C library
Useful functions:
- main: called by _start, which is setup by libc
- fopen, fclose, fprintf, fscanf
  - need to set %rax to 0 if no floating-point args are given
- standard streams FILE pointers: stdin, stdout, stderr
- malloc, free
- dlopen, dlym: open shared library and get symbol references

*** Virtual memory
**** Process memory layout
From higher to lower addresses:
- UNMAPPED MEMORY and kernel shared memory (inaccessible)
- the stack
- UNMAPPED MEMORY
- dynamically loaded libraries
- UNMAPPED MEMORY
- the heap
- UNMAPPED MEMORY
- .bss (uninitialized data)
- .data (global program data)
- .rodata (read-only data)
- .text (the program itself)
- reserved kernel memory (inaccessible)

*** Debugging with GDB
- file FILENAME: load binary program into debugger
- run [r]
- break *_start [b]: set breakpoint at address _start
- disassemble [disas]
- info:
  - info registers [i r]
  - info break [i b]
  - info frame [i frame]
  - info proc all/mappings/... [i proc ...]
- backtrace [bt]
- printing:
  - print $rax
  - print/d, print/x, print/t, print/c, print/f
- stepi [si]
- jump *0x403EC2

*** Linux tools
- strip: remove debugging information from executable
- ldd: print shared object dependencies (dynamic libraries)
- objdump: inspect object files
  - option -x (--all-headers) displays all header info
  - option -R (--dynamic-reloc) prints the dynamic relocation entries
- gcc
  - option -static: link objects statically
  - option -shared: create a shared library (.so object)
  - option -lLIB: search for library LIB
  - option -no-pie: seems required to get around some PIE errors
- ld: the Linux loader
  - env var LD_LIBRARY_PATH: additional directories to search
    libraries in
  - env var LD_PRELOAD: load symbols from this library /before/
    searching in shared libraries requested by the executable
- ldconfig: configures dynamic linker run-time bindings


** Forth in Assembly

*** Implementation steps
- We're looking for "that set of code and routines necessary to
  achieve a self-generating language" (til81)
- Segment the (virtual) memory for:
  - Stacks
  - Input buffer (?)
  - System variables
  - The language itself (code)
- Assess the required system calls / libraries.
- Allocate the registers and design the inner interpreter.
- Consider a machine code subroutine calling convention: "all
  subroutines must preserve all registers except those used to return
  parameters and must always preserve the instruction register".
- Distinguish syntactically between machine code subroutines (callable from other
  machine code such as primitives) and keyword routines (that exist at
  the Forth language level). We'll prepend machine code subroutines
  with the character '_'.

*** Register allocation
- PSP: RBP
- RSP: RBX
- IP:  R15
- W:   R12, R13, R14 (working registers)

*** I/O routines
- _lf: print a newline character (LF).
- _key: read a character from STDIN and return it in RAX.
- _echo: print a character (ASCII code in RAX) to STDOUT.
- _token: read a token (no longer than TOKEN_MAX_LENGTH) from STDIN,
  storing it in a buffer.

  
** Forth the Language

*** References
- Stack Overflow:
  - [[https://stackoverflow.com/questions/9882326/memory-management-in-forth][Memory management in Forth]]
- SF: Leo Brodie, /Starting Forth/, 1981
- TF: Leo Brodie, /Thinking Forth/, 2004
- TIL: R. G. Loeliger, /Threaded Interpretive Languages/, 1981
- FCILP: R. Berindeanu, A. Matekovits, 1991
- FS: the [[https://forth-standard.org/standard/words][Forth Standard]].
- [[http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.S][JonesForth]]: a Forth written in assembly.
  - Related and interesting [[https://news.ycombinator.com/item?id=31368212][HN post]] linking to many resources.
- [[https://muforth.dev/readme/][muforth]]: a Forth compiler written in C; lots of explanations.
- [[https://github.com/zevv/zForth][zForth]]: Forth written in C; interesting.
- [[https://factorcode.org][Factor]], a Forth-inspired concatenative language.

*** Wisdom
**** /Starting Forth/ (Brodie 1981)
- Code reuse = DRY = "factoring definitions" (p. 202)
  #+begin_quote
  It is not enough to break a problem into small pieces. The object is
  to isolate words /that can be reused/.
  #+end_quote
- Words should destroy their own parameters. (p. 203)
- Convention: use tick-prefixed words for /vectored execution/
  pointers (p. 218).
- In forth variables and constants are "alive". "Executing" a variable
  runs code that pushes its address on the stack. "Executing" a
  constant runs code that pushes its value on the stack (p. 222).

**** /Threaded Interpretive Languages/ (Loeliger 1981)
- Assembly -- TIL -- higher-order languages (p. 6):
  #+begin_quote
  TIL coding ease is somewhere between that of a higher-order language
  and an assembly language - more difficult than the former and easier
  than the latter.
  #+end_quote
- (No) type resolution (p. 8):
  #+begin_quote
  All operators will presume operands of a given type. [...] This
  places the burden of data type resolution squarely on the
  programmer. What could be simpler?
  #+end_quote

**** /Forth: Concept Informatic și Limbaj de Programare/
- Forth este un /compreter/ (compiler-interpreter) (p. 12)
- "[...] premisa implementării cu un efort de aprox. 3 luni/om a
  sursei FORTH pe orice suport hardware dorit" (p. 13)
- "FORTH compilează «slab», transformând doar numele comenzilor în
  adrese, ceea ce permite refacerea formatului sursă original fără
  nicio dificultate” (p. 13)

*** Important words
- Define new word: : /NEW/ ... ;

- Stack:
  - Manipulation: DUP ?DUP SWAP OVER ROT DROP
  - Printing: . .S U.R U. D. UD.

- Arithmetic:
  - Unary: ABS NEGATE 1+ 1- 2+ 2- 2* 2/
  - Binary: + - * / */ MOD /MOD */MOD
- Logic: OR AND NOT
- Comparison: = < <= > >= 0= 0< 0> MIN MAX

- Conditions: IF [... ELSE] ... THEN

- Looping:
  - Definite loops: DO ... LOOP, +LOOP
    - Break with LEAVE
  - Indefinite loops:
    BEGIN ... f UNTIL (infinite loop: BEGIN ... 0 UNTIL)
    BEGIN ... f WHILE ... REPEAT

- Return stack: >R R> I I' J

- Variables: VARIABLE name
- Constants: n CONSTANT name

- Memory:
  - Access: @ ? ! +!
  - Allocation: ALLOT , C,
  - New name, no 'allot': CREATE
  - Multi-byte operations: FILL ERASE DUMP
  - Byte-level access: C! C@
  - Dictionary search: ' [']
  - Execution: EXECUTE EXIT QUIT
  - Moving: MOVE CMOVE

- Dictionary:
  - Searching: ' [']
  - "Defining words": VARIABLE CONSTANT CREATE :

- Pad: PAD

- Parameter stack: 'S .S

I/O:
- Input buffer: >IN
- Characters: EMIT KEY
- Strings: TYPE EXPECT WORD
- Conversion: NUMBER

Extending the compiler:
- Run-time behavior: DOES>
- Immediate words: IMMEDIATE
- Turn compilation on/off: [ ]
- Compile immediate word as if not immediate: [COMPILE]

- String literals: ." (then finish string at first '"')
- Comments: '(' (then finish comment at first ')')
- Aborting: ABORT ABORT"

- Other:
  - PAGE QUIT
  - BASE
  - 2VARIABLE 2CONSTANT 2! 2@

*** Examples
**** The "guessing" game
#+begin_src forth
  : GUESS
    OVER 2DUP
    = IF ." CORRECT!" DROP DROP DROP
      ELSE < IF ." TOO LOW"
	     ELSE ." TOO HIGH"
	     THEN THEN ;
#+end_src

The same in Scheme:
#+begin_src scheme
  (define (make-game)
    (let ((number (random 100)))
      (lambda (guess)
	(cond ((= guess number) "CORRECT!")
	      ((< guess number) "TOO LOW")
	      (else "TOO HIGH")))))
  (define guess (make-game))
#+end_src

The same in CL:
#+begin_src lisp
  (let ((number (random 100)))
    (defun guess (guess)
      (cond ((= guess number) "CORRECT!")
	    ((< guess number) "TOO LOW")
	    (t "TOO HIGH"))))
#+end_src

**** Calculate ax^2 + bx + c
We calculate x(ax + b) + c
#+begin_src forth
  : QUADR   ( a b c x -- y )
    >R SWAP ROT  ( c b a | x )
    I * +        ( c ax+b | x )
    R> * + ;
#+end_src

**** Calculate compound interest
#+begin_src forth
  : COMPOUND   ( start rate -- )
    100 +  SWAP
    21 1 DO
      OVER 100 */  CR
      ." YEAR " I 2 U.R 3 SPACES
      ." BALANCE " DUP .
    LOOP ;
#+end_src

**** Tic-Tac-Toe
#+begin_src forth
  CREATE BOARD 10 ALLOT

  : CELL  ( n -- adr ) BOARD + ;
  : .CELL ( n -- )     SPACE  CELL C@ EMIT  SPACE ;
  : !CELL ( c n -- )   CELL C! ;
  : |     ( -- )       124 EMIT ;
  : DISPLAY   ( -- )
    CR  1 .CELL | 2 .CELL | 3 .CELL  CR
	4 .CELL | 5 .CELL | 6 .CELL  CR
	7 .CELL | 8 .CELL | 9 .CELL  ;

  : RESET!   ( -- )
    BOARD 10 32 FILL  ( fill with spaces )
    DISPLAY ;
  : X!   ( n -- )
    88 SWAP !CELL  ( write 'X' )
    DISPLAY ;
  : O!   ( n -- )
    79 SWAP !CELL  ( write 'O' )
    DISPLAY ;
#+end_src

**** Switching to interpreter state
#+begin_src forth
  : EMIT-Q   [ CHAR Q ]  LITERAL  EMIT ;
  : EMIT-Q   [CHAR] Q  EMIT ;	\ equivalent
#+end_src


** Scheme

*** References
- The [[https://standards.scheme.org/unofficial/errata-corrected-r7rs.pdf][R7RS]] standard.
- [[http://canonical.org/~kragen/sw/urscheme/][UrScheme]]: lots of interesting ideas and further references.

