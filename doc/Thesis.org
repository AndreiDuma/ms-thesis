#+TITLE: From x86-64 Forth to RISC-V
#+SUBTITLE: Porting a Forth Implementation to a New Architecture
#+DATE: September 2024
#+AUTHOR: Andrei Dorian Duma
#+EMAIL: andrei-dorian.duma@s.unibuc.ro
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 29.2 (Org mode 9.6.15)

#+BIBLIOGRAPHY: References.bib
#+CITE_EXPORT: csl csl/ieee-with-url.csl

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t

#+STARTUP: logdrawer

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper,12pt,final]
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_ENGRAVED_THEME:
#+LATEX_COMPILER: pdflatex

# --- Document margins.
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \newgeometry{left=2.5cm, right=2.5cm}
#+LATEX_HEADER: \restoregeometry

# --- Line spacing.
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \onehalfspacing

# --- Allow different margins mid-document.
#+LATEX_HEADER: \usepackage{changepage}

# --- Nice author line ---
#+LATEX_HEADER: \usepackage{authblk}
#+LATEX_HEADER: \author[1]{Andrei Dorian Duma\thanks{andrei-dorian.duma@s.unibuc.ro}}
#+LATEX_HEADER: \affil[1]{Master of Distributed Systems}

# --- Allow hiding table columns in the LaTeX export
#+LATEX_HEADER: \usepackage{array}
#+LATEX_HEADER: \newcolumntype{H}{>{\setbox0=\hbox\bgroup}c<{\egroup}@{}}

# --- Font size macros.
#+MACRO: fontset     (eval (format "\\fontsize{%spt}{%fpt}\\selectfont" $1 (* 1.2 (string-to-number $1))))
#+MACRO: fontreset   \normalsize

# --- Table macros.
#+MACRO: table_begin   \small
#+MACRO: table_end     \normalsize
# TODO: remove?
# #+MACRO: wtable_begin   \vspace{1.5em} \begin{table}[htbp] \begin{adjustwidth}{-1cm}{-1cm} \small
# #+MACRO: wtable_end     \normalsize \end{adjustwidth} \end{table} \vspace{-0.5em}

# --- Indentation macros.
#+MACRO: t      \hspace{1em}  # TODO: rewrite this one to use {{{c(x)}}}.
#+MACRO: i      (eval (format "\\hspace{%sem}" $1))
#+MACRO: c      (eval (format "\\hspace{%fem}" (* 0.5265 (string-to-number $1))))
#+MACRO: b      (eval (format "\\hspace{%fem}" (* 3 0.5265 (string-to-number $1))))
#+MACRO: io     \hspace{4.9em}
#+MACRO: io--   \hspace{3.35em}

# --- Byte interpreter macros.
#+MACRO: define  ~[99~ $^{d}$​~$1~ _~$2~_​~]~
#+MACRO: compile ~[99~ $^{c}$​~$1~​$_{$2}$​~]~
#+MACRO: execute ~[99~ $^{e}$​~$1~​$_{$2}$​~]~

# --- Byte annotation macros (x86-64).
#+MACRO: modrm    ~$1~​$^{\text{\tiny ModR/M}}_{\text{\tiny $2·$3·$4}}$
#+MACRO:   sib    ~$1~​$^{\text{\tiny    SIB}}_{\text{\tiny $1·$2·$3}}$
#+MACRO: offset   _~$1~_​$_{\text{\tiny $2}}$
#+MACRO: displ    $^{\text{\tiny +}}$​_~$1~_

# --- Byte annotation macros (RISC-V).
#+MACRO: padding   ~[$1~​$^{pad}$​~]~

# --- Encoding annotation macros (RISC-V).
#+MACRO: imm     /~$1~/
#+MACRO: off     _~$1~_
#+MACRO: shamt   /~$1~/​$^{sh}$
#+MACRO: rd      ~$1~​$^{d}$
#+MACRO: rs1     ~$1~​$^{s_{1}}$
#+MACRO: rs2     ~$1~​$^{s_{2}}$
#+MACRO: fn7     ~$1~
#+MACRO: fn3     ~$1~
#+MACRO: op      ~$1~

# -- Other annotation macros.
#+MACRO: addr     (eval (if (string-equal $1 "00") (format "$\\overline{\\texttt{%s}}$" $1) (format "\\texttt{%s}" $1)))
#+MACRO: unsigned $^{u}$

# Additional options are set in `.dir-locals.el`.


# #+begin_abstract

TODO.

# #+end_abstract

# \clearpage


# Table of contents.
#+TOC: headlines 3

\clearpage


* Introduction                                                     :noexport:

Modern computing relies on complex toolchains that translate
high-level programming languages to the machine code that is run by
computer processors.  Such a toolchain might include, for example, a
compiler, an assembler and a linker.  The compiler might in turn be
composed of a frontend that parses and converts the input source code
into an intermediate representation (IR) and a backend that further
translates this IR to assembly code.  The assembler and the linker
continue this process by encoding instructions, calculating relative
offsets for jumps and branches, producing object files and finally
resolving symbol addresses when combining these files into an
executable.

This machinery serves to bridge the wide abstraction gap between a
high-level programming language and the low-level machine code into
which it is translated.  Although convenient for developing useful
computer programs, these tools bring a complexity that can obscure the
understanding of the basic processes involved in programming a
computer.  A modern toolchain typically supports multiple target
architecures and operating systems, implements a plethora of
optimizations at different levels and has the source code of its own
components split across many codebases.  The Rust compiler =rustc=,
for example, handles lexing, parsing into an abstract syntax tree, AST
lowering to a /High-Level Intermediate Representation/ (HIR) for type
inference and checking, lowering to a /Mid-level Intermediate
Representation/ (MIR) for various optimizations, finally converting
the MIR to LLVM IR to be further processed by the LLVM compiler
backend [cite:@rust_compiler_overview].

It would be understandable for a student of computer science to be
left in awe in front of such systems.  In fact, Abdulaziz Ghuloum long
ago observed that ``compilers are perceived to be magical artifacts,
carefully crafted by the wizards, and unfathomable by the mere
mortals'' [cite:@ghuloum2006].  In his 2006 paper /``An Incremental
Approach to Compiler Construction''/, Ghuloum further notes that
``real-life compilers are too complex to serve as an educational
tool''.  We were inspired by his understandable-by-design Scheme
compiler to further pursue the topic of understandable programming
language implementation.

** Forth Towards an Understandable Compiler

Most compilers designed for education (Ghuloum's included) generate
assembly code intended to be further processed by an external
assembler and linker.  Furthermore, many implementations use
functionality provided by the C standard library instead of directly
interfacing with the operating system (or with the hardware).  In
contrast, we believe that an educational language implementation
should cover and explain all transformation stages occurring between
high-level syntax and machine code bits.

Choosing the right language to implement is also essential if building
a compiler for it is to convey useful knowledge (or even wisdom) to
the student.  The language should be simple enough so that its
compiler does not grow beyond comprehension.  Still, it should be rich
enough to expose the student to the implementation of general
computing concepts such as conditional execution, looping, memory
allocation for variables and constants, program composability through
some subroutine calling mechanism and so on.  Preferably it should be
an established language with well-understood semantics, as this avoids
the often unforeseen subtleties of language design and allows mining
previous literature for implementation ideas and techniques.

Given these criteria, we have considered three languages known for
allowing relatively simple implementations: Forth, Lisp and Lua.  Each
is representative of a whole class of programming languages and makes
different and significant choices in their design.

/Forth/ was invented in 1968 by Charles Moore ``to increase programmer
productivity without sacrificing machine efficiency''
[cite:@forth_2012_standard; @rather1996_evolution].  The language
follows a stack-based approach, using a postfix notation.  Its
implicit stack manipulation and dictionary-based compilation allow for
both minimalist syntax and powerful extensibility.  Forth allows
unrestricted access to computer registers and memory.  The evolution
of the language is currently steered by the /Forth 200x
Standardisation Committee/ working on the /Forth 2012 Standard/
[cite:@forth_2012_standard].  There are many Forth implementations of
varying size and complexity to draw inspiration from.

/Lisp/ denotes a family of related languages rather than a specific
language.  The original LISP was created by John McCarthy at MIT
starting in 1958 [cite:@mccarthy1960lisp].  Modern incarnations of
Lisp include Scheme (used by Ghuloum in his paper) and Common Lisp.
Lisp languages use a very regular syntax based on S-expressions
(parenthesized lists).  Lisp's meta-programming facilities (macros)
and highly dynamic nature make it ideal for expressing high-level
concepts as linguistic constructs, effectively adapting the language
to better suit the problem that requires solving
[cite:@abelson1996_sicp].  Similarly to Forth, Lisp has given rise to
many and diverse open-source implementations.

/Lua/ is the most recent of the three languages, having been created
by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar
Celes in 1993 at PUC-Rio [cite:@lua_puc_rio].  Lua has a simple
procedural syntax and uses associative arrays for data description and
extensibility.  Typically it is compiled to bytecode at run-time which
is then interpreted by a virtual machine or, in the case of the LuaJIT
implementation, is just-in-time compiled [cite:@lua_luajit].

In the end Forth's small ``core'', extremely minimal syntax and
low-level philosophy made it the preferred choice for an educational
programming language implementation.  For readers not familiar with
Forth, we recommend Leo Brodie's classic books /``Starting Forth''/
[cite:@brodie1981_starting] and /``Thinking Forth''/
[cite:@brodie2004_thinking]. The already mentioned /Forth 2012
Standard/ is also an excellent reference for words expected to be
present in a Forth system. We continue by reviewing several Forth
implementations.


** A Brief Survey of Forth Implementations

/Gforth/ [cite:@gforth] is a major open-source implementation of the
Forth programming language.  It conforms to the /Forth 2012 Standard/
and supports multiple target architectures.  Being featureful and
performant, it is a rather complex compiler.  Its core is implemented
in C with many words and libraries being written in Forth itself.

There are also many implementations created by Forth enthusiasts for
educational or experimentation purposes.  /JONESFORTH/
[cite:@jonesforth] is one popular such Forth, written by Richard
W.M. Jones as one file of x86 assembly targeting =as=, the GNU
Assembler, and one file of Forth code.  The former sets up a minimal
Forth, whereas the latter further defines many standard Forth words,
including control structures, I/O utilities etc.  JONESFORTH makes
extensive use of assembler macros for reducing boilerplate around word
definitions.  The code is thoroughly commented, proving to be an
excellent resource for learning the inner workings of a Forth system.
It is notable that it assumes a Linux host, but no C standard library
--- all interaction with the OS is done through system calls.
JONESFORTH does not attempt to bootstrap Forth as quickly as possible,
with the consequence that its assembly part is longer than it could
be.

/Sectorforth/ [cite:@sectorforth] by Cesar Blum is ``a 16-bit x86
Forth that fits entirely within a boot sector (512 bytes)''.  It is
written in assembly for the NASM assembler and assumes no operating
system.  It is extremely minimal, providing only several primitives on
top of which a more featureful Forth can be built.  /MilliForth/
[cite:@milliforth] takes sectorforth's minimalism even further,
reducing the machine code size to 340 bytes.

/SmithForth/ [cite:@smithforth] is a recent Forth by David Smith,
running on x86-64 Linux systems.  It is special among other
implementations because it bootstraps Forth using only machine code.
In its author's own words, it uses ``none of the usual tools from the
world of C, not even an assembler''.  It consists of a =.dmp= file
containing machine code as commented hexadecimal bytes and a =.fs=
file containing Forth code to be run once a minimal system was
bootstrapped.  The hexadecimal bytes are converted into machine code
using the Linux =xxd= command.  Since SmithForth targets Linux, the
resulting executable has to be a valid ELF executable, so an ELF file
header and an ELF program header are included.  It is remarkable that
SmithForth conforms to the /Forth 2012 Standard/, given how small an
implementation it is.

Several other sources about implementing Forth systems were consulted.
We mention Loeliger's /``Threaded Interpretive Languages''/ (1981), a
full implementation guide for the Zilog Z80 processor
[cite:@loeliger1981_til]; Peter M. Kogge's /``An Architectural Trail
to Threaded-Code Systems''/ (1982), which explains the design of a
classical implementation of Forth [cite:@ertl02_variations]; Anton
Ertl's /``Threaded Code Variations and Optimizations''/ (2002), which
compares different code threading techniques, with a focus on
performance [cite:@kogge82_trail].

Researching the Forth implementations and resources above led us to
the following impressions:
- We liked /SmithForth/'s approach of starting with machine code,
  because it makes explicit the steps that transform an instruction as
  intended by the programmer into machine code bits executable by an
  actual computer processor.
- /JONESFORTH/'s self-documenting nature through extensive source code
  comments is something that we consider essential in an
  understandable language implementation.
- We admired /sectorforth/'s and /milliforth/'s quest for minimalism
  in so far as it leads to elegant and othogonal primitives on which
  to base a language. Beyond this purpose lie obscurity and
  complexity, which we're trying to avoid.
- More than basic adherence to the Forth Standard is not a
  goal. Instead, we only aim for basic system usability, such as
  general purpose arithmetic and control flow, definition of variables
  and constants, printing and so on.
- The x86 architecture chosen by all surveyed assembly implementations
  is not ideal for conveying the fundamental computing principles at
  the heart of implementing a programming language.  Its age is
  showing in the accumulated historical cruft, which hinder a
  beginner's understanding of the essential.  We observe that only the
  /``Volume 2: Instruction Set Reference''/ of Intel's most recent
  manuals amounts to over 2500 pages [cite:@intel_manual_volume_2].
  As will be described later, the x86 architecture requires
  complicated encoding schemes with many edge cases, making it
  difficult for the novice to even select a collection of key
  instructions to use in their implementation.

We think /SmithForth/ is an excellent starting point towards a Forth
implementation that focuses on understandability.  We propose a number
of modifications that aim towards this goal:
- More detailed pseudocode should accompany the source code.
- The byte encoding of instructions should be made more explicit,
  making clear how an instruction as chosen by the programmer from the
  processor's manual is converted to its final binary representation.
- The current Forth code, which currently sets up a standard-compliant
  system, should be replaced with a simpler, shorter and more readable
  alternative.
- The implementation should target a processor architecture that was
  designed with education in mind.  The instructions should be few,
  simple and orthogonal.  As we will show later, be believe the modern
  RISC-V architecture is ideally suited for this purpose.

We continue by describing the general organization of SmithForth.


** A Quick Overview of SmithForth

*** Source Code Layout

SmithForth is bootstrapped from machine code in several stages.  The
first two stages occur in file =.dmp=, which is written as hexadecimal
bytes interspersed with comments.  Here is a code sample from David
Smith's original =SForth.dmp=:

{{{fontset(9pt)}}}
# #+CAPTION: Machine code definition of Forth word ~PARSE~.
#+LABEL: src:SForth-dmp-sample
#+begin_src fundamental
  99 05 50 41 52 53 45 ##### PARSE ( cl dl "ccc<char>" -- rbp=addr rax=u )
  49 C7 C1 00 00 00 10     # r9 = VAR              mov r/m64, imm32    REX.W C7 /0 id   11 000 001
  49 8B 69 10              # rbp = [>IN]           mov r64, r/m64      REX.W 8B /r      01 101 001
  99 73                    # Call seek				         		      
  49 8B 41 10              # rax = [>IN]           mov r64, r/m64      REX.W 8B /r      01 000 001
  73 04                    #+jump _end if U>=   00 jae rel8            73 cb	      
  49 FF 41 10              # [>IN]++               inc r/m64           REX.W FF /0      01 000 001
  # _end:                  #                    04		         		      
  48 29 E8                 # rax -= rbp            sub r/m64, r64      REX.W 29 /r      11 101 000
  49 03 69 08              # rbp += [TIB]          add r64, r/m64      REX.W 03 /r      01 101 001
  C3                       # return                ret                 C3    
#+end_src
{{{fontreset}}}

The section above defines the Forth word ~PARSE~.  Its /stack effects/
are described in standard Forth notation ~( cl dl "ccc<char>" --
rbp=addr rax=u )~​, here extended for register operations.  The left
column contains hexadecimal bytes, while everything beyond the first
=#= on each line represents a comment.  It is worth noting the three
byte sequences beginning with byte ~99~; these are special and will be
explained shortly.  Five explanation columns follow the bytes: the
first describes the intention of the current line; the second tracks
instruction addresses to allow for calculating relative offsets; the
third references the x86-64 instruction as documented in the Intel
manual; the fourth shows the byte encoding of the instruction, again
using Intel conventions; the fifth optionally shows the ModR/M and/or
SIB bytes often required in x86 instruction encodings.

This =.dmp= file is turned into an executable file by first =cut=​ting
out the comments and then passing the remaining hexadecimal bytes to
Linux command =xxd= for conversion into binary form:

{{{fontset(10pt)}}}
# #+CAPTION: How hexadecimal bytes are converted into binary form.
#+LABEL: src:machine-code-conversion
#+begin_src shell
  $ cut SForth.dmp -d'#' -f1 | xxd -p -r >SForth0
#+end_src
{{{fontreset}}}

The other source code file in SmithForth is =system.fs=.  Its first
two lines, included below, define standard Forth words ~1+~ and ~1-~
by directly generating the corresponding machine code.  The comments
reflect this, highlighting the same encoding information as the =.dmp=
file:

{{{fontset(9pt)}}}
# #+CAPTION: Forth definitions of standard words ~1+~ and ~1-~.
#+LABEL: src:system-fs-sample
#+ATTR_LATEX: :float nil
#+begin_src fundamental
  : 1+ ( n|u -- n'|u' )  [ 49 . FF . 07 . ] ;   \ [r15]++   inc r/m64   REX.W FF /0    00 000 111
  : 1- ( n|u -- n'|u' )  [ 49 . FF . 0F . ] ;   \ [r15]--   dec r/m64   REX.W FF /1    00 001 111
#+end_src
{{{fontreset}}}

The =system.fs= file is appended as-is to the binary, cleverly
generating a half-machine-code, half-Forth-text executable.  The
machine code bootstraps a basic system which is then directed to
interpret the Forth code, thus completing the implementation.  David
Smith provides a simple =make.sh= shell script [cite:@smithforth] that
performs these build steps, additionally taking care to fill in the
executable size in the ELF file header (described below).

*** The x86-64 Instruction Set Architecture

David Smith implemented SmithForth for the x86-64 architecture.  While
ubiquitous on personal computers, we believe this architecture is not
well-suited for building an educational language implementation ``from
scratch''.

The x86-64 instruction set architecture (ISA) is the 64-bit extension
of the x86 ISA, which in turn traces its origins to the 8086
microprocessor released by Intel in 1978.  Its 45 years of history
have witnessed the evolution from 16-bit to 32-bit processors, the
introduction of pipelining, the addition of caches, the transition to
superscalar designs and \mu-op translation, the expansion to multi-core
CPUs and the extension from 32-bit to 64-bit addressing
[cite:@kerner2007history].

The changes in hardware design and the shifts in priorities coming
from software implementors have led to the addition and subsequent
deprecation of many ISA instructions.  One direct consequence is the
wasting of ``opcode space'' by old instructions that the passage of
time has rendered useless.  This means useful instructions often need
(sometimes multiple) prefix bytes, complicating handwritten machine
code.  Another consequence is the growth of processor documentation
beyond the possibility of easy navigation and consultation (Intel's
most recent 4-volume manual totals over 5000 pages)
[cite:@intel_manuals].

The repeated expansion of register width and number, in addition to
the complicated addressing modes allowed by the x86-64 architecture,
has led to complex encoding schemes requiring multiple prefix bytes, a
REX register extension byte, a ModR/M byte, a SIB byte, immediate &
offset bytes etc.  Fully understanding these schemes is an arduous
task which, while mandatory for the writers of assemblers, only
hinders students' understanding of the fundamentals.

The complexity of the x86-64 ISA has led us to look for
alternatives. After looking at the RISC-V and ARM instruction set
architectures, we decided the better option for our purposes is the
modern and elegant RISC-V.

*** The RISC-V Instruction Set Architecture

RISC-V is an ``open standard'' reduced instruction set computer (RISC)
architecture initiated at the University of California, Berkeley.
RISC-V is available under royalty-free open-source licences for all
interested hardware implementors.

RISC-V is designed with simplicity in mind, inheriting many ideas from
Berkeley RISC and MIPS [cite:@waterman2016].  It is a load-store
architecture with all ALU operations occuring between registers (this
greatly simplifies addressing modes and thus fits our purposes).  It
provides 32 general purpose registers, offering enough temporary
registers to avoid using the stack in many situations.  An interesting
design choice is the inclusion of an always-zero =x0=​/​=zero= register
that simplifies many operations (for example, copying register =t0= to
register =t1= can be expressed as an add-to-zero instruction: ~add t1,
t0, zero~).

The ISA offers only a few simple and orthogonal instructions, aiding
both hardware designers and low-level programmers.  Each instruction
is encoded according to one of six instruction formats, yielding a
highly regular encoding scheme.  The ISA specification defines 32-bit
and 64-bit variants (and even a description of a 128-bit variant
reserved for future use).  It is extendable through /extensions/; in
fact, much functionality considered essential in other ISAs is
provided by extensions in RISC-V: multiplication & division, atomics,
floating point operations in 32-bit, 64-bit and 128-bit varieties,
compressed 16-bit instructions for reducing code size, and even ISA
support for interpreted or JIT-compiled languages.  The number of
available ISA extensions is growing over time
[cite:@riscv_ratified_extensions].

For a historical perspective on the motivations behind RISC-V, refer
to /``The RISC-V Reader: An Open Architecture Atlas''/ by RISC-V
co-authors David Patterson and Andrew Waterman [cite:@patterson2017].
For detailed technical aspects and further design rationale, consult
the /``RISC-V Instruction Set Manual: Volume I''/
[cite:@riscv_spec_vol_i] and /``Volume II''/
[cite:@riscv_spec_vol_ii].

For our purposes it will suffice to use the base instruction set of
the 64-bit RISC-V variant, dubbed RV64I.  This consists of RV32I (the
base 32-bit instruction set) plus a few instructions that extend it to
64-bits.  The total number of instructions available in RV64I is only
57 (out of which 42 instructions are shared with RV32I).  Notably, our
implementation will not require multiplication or division, which are
provided by the RV32M and RV64M extensions, respectively).

We have concluded that we will port the SmithForth machine code from
the x86-64 to the RISC-V architecture.  Besides the ISA, there is
another foundational interface on which the system relies and that is
the Linux operating system it assumes when doing system calls.  Even
more, the machine code is embedded in an executable file conforming to
what Linux expects from loadable files, which is the ELF file format.
In the next sections we will provide a brief overview of Linux system
calls and the ELF file format.

*** The Linux Environment: System Calls

System calls are ``the fundamental interface between an application
and the Linux kernel'' [cite:@linux_man_syscalls].  Processes request
and receive resources such as memory or I/O access from the operating
system by invoking system calls (also called /syscalls/).  When doing
so, they need to respect a /calling convention/, which allows
user-level programs and the kernel to interoperate.  For programs
written in assembly or machine code, before performing a system call
one needs to know its /system call number/.  This syscall number plus
the syscall arguments then need to be placed in specific registers.
Once the system call is performed, a result and an error might be
returned by the kernel in one or more registers, depending on the
architecture.  Consult the Linux /``syscalls(2)''/
[cite:@linux_man_syscalls] and /``syscall(2)''/
[cite:@linux_man_syscall] =man-pages= for more details.

The calling convention for Linux system calls is summarized in Table
[[tbl:syscall-calling-convention]] for both x86-64 and RISC-V.  The second
column lists the instruction used by each architecture to perform a
system call, while the third column shows the register where the
system call number should be placed.  The remaining columns list the
registers used for the return value and arguments.

{{{table_begin}}}
#+CAPTION: Calling convention for Linux system calls under x86-64 and RISC-V.
#+LABEL: tbl:syscall-calling-convention
#+ATTR_LATEX: :align c|c|c|c|cccc :float nil
| *Arch.* | *Instr.*  | *Syscall #* | *Return* | *Arg. 1* | *Arg. 2* | *Arg. 3* | *Args. 4, 5, 6*   |
|---------+-----------+-------------+----------+----------+----------+----------+-------------------|
| x86-64  | ~syscall~ | ~rax~       | ~rax~    | ~rdi~    | ~rsi~    | ~rdx~    | ~r10~, ~r8~, ~r9~ |
| RISC-V  | ~ecall~   | ~a7~        | ~a0~     | ~a0~     | ~a1~     | ~a2~     | ~a3~, ~a4~, ~a5~  |
{{{table_end}}}

SmithForth only performs two system calls in its machine code: =exit=
in the definition of ~BYE~ and =write= in the definition of ~TYPE~.
The syscall numbers and the type signatures are listed in Table
[[tbl:syscalls]].  Since we expect to use the same syscalls in the RISC-V
translation, we also include the RISC-V system call numbers as a
column.

{{{table_begin}}}
#+CAPTION: Syscalls used by SmithForth, together with their C type signatures.
#+LABEL: tbl:syscalls
#+ATTR_LATEX: :align l|c|c|lll :float nil
|         | *Syscall #* | *Syscall #* |                   |                   |                |
| *Name*  | (x86-64)    | (RISC-V)    | *Arg. 1*          | *Arg. 2*          | *Arg. 3*       |
|---------+-------------+-------------+-------------------+-------------------+----------------|
| ~write~ | 1 (~0x01~)  | 64 (~0x40~) | ~unsigned int fd~ | ~const char *buf~ | ~size_t count~ |
| ~exit~  | 60 (~0x3C~) | 93 (~0x5D~) | ~int error_code~  | –                 | –              |
{{{table_end}}}

For a comprehensive list of available Linux system calls under several
architectures, refer to the /``Linux System Call Table''/ compiled by
the ChromiumOS community [cite:@linux_system_calls_table].

*** ELF: The _E_​xecutable and _L_​inkable _F_​ormat

While system calls are the interface between the program and the Linux
kernel at runtime, the machine code first needs to be loaded into
memory for execution.  This procedure is called /loading/ and in Linux
it is subject to the System V Application Binary Interface (ABI)
specification.  In particular, this means that executables have to
respect the /Executable and Linkable Format/ (ELF) so that they can be
loaded correctly by the Linux kernel.

The ELF format is defined in Chapter 4 of the /``System V: Application
Binary Interface''/ (``generic ABI'' or ``gABI'') document
[cite:@system_v_gabi], with architectural particularities given in
separate ``platform-specific ABI'' (``psABI'') documents.  For x86-64,
this is the /``AMD64 Architecture Processor Supplement''/
[cite:@system_v_psabi_amd64], whereas for RISC-V it is the /``RISC-V
ABIs Specification''/ [cite:@system_v_psabi_riscv].  We will need the
``gABI'' and the x86-64 ``psaABI'' specifications for understanding
the ELF header created by SmithForth and the RISC-V ``psABI'' for
adapting it to the new architecture.

*** Development environment

All analysis and porting work done on SmithForth have been done inside
QEMU virtual machines running under MacOS.  Here we would like to
express our gratefulness for the amazing QEMU project
[cite:@bellard2005qemu; @qemu], which makes it remarkably easy to work
on multi-architecture projects from one machine.  We used QEMU for
setting up identical Debian VMs under x86-64 and RISC-V, both equipped
with GDB, =xxd=, =hexdump=, =objdump= and other useful development
utilities.  The GNU debugger has proved indispensable for debugging
both erroneus logic and badly (hand-)encoded instructions.

In the next chapter we will examine SmithForth's machine code
implementation, annotating it extensively with commented pseudocode.
This inline code documentation will be used in Chapter [[*Porting
SmithForth to RISC-V]] for porting SmithForth to RISC-V.

\clearpage


* Understanding and Annotating SmithForth

In this chapter we will delve into the machine code implementation of
SmithForth.  We will record our understanding as commented pseudocode,
which we will use to annotate the David Smith's original x86-64 code.
This documentation will aid the RISC-V implementation in the next
chapter by providing a higher-level picture of the system's
operations.

As proposed in the introduction, we will also make explicit the
encoding scheme used in the x86-64 architecture by highlighting ModR/M
and SIB bytes, immediate and offset bytes etc.  This will help the
interested reader explore the low-level details of instruction
encoding for x86-64 processors.

We explained how the Linux kernel loads an executable into memory if
it respects the ELF file format.  In this chapter's first section,
SmithForth's minimal ELF header is explored and explained.

** The ELF Header

*** ELF File Header

#+CAPTION: ELF file header for the Linux executable (x86-64).
#+LABEL: tbl:elf-file-header:x
#+ATTR_LATEX: :align l|l|l
| *&*            | *File Header Bytes*                 | *Explanation*                                                                      |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
| {{{addr(00)}}} | {{{b(0)}}}​~7F 45 4C 46~             | ~e_ident[EI_MAG]~: ELF magic number.                                               |
|                | {{{b(4)}}}​~02~                      | ~e_ident[EI_CLASS]~: ~1~ → 32-bit, _~2~ → 64-bit_.                                 |
|                | {{{b(5)}}}​~01~                      | ~e_ident[EI_DATA]~: _~1~ → little-endian_, ~2~ → big-endian.                       |
|                | {{{b(6)}}}​~01~                      | ~e_ident[EI_VERSION]~: ELF header version; must be ~1~.                            |
|                | {{{b(7)}}}​~00~                      | ~e_ident[EI_OSABI]~: Target OS ABI; ~ELFOSABI_NONE~ (~0~) is fine for Linux.       |
|                | {{{b(0)}}}​~00~                      | ~e_ident[EI_ABIVERSION]~: ABI version; should be ~0~ for Linux.                    |
|                | {{{b(1)}}}​~00 00 00 00 00 00 00~    | ~e_ident[EI_PAD]~: Padding; unused; should be ~0~.                                 |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
|                | {{{b(0)}}}​~02 00~                   | ~e_type~: Object file type; ~2~ → executable.                                      |
|                | {{{b(2)}}}​~3E 00~                   | ~e_machine~: Instruction set architecture; _~0x3E~ → ~x86-64~_, ~0xF3~ → ~RISC-V~. |
|                | {{{b(4)}}}​~01 00 00 00~             | ~e_version~: ELF identification version; must be ~1~.                              |
|                | {{{b(0)}}}​~78 00 40 00 00 00 00 00~ | ~e_entry~: Memory address of entry point (where process starts).                   |
|                | {{{b(0)}}}​~40 00 00 00 00 00 00 00~ | ~e_phoff~: File offset of program headers; ~0x34~ → ~32-bit~, _~0x40~ → 64-bit_.   |
|                | {{{b(0)}}}​~00 00 00 00 00 00 00 00~ | ~e_shoff~: File offset section headers (we don't have any sections).               |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
|                | {{{b(0)}}}​~00 00 00 00~             | ~e_flags~: 0 for the ~x86-64~ architecture.                                        |
|                | {{{b(4)}}}​~40 00~                   | ~e_ehsize~: Size of this header; ~0x34~ → 32-bit, _~0x40~ → 64-bit_.               |
|                | {{{b(6)}}}​~38 00~                   | ~e_phentsize~: Size of each program header; ~0x20~ → 32-bit, _~0x38~ → 64-bit_.    |
|                | {{{b(0)}}}​~01 00~                   | ~e_phnum~: Number of program headers; here ~1~.                                    |
|                | {{{b(2)}}}​~40 00~                   | ~e_shentsize~: Size of each section header; ~0x28~ → 32-bit, _~0x40~ → 64-bit_.    |
|                | {{{b(4)}}}​~00 00~                   | ~e_shnum~: Number of section headers; here ~0~.                                    |
|                | {{{b(6)}}}​~00 00~                   | ~e_shstrndx~: Index of section header containing section names; N/A.               |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
| {{{addr(40)}}} |                                     |                                                                                    |

*** ELF Program Header

#+CAPTION: ELF program header (x86-64).
#+LABEL: tbl:elf-program-header:x
#+ATTR_LATEX: :align l|l|l
| *&*            | *File Header Bytes*                 | *Explanation*                                                                                      |
|----------------+-------------------------------------+----------------------------------------------------------------------------------------------------|
| {{{addr(40)}}} | {{{b(0)}}}​~01 00 00 00~             | ~p_type~: Segment type; ~1~ → loadable.                                                            |
|                | {{{b(4)}}}​~07 00 00 00~             | ~p_flags~: Segment-wise permissions; _1 → execute_, _2 → write_, _4 → read_.                       |
|                | {{{b(0)}}}​~00 00 00 00 00 00 00 00~ | ~p_offset~: Offset of segment in file; we load the whole file, so ~0~.                             |
|                | {{{b(0)}}}​~00 00 40 00 00 00 00 00~ | ~p_vaddr~: Virtual address of loaded segment; ~0x400000~ on ~x86-64~ [cite:@system_v_psabi_amd64]. |
|                | {{{b(0)}}}​~00 00 00 00 00 00 00 00~ | ~p_paddr~: Only used on systems where physical address is relevant.                                |
|                | {{{b(0)}}}​~02 1E 01 00 00 00 00 00~ | ~p_filesz~: Size of the segment in the file image (~TODO~).                                        |
|                | {{{b(0)}}}​~00 00 C0 7F 00 00 00 00~ | ~p_memsz~: Size of the segment in memory (\ge ~p_filesz~).                                           |
|                | {{{b(0)}}}​~00 10 00 00 00 00 00 00~ | ~p_align~: Align segment to ~x86-64~ page size (4096 or ~0x1000~) [cite:@system_v_psabi_amd64].    |
|----------------+-------------------------------------+----------------------------------------------------------------------------------------------------|
| {{{addr(78)}}} |                                     |                                                                                                    |

** Global Variables                                                :noexport:

#+CAPTION: Global variables in SmithForth, referenced directly by machine code (x86-64).
#+LABEL: tbl:globals:x
#+ATTR_LATEX: :align l|l|l
| *Variable* | *Register*​/​*Address*   | *Contents*                                                    |
|------------+------------------------+---------------------------------------------------------------|
| ~INPUT~    | ~RSI~                  | Source address of binary interpreter data and commands.       |
| ~OUTPUT~   | ~RDI~                  | Destination address of binary interpreter operations.         |
| ~VARS~     | ~R9~                   | Base address of globals stored in memory (~#IN~, ~TIB~ etc).  |
| ~STACK~    | ~R15~                  | Address of top value on the data stack.                       |
|------------+------------------------+---------------------------------------------------------------|
| ~#IN~      | ~0x10000000 (VARS)~    | The number of characters in the current line.                 |
| ~TIB~      | ~0x10000008 (VARS+8)~  | The address where the current line begins.                    |
| ~>IN~      | ~0x10000010 (VARS+16)~ | The number of /parsed/ characters in the current line.        |
| ~STATE~    | ~0x10000020 (VARS+32)~ | Either ~0~ (/interpreting/ state) or ~1~ (/compiling/ state). |
| ~LATEST~   | ~0x10000028 (VARS+40)~ | The execution token (/xt/) of the latest defined Forth word.  |

Beyond ~0x10000030~ lies uninitialized memory. This is where the
binary interpreter is going to start writing, so this is the initial
value we will [[tbl:forth:init-io:x][give]] to global variable ~OUTPUT~.

#+CAPTION: x86-64: Initialize global variables =INPUT= and =OUTPUT=.
#+LABEL: tbl:forth:init-io:x
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                  | *Instruction*    | *Opcode*   | *&*            | *Machine code*       |
|-------------------------------+------------------+------------+----------------+----------------------|
| /# Global variable ~INPUT~./  |                  |            |                |                      |
| ~INPUT@RSI ← 0x004000B2;~     | MOV r32, /imm32/ | B8+rd /id/ | {{{addr(78)}}} | ~BE~ /~B2 00 40 00~/ |
| /# Global variable ~OUTPUT~./ |                  |            |                |                      |
| ~OUTPUT@RDI ← 0x10000030;~    | MOV r32, /imm32/ | B8+rd /id/ |                | ~BF~ /~30 00 00 10~/ |
|                               |                  |            | {{{addr(82)}}} |                      |


** Binary Interpreter

*** The Binary Interpreter Loop                                    :noexport:

#+CAPTION: The binary interpreter routine and loop (x86-64).
#+LABEL: tbl:forth:bi:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                 | *Instruction*    | *Opcode*      | *&*            | *Machine code*                          | *Intention*             |
|----------------------------------------------+------------------+---------------+----------------+-----------------------------------------+-------------------------|
| ~_bi:~                                       |                  |               | {{{addr(82)}}} |                                         |                         |
| {{{i(1)}}} /# Loop the binary interpreter./  |                  |               |                |                                         |                         |
| {{{i(1)}}} ~call bi();~                      | CALL _rel32_     | E8 _cb_[fn:1] |                | ~E8~ {{{offset(02 00 00 00,89-87)}}}    | call bi()               |
| {{{i(1)}}} ~goto _bi.~                       | JMP _rel8_       | EB _cb_       | {{{addr(87)}}} | ~EB~ {{{offset(F9,82-89)}}}             | jump _bi                |
| ~bi():~                                      |                  |               | {{{addr(89)}}} |                                         |                         |
| {{{i(1)}}} /# Read next byte from ~INPUT~./  |                  |               |                |                                         |                         |
| {{{i(1)}}} ~byte@AL ← [INPUT@RSI++];~        | LODS m8          | AC            |                | ~AC~                                    | al = [rsi++]            |
| {{{i(1)}}} /# Does it start a command?/      |                  |               |                |                                         |                         |
| {{{i(1)}}} ~if byte@AL = 0x99:~              | CMP AL, /imm8/   | 3C /ib/       |                | ~3C~ /~99~/                             | cmp al, 99(command)     |
| {{{i(2)}}}     ~goto _command.~              | JE _rel8_        | 74 _cb_       |                | ~74~ {{{offset(02,90-8E)}}}             | jump _command if ==     |
| {{{i(1)}}} /# If not, just copy the byte/    |                  |               |                |                                         |                         |
| {{{i(1)}}} /# to ~OUTPUT~ and return./       |                  |               |                |                                         |                         |
| {{{i(1)}}} ~[OUTPUT@RDI++] ← byte@AL;~       | STOS m8          | AA            | {{{addr(8E)}}} | ~AA~                                    | [rdi++] = al (xmit)     |
| {{{i(1)}}} ~return.~                         | RET              | C3            |                | ~C3~                                    | return                  |
| ~_command:~                                  |                  |               | {{{addr(90)}}} |                                         |                         |
| {{{i(1)}}} /# Address of global ~LATEST~./   |                  |               |                |                                         |                         |
| {{{i(1)}}} ~LATEST@RDX ← 0x10000028;~        | MOV r32, /imm32/ | B8+rd /id/    |                | ~BA~ /~28 00 00 10~/                    | rdx = Latest            |
| {{{i(1)}}} /# Read command argument./        |                  |               |                |                                         |                         |
| {{{i(1)}}} ~arg@AL ← [INPUT@RSI++];~         | LODS m8          | AC            |                | ~AC~                                    | al = [rsi++] (argument) |
| {{{i(1)}}} /# Command type by argument:/     |                  |               |                |                                         |                         |
| {{{i(1)}}} /# – ~0bi00ccccc~: define;/       |                  |               |                |                                         |                         |
| {{{i(1)}}} /# – ~0b011ccccc~: compile;/      |                  |               |                |                                         |                         |
| {{{i(1)}}} /# – ~0b111ccccc~: execute./      |                  |               |                |                                         |                         |
| {{{i(1)}}} ~if arg@AL & 0b01100000 = 0:~     | TEST AL, /imm8/  | A8 /ib/       |                | ~A8~ /~60~/                             | al & 60(graphic)?       |
| {{{i(2)}}}     /# _Define_ a new word./      |                  |               |                |                                         |                         |
| {{{i(2)}}}     ~goto Head.~                  | JZ _rel8_        | 74 _cb_       |                | ~74~ {{{offset(31,CB-9A)}}}             | jump Head if zero       |
| {{{i(1)}}} /# Get latest dictionary word./   |                  |               | {{{addr(9A)}}} |                                         |                         |
| {{{i(1)}}} ~xt@RBX ← [LATEST];~              | MOV r64, r/m64   | REX.W 8B /r   |                | ~48 8B~ {{{modrm(1A,00,011,010)}}}      | rbx = [rdx]             |
| ~_find1:~                                    |                  |               | {{{addr(9D)}}} |                                         |                         |
| {{{i(1)}}} ~save arg@AL on the stack;~       | PUSH r64         | 50+rd         |                | ~50~                                    | push al                 |
| {{{i(1)}}} ~chr@AL &= 0b0111111;~            | AND AL, /imm8/   | 24 /ib/       |                | ~24 7F~                                 | al &= 7F                |
| {{{i(1)}}} ~if chr@AL = [xt + 17]:~          | CMP r8, r/m8     | REX 3A /r     |                | ~3A 43~ {{{modrm(11,00,010,001)}}}      | cmp al, [rbx+11]        |
| {{{i(2)}}}     /# We found an entry whose/   |                  |               |                |                                         |                         |
| {{{i(2)}}}     /# name begins with ~chr~./   |                  |               |                |                                         |                         |
| {{{i(2)}}}     ~restore arg@AL;~             | POP r64          | 58+rd         |                | ~58~                                    | pop al                  |
| {{{i(2)}}}     ~goto _match.~                | JE _rel8_        | 74 _cb_       |                | ~74~ {{{offset(06,AC-A6)}}}             | jump _match if ==       |
| {{{i(1)}}} /# Follow word's link pointer/    |                  |               | {{{addr(A6)}}} |                                         |                         |
| {{{i(1)}}} /# to previous entry and repeat./ |                  |               |                |                                         |                         |
| {{{i(1)}}} ~xt@RBX ← [xt@RBX + 8];~          | MOV r64, r/m64   | REX.W 8B /r   |                | ~48 8B~ {{{modrm(5B,01,011,011)}}} ~08~ | rbx = [rbx+8]           |
| {{{i(1)}}} ~goto _find1.~                    | JMP _rel8_       | EB _cb_       |                | ~EB~ {{{offset(F1,9D-AC)}}}             | jump _find1             |
| ~_match:~                                    |                  |               | {{{addr(AC)}}} |                                         |                         |
| {{{i(1)}}} ~if arg & 0b1000000 = 0:~         | TEST AL, /imm8/  | A8 /ib/       |                | ~A8~ /~80~/                             | al & 80(exec) ?         |
| {{{i(2)}}}     /# _Compile_./                |                  |               |                |                                         |                         |
| {{{i(2)}}}     ~goto COMPL.~                 | JZ _rel8_        | 74 _cb_       |                | ~74~ {{{offset(09,B9-B0)}}}             | jump COMPL if zero      |
| {{{i(1)}}} /# _Execute_ word's code./        |                  |               | {{{addr(B0)}}} |                                         |                         |
| {{{i(1)}}} ~goto [xt@RBX].~                  | JMP r/m64        | REX FF /4     |                | ~FF~ {{{modrm(23,00,100,011)}}}         | jump [rbx] (exec)       |
|                                              |                  |               | {{{addr(B2)}}} |                                         |                         |

*** Subroutine ~COMPL~                                             :noexport:

#+CAPTION: =COMPL=, the FORTH compiler.
#+LABEL: tbl:forth:compl:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                                                                | *Instruction*  | *Opcode*   | *&*            | *Machine code*                  | *Intention*                                        |
|---------------------------------------------------------------------------------------------+----------------+------------+----------------+---------------------------------+----------------------------------------------------|
| /# Define:/ _~COMPL~_                                                                       | ---            | ---        | {{{addr(B2)}}} | {{{define(05,43 4F 4D 50 4C)}}} | define COMPL                                       |
| /# In/Out:/ ~( xt@RBX -- xt@RBX )~                                                          |                |            |                |                                 |                                                    |
|                                                                                             |                |            |                |                                 |                                                    |
| /# Generate a CALL instr. to ~OUTPUT~:/                                                     |                |            |                |                                 |                                                    |
| /# – instruction: CALL r/m64/                                                               |                |            |                |                                 |                                                    |
| /# – opcode: FF /2/                                                                         |                |            |                |                                 |                                                    |
| /#/                                                                                         |                |            |                |                                 |                                                    |
| /# Thus we generate code as follows:/                                                       |                |            |                |                                 |                                                    |
| /#/{{{c(2)}}}​~FF~ {{{modrm(14,00,010,100)}}} {{{sib(25,00,100,101)}}} _~??~ ~??~ ~??~ ~??~_ |                |            |                |                                 |                                                    |
|                                                                                             |                |            |                |                                 |                                                    |
| /# 1. Write opcode of CALL (0x99)./                                                         |                |            |                |                                 |                                                    |
| ~op@AL ← 0xFF;~                                                                             | MOV r8, /imm8/ | B0+rb /ib/ | {{{addr(B9)}}} | ~B0~ /FF/                       | compile: call r/m64 (FF /2, 00 010 100, 00 100 101 |
| ~[OUTPUT@RDI++] ← op@AL;~                                                                   | STOS m8        | AA         |                | ~AA~                            |                                                    |
| /# 2. Write ModR/M byte (0x14)./                                                            |                |            |                |                                 |                                                    |
| ~modrm@AL ← 0x14;~                                                                          | MOV r8, /imm8/ | B0+rb /ib/ |                | ~B0~ /14/                       | al = _                                             |
| ~[OUTPUT@RDI++] ← op@AL;~                                                                   | STOS m8        | AA         |                | ~AA~                            |                                                    |
| /# 3. Write SIB byte (0x25)./                                                               |                |            |                |                                 |                                                    |
| ~sib@AL ← 0x25;~                                                                            | MOV r8, /imm8/ | B0+rb /ib/ |                | ~B0~ /25/                       | [rdi++] = al                                       |
| ~[OUTPUT@RDI++] ← op@AL;~                                                                   | STOS m8        | AA         |                | ~AA~                            |                                                    |
| /# 4. Write 4-byte code address./                                                           |                |            |                |                                 |                                                    |
| ~xt@EAX ← xt@EBX;~                                                                          | XCHG EAX, r32  | 90+rd      |                | ~93~                            | eax = ebx                                          |
| ~[OUTPUT@RDI++4] ← xt@EAX;~                                                                 | STOS m32       | AB         |                | ~AB~                            | [rdi(++4)] = eax                                   |
|                                                                                             |                |            |                |                                 |                                                    |
| ~return.~  /# To interpreter loop./                                                         | RET            | C3         |                | ~C3~                            | return                                             |
|                                                                                             |                |            | {{{addr(C5)}}} |                                 |                                                    |

*** Subroutine ~Head~                                              :noexport:

#+CAPTION: Subroutine =Head= defines new words in the dictionary (x86-64).
#+LABEL: tbl:forth:head:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                           | *Instruction*     | *Opcode*         | *&*            | *Machine code*                          | *Intention*   |
|----------------------------------------+-------------------+------------------+----------------+-----------------------------------------+---------------|
| /# Define:/ _~Head~_                   | ---               | ---              | {{{addr(C5)}}} | {{{define(04,48 65 61 64)}}}            | define Head   |
| /# In/Out:/ ~( latest@RDX~             |                   |                  |                |                                         |               |
| /#/{{{io}}}   ~flag@AL -​- )~           |                   |                  |                |                                         |               |
|                                        |                   |                  |                |                                         |               |
| /# 16-bit align ~OUTPUT~./             |                   |                  |                |                                         |               |
| ~OUTPUT@RDI += 0x0F;~                  | ADD r/m64, /imm8/ | REX.W 83 /0 /ib/ | {{{addr(CB)}}} | ~48 83~ {{{modrm(C7,11,000,111)}}} ~0F~ | rdi += 0F     |
| ~OUTPUT@RDI &= 0xF0;~                  | AND r/m64, /imm8/ | REX.W 83 /4 /ib/ |                | ~48 83~ {{{modrm(E7,11,100,111)}}} ~F0~ | rdi &= F0     |
|                                        |                   |                  |                |                                         |               |
| /# Fill the new dictionary entry:/     |                   |                  |                |                                         |               |
| /#/                                    |                   |                  |                |                                         |               |
| /# 1. Set the _link_ field, then set/  |                   |                  |                |                                         |               |
| /# ~LATEST~ to the new entry./         |                   |                  |                |                                         |               |
| ~latest@RCX ← [latest@RDX];~           | MOV r64, r/m64    | REX.W 8B /r      |                | ~48 8B~ {{{modrm(0A,00,001,010)}}}      | rcx = [rdx]   |
| ~[OUTPUT@RDI+8] ← latest@RCX;~         | MOV r/m64, r64    | REX.W 89 /r      |                | ~48 89~ {{{modrm(4F,01,001,111)}}} ~08~ | [rdi+8] = rcx |
| ~[latest@RDX] ← OUTPUT@RDI;~           | MOV r/m64, r64    | REX.W 89 /r      |                | ~48 89~ {{{modrm(3A,00,111,010)}}}      | [rdx] = rdi   |
|                                        |                   |                  |                |                                         |               |
| /# 2. Set the _flag+length_ field./    |                   |                  |                |                                         |               |
| ~OUTPUT@RDI += 0x10;~                  | ADD r/m64, /imm8/ | REX.W 83 /0 /ib/ |                | ~48 83~ {{{modrm(C7,11,000,111)}}} ~10~ | rdi += 10     |
| ~[OUTPUT@RDI++] ← flag@AL;~            | STOS m8           | AA               |                | ~AA~                                    | [rdi++] = al  |
|                                        |                   |                  |                |                                         |               |
| /# 3. Extract name length from/        |                   |                  |                |                                         |               |
| /# ~flag~ and copy _name_ field./      |                   |                  |                |                                         |               |
| ~flag@ECX ← flag@AL;~                  | XCHG EAX, r32     | 90+rd            |                | ~91~                                    | ecx = eax     |
| ~length@ECX ← flag@ECX & 0x1F;~        | AND r/m32, /imm8/ | 83 /​4 /ib/       |                | ~83~ {{{modrm(E1,11,100,001)}}} ~1F~    | ecx &= 1F     |
| ~copy      length@ECX bytes~           |                   |                  |                |                                         |               |
| {{{c(5)}}}​~from INPUT@RSI~             |                   |                  |                |                                         |               |
| {{{c(5)}}}​~to OUTPUT@RDI;~             | REP MOVS m8, m8   | F3 A4            |                | ~F3 A4~                                 | copy Name     |
|                                        |                   |                  |                |                                         |               |
| /# 4. Point _code_ field to the code/  |                   |                  |                |                                         |               |
| /# about to be generated at ~OUTPUT~./ |                   |                  |                |                                         |               |
| ~code@RCX ← [latest@RDX];~             | MOV r64, r/m64    | REX.W 8B /r      |                | ~48 8B~ {{{modrm(0A,00,001,010)}}}      | rcx = [rdx]   |
| ~[code@RCX] ← OUTPUT@RDI;~             | MOV r/m64, r64    | REX.W 89 /r      |                | ~48 89~ {{{modrm(39,00,111,001)}}}      | [rcx] = rdi   |
| ~return.~  /# To interpreter loop./    | RET               | C3               |                | ~C3~                                    | return        |


** A Way Out

*** Subroutine ~BYE~                                               :noexport:

#+CAPTION: Subroutine ~BYE~ terminates the program by performing an ~exit~ syscall (x86-64).
#+LABEL: tbl:forth:bye:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                       | *Instruction*  | *Opcode* | *&*             | *Machine code*                  | *Intention*            |
|------------------------------------+----------------+----------+-----------------+---------------------------------+------------------------|
| /# Define:/ _~BYE~_                | ---            | ---      | {{{addr(172)}}} | {{{define(03,42 59 45)}}}       | define BYE             |
| /# In/Out:/ ~( -​- )~               |                |          |                 |                                 |                        |
|                                    |                |          |                 |                                 |                        |
| /# Goodbye, world (exit syscall)./ |                |          |                 |                                 |                        |
| ~nr@RAX ← 0x3C;~  /# ~__NR_exit~./ | PUSH /imm8/    | 6A /ib/  |                 | ~6A~ /~3C~/                     | rax = exit (no return) |
|                                    | POP            | 58+rd    |                 | ~58~                            |                        |
| ~status@RDI ← 0;~                  | XOR r/m32, r32 | 31 /r    |                 | ~31~ {{{modrm(FF,11,111,111)}}} | rdi = stat             |
| ~syscall exit(status@RDI).~        | SYSCALL        | 0F 05    |                 | ~0F 05~                         | syscall                |


** Debugging Utilities

*** Subroutine ~TYPE~                                              :noexport:

Citations:
- Section "3.2 Calling convention" from [cite:@patterson2017]:
  function prologue & epilogue.

#+CAPTION: Subroutine ~TYPE~ dumps a memory range to ~STDOUT~ (x86-64).
#+LABEL: tbl:forth:type:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                     | *Instruction*   | *Opcode*    | *&*                  | *Machine code*                     | *Intention*           |
|--------------------------------------------------+-----------------+-------------+----------------------+------------------------------------+-----------------------|
| /# Define:/ _~TYPE~_                             | ---             | ---         |                      | {{{define(04,54 59 50 45)}}}       | define TYPE           |
| /# In/Out:/    ~( addr@RSI u@RDX~                |                 |             |                      |                                    |                       |
| /#{{{io--}}}/ ~-​- ?@RSI ?@RDI )~                 |                 |             |                      |                                    |                       |
| /#/                                              |                 |             |                      |                                    |                       |
| /# Dump memory range ~[addr, addr+u)~./          |                 |             |                      |                                    |                       |
|                                                  |                 |             |                      |                                    |                       |
| {{{i(1)}}} ~fd@RDI ← 1;~  /# ~STDOUT_FILENO~./   | PUSH /imm8/     | 6A /ib/     |                      | ~6A~ /~01~/                        | rdi(fd) = stdout = 1  |
|                                                  | POP             | 58+rd       |                      | ~5F~                               |                       |
| ~_begin:~                                        |                 |             | {{{addr(00)}}}[fn:2] |                                    |                       |
| {{{i(1)}}} /# ~__NR_write~ is also 1./           |                 |             |                      |                                    |                       |
| {{{i(1)}}} ~nr@RAX ← fd@RDI;~                    | MOV r32, r/m32  | 8B /r       |                      | ~8B~ {{{modrm(C7,11,000,111)}}}    | rax = write = 1 = rdi |
| {{{i(1)}}} ~syscall write(fd@RDI,~               |                 |             |                      |                                    |                       |
| {{{i(1)}}}{{{c(14)}}}    ~addr@RSI,~             |                 |             |                      |                                    |                       |
| {{{i(1)}}}{{{c(14)}}}    ~u@RDX);~               | SYSCALL         | 0F 05       |                      | ~0F 05~                            | syscall               |
| {{{i(1)}}} ~if ret@RAX < 0:~                     | TEST r/m64, r64 | REX.W 85 /r |                      | ~48 85~ {{{modrm(C0,11,000,000)}}} | cmp rax, 0            |
| {{{i(2)}}} /# An error occured./                 |                 |             |                      |                                    |                       |
| {{{i(2)}}}     ~goto _end.~                      | JL _rel8_       | 7C _cb_     |                      | ~7C~ {{{offset(08,11-09)}}}        | +jump _end if <       |
| {{{i(1)}}} /# Advance by ~ret~ (printed) bytes./ |                 |             | {{{addr(09)}}}       |                                    |                       |
| {{{i(1)}}} ~addr@RSI += ret@RAX;~                | ADD r/m64, r64  | REX.W 01 /r |                      | ~48 01~ {{{modrm(C6,11,000,110)}}} | rsi(buf) += rax       |
| {{{i(1)}}} /# Fewer bytes left to print./        |                 |             |                      |                                    |                       |
| {{{i(1)}}} ~u@RDX -= ret@RAX;~                   | SUB r/m64, r64  | REX.W 29 /r |                      | ~48 29~ {{{modrm(C2,11,000,010)}}} | rdx(count) -= rax     |
| {{{i(1)}}} ~if u > 0:~                           |                 |             |                      |                                    |                       |
| {{{i(2)}}}     /# We still have bytes to print./ |                 |             |                      |                                    |                       |
| {{{i(2)}}}     ~goto _begin.~                    | JG _rel8_       | 7F _cb_     |                      | ~7F~ {{{offset(EF,00-11)}}}        | -jump _beg if >       |
| ~_end:~                                          |                 |             | {{{addr(11)}}}       |                                    |                       |
| {{{i(1)}}} ~return.~                             | RET             | C3          |                      | ~C3~                               | return                |

*** Subroutine ~dbg~                                               :noexport:

Explain:
- ~addr~ value of ~0x0FFFFFE0~ is chosen so that the first four words
  on the stack (whose top is at ~0x10000000~) are printed.
- How to print readably using ~xxd -e -g8 -u -o 0x0FFFFFE0~.

#+CAPTION: Subroutine ~dbg~ dumps the working memory to ~STDOUT~ (x86-64).
#+LABEL: tbl:forth:dbg:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                           | *Instruction*    | *Opcode*   | *Machine code*            | *Intention* |
|----------------------------------------+------------------+------------+---------------------------+-------------|
| /# Define:/ _~dbg~_                    | ---              | ---        | {{{define(03,64 52 67)}}}​ | define dbg  |
| /# In/Out:/ ~( -​- )~                   |                  |            |                           |             |
| /#/                                    |                  |            |                           |             |
| /# Dump working memory./               |                  |            |                           |             |
|                                        |                  |            |                           |             |
| ~save INPUT@RSI on the stack;~         | PUSH r64         | 50+rd      | ~56~                      | push rsi    |
| ~save OUTPUT@RDI on the stack;~        | PUSH r64         | 50+rd      | ~57~                      | push rdi    |
| /# Dump memory contents using/         |                  |            |                           |             |
| /# subroutine ~TYPE~./                 |                  |            |                           |             |
| ~addr@RSI ← 0x0FFFFFE0;~               | MOV r32, /imm32/ | B8+rd /id/ | ~BE~ /~E0 FF FF 0F~/      | rsi = addr  |
| ~u@RDX ← 0x0A00;~                      | MOV r32, /imm32/ | B8+rd /id/ | ~BA~ /~00 0A 00 00~/      | rdx = u     |
| /# Compile a CALL to ~TYPE(addr, u)~./ |                  |            |                           |             |
| ~call TYPE;~  /# Compiled./            | ---              | ---        | {{{compile(54,T)}}}       | Call TYPE   |
| /# Restore registers and return./      |                  |            |                           |             |
| ~restore OUTPUT@RDI;~                  | POP r64          | 58+rd      | ~5F~                      | pop rdi     |
| ~restore INPUT@RSI;~                   | POP r64          | 58+rd      | ~5E~                      | pop rsi     |
| ~return.~                              | RET              | C3         | ~C3~                      | return      |
|                                        |                  |            |                           |             |

*** Subroutine ~reg~                                               :noexport:

#+CAPTION: Subroutine ~reg~ dumps the registers to ~STDOUT~ (x86-64).
#+LABEL: tbl:forth:reg:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                             | *Instruction*     | *Opcode*         | *Machine code*                        | *Intention*             |
|------------------------------------------+-------------------+------------------+---------------------------------------+-------------------------|
| /# Define:/ _~reg~_                      | ---               | ---              | {{{define(03,72 65 67)}}}             | define reg              |
| /# In/Out:/ ~( -​- )~                     |                   |                  |                                       |                         |
| /#/                                      |                   |                  |                                       |                         |
| /# Dump the registers./                  |                   |                  |                                       |                         |
|                                          |                   |                  |                                       |                         |
| ~save INPUT@RSI;~                        | PUSH r64          | 50+rd            | ~56~                                  | push rsi                |
| ~save OUTPUT@RDI;~                       | PUSH r64          | 50+rd            | ~57~                                  | push rdi                |
|                                          |                   |                  |                                       |                         |
| /# Push the 16 registers on the/         | PUSH r64          | REX 50+rd        | ~41 57~                               | push r15, rdi, r14, rsi |
| /# stack so that when printed/           | PUSH r64          | 50+rd            | ~57~                                  | push r13, rbp, r12, rsp |
| /# they're displayed like this:/         | PUSH r64          | REX 50+rd        | ~41 56~                               | push r11, rbx, r10, rdx |
| /#/                                      | PUSH r64          | 50+rd            | ~56~                                  | push r9 , rcx, r8 , rax |
| /#/{{{c(4)}}} ~·-----------·~            | PUSH r64          | REX 50+rd        | ~41 55~                               |                         |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~R15 ¦ RDI ¦~ | PUSH r64          | 50+rd            | ~55~                                  |                         |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~R14 ¦ RSI ¦~ | PUSH r64          | REX 50+rd        | ~41 54~                               |                         |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~··· ¦ ··· ¦~ | PUSH r64          | 50+rd            | ~54~                                  |                         |
| /#/{{{c(4)}}} ~¦~​{{{c(2)}}}​~R8  ¦ RAX ¦~ | PUSH r64          | REX 50+rd        | ~41 53~                               |                         |
| /#/{{{c(4)}}} ~·-----------·~            | PUSH r64          | 50+rd            | ~53~                                  |                         |
|                                          | PUSH r64          | REX 50+rd        | ~41 52~                               |                         |
|                                          | PUSH r64          | 50+rd            | ~52~                                  |                         |
|                                          | PUSH r64          | REX 50+rd        | ~41 51~                               |                         |
|                                          | PUSH r64          | 50+rd            | ~51~                                  |                         |
|                                          | PUSH r64          | REX 50+rd        | ~41 50~                               |                         |
|                                          | PUSH r64          | 50+rd            | ~50~                                  |                         |
| /# Print top 128 stack bytes using/      |                   |                  |                                       |                         |
| /# subroutine ~TYPE(addr, u)~./          |                   |                  |                                       |                         |
| ~addr@RSI ← RSP;~                        | MOV r64, r/m64    | REX.W 8B /r      | ~48 8B~ {{{modrm(F4,11,110,100)}}}    | rsi = rsp               |
| ~u@RDX ← 0x80;~                          | MOV r32, /imm32/  | B8+rd /id/       | ~BA~ /~80 00 00 00~/                  | rdx = u                 |
| ~call TYPE;~  /# Compiled./              | ---               | ---              | {{{compile(54,T)}}}                   | Call TYPE               |
| /# Clean the stack./                     |                   |                  |                                       |                         |
| ~pop 16 quads;~                          | SUB r/m64, /imm8/ | REX.W 83 /5 /ib/ | ~48 83~ {{{modrm(EC,11,101,100)}}} 80 | rsp -= -80              |
| ~restore OUTPUT@RDI;~                    | POP r64           | 58+rd            | ~5F~                                  | pop rdi                 |
| ~restore INPUT@RSI;~                     | POP r64           | 58+rd            | ~5E~                                  | pop rsi                 |
| ~return.~                                | RET               | C3               | ~C3~                                  | return                  |
|                                          |                   |                  |                                       |                         |


** Text Interpreter

# ============= TEXT INTERPRETER
#
# Standard Forth handles input one line at a time.
# SmithForth's text interpreter is a simple interpreter in the standard Forth style.
# SVAL (see standard Forth's EVALUATE) interprets each line.
# REFILL fetches a line of input, including its trailing LF, and sets the input source state.
#     10000000 #IN      cell contains #characters in the current line.
#     10000008 TIB      cell contains the address where the current line begins.
#     10000010 >IN      cell contains #characters in the current line that have been parsed.
#     10000020 STATE    cell contains 0(Interpreting) or 1(Compiling).
#     10000028 Latest   cell contains the execution token (xt) of the latest defined Forth word.
# In Forth, to parse is to remove from the input stream. As a line is parsed, [>IN] increases from 0 to [#IN].
# Forth's "parse area" is the part of the line not yet parsed.

*** Subroutine ~REFILL~                                            :noexport:

#+CAPTION: Subroutine ~REFILL~ replenishes the /parse area/ by advancing ~TIB~ and ~#IN~ (x86-64).
#+LABEL: tbl:forth:refill:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                     | *Instruction*      | *Opcode*         | *&*            | *Machine code*                                            | *Intention*      |
|--------------------------------------------------+--------------------+------------------+----------------+-----------------------------------------------------------+------------------|
| /# Define:/ _~REFILL~_                           | ---                | ---              |                | {{{define(06,52 45 46 49 4C 4C)}}}                        | define REFILL    |
| /# In/Out:/ ~( -​- )~                             |                    |                  |                |                                                           |                  |
| /#/                                              |                    |                  |                |                                                           |                  |
| /# Advance ~TIB~ and ~#IN~ so/                   |                    |                  |                |                                                           |                  |
| /# that ~[TIB, TIB + #IN)~ contains/             |                    |                  |                |                                                           |                  |
| /# a new line to be parsed./                     |                    |                  |                |                                                           |                  |
|                                                  |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /# Base address of globals./          |                    |                  |                |                                                           |                  |
| {{{i(1)}}} ~VARS@R9 ← 0x10000000;~               | MOV r/m64, /imm32/ | REX.W C7 /​0 /id/ |                | ~49 C7~ {{{modrm(C1,11,000,001)}}} /~00 00 00 10~/        | r9 = VAR         |
| {{{i(1)}}}                                       |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /# Advance ~TIB~​ by ~#IN~./           |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /#/                                   |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /# Note:         ~#IN~ is ~VARS+0~,/  |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /# {{{i(2.35)}}} ~TIB~ is ~VARS+8~,/  |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /# {{{i(2.35)}}} ~>IN~ is ~VARS+16~./ |                    |                  |                |                                                           |                  |
| {{{i(1)}}} ~#in@RAX ← [#IN];~                    | MOV r64, r/m64     | REX.W 8B /r      |                | ~49 8B~ {{{modrm(01,00,000,001)}}}                        | rax = [#IN]      |
| {{{i(1)}}} ~[TIB] += #in@RAX;~                   | ADD r/m64, r64     | REX.W 01 /r      |                | ~49 01~ {{{modrm(41,01,000,001)}}} {{{displ(08)}}}        | [TIB] += rax     |
| {{{i(1)}}} /# Reset ~#IN~ and ~>IN~ to 0./       |                    |                  |                |                                                           |                  |
| {{{i(1)}}} ~[#IN] &= 0;~                         | AND r/m64, /imm8/  | REX.W 83 /​4 /ib/ |                | ~49 83~ {{{modrm(21,00,100,001)}}} /~00~/                 | [#IN] = 0        |
| {{{i(1)}}} ~[>IN] &= 0;~                         | AND r/m64, /imm8/  | REX.W 83 /​4 /ib/ |                | ~49 83~ {{{modrm(61,01,100,001)}}} {{{displ(10)}}} /~00~/ | [>IN] = 0        |
| {{{i(1)}}}                                       |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /# Advance ~#IN~ until just/          |                    |                  |                |                                                           |                  |
| {{{i(1)}}} /# after first ~LF~ character./       |                    |                  |                |                                                           |                  |
| ~_begin:~                                        |                    |                  | {{{addr(00)}}} |                                                           | _beg:            |
| {{{i(1)}}} ~[#IN]++;~                            | INC r/m64          | REX.W FF /0      |                | ~49 FF~ {{{modrm(01,00,000,001)}}}                        | [#IN]++          |
| {{{i(1)}}} ~RAX ← [TIB];~                        | MOV r64, r/m64     | REX.W 8B /r      |                | ~49 8B~ {{{modrm(41,01,000,001)}}} {{{displ(08)}}}        | rax = [TIB]      |
| {{{i(1)}}} ~RAX += [#IN];~                       | ADD r64, r/m64     | REX.W 03 /r      |                | ~49 03~ {{{modrm(01,00,000,001)}}}                        | rax += [#IN]     |
| {{{i(1)}}} /# Newline character?/                |                    |                  |                |                                                           |                  |
| {{{i(1)}}} ~if [RAX - 1] != 0x0A:~               | CMP r/m8, /imm8/   | 80 /​7 /ib/       |                | ~80~ {{{modrm(78,01,111,000)}}} {{{displ(FF)}}} /~0A~/    | cmp [rax-1], LF  |
| {{{i(2)}}}   ~goto _begin.~                      | JNE _rel8_         | 75 _cb_          |                | ~75~ {{{offset(F0,00-10)}}}                               | -jump _beg if != |
| {{{i(1)}}} ~return.~                             | RET                | C3               | {{{addr(10)}}} | ~C3~                                                      | return           |

*** Subroutine ~seek~                                              :noexport:

#+CAPTION: Subroutine ~seek~ parses characters until it finds one in a given range (x86-64).
#+LABEL: tbl:forth:seek:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                       | *Instruction*      | *Opcode*         | *&*            | *Machine code*                                     | *Intention*                                 |
|----------------------------------------------------+--------------------+------------------+----------------+----------------------------------------------------+---------------------------------------------|
| /# Define:/ _~seek~_                               | ---                | ---              |                | {{{define(04,73 65 65 6B)}}}                       | define seek                                 |
| /# In/Out:/    ~( low@CL high@DL~                  |                    |                  |                |                                                    |                                             |
| /#/{{{io}}}      ~"ccc"~                           |                    |                  |                |                                                    |                                             |
| /#/{{{io--}}} ~-​- FLAGS )~                         |                    |                  |                |                                                    |                                             |
| /#/                                                |                    |                  |                |                                                    |                                             |
| /# Advance ~>IN~ until next/                       |                    |                  |                |                                                    |                                             |
| /# char is within ~[low, high)~/                   |                    |                  |                |                                                    |                                             |
| /# or parse area is empty./                        |                    |                  |                |                                                    |                                             |
|                                                    |                    |                  |                |                                                    |                                             |
| {{{c(2)}}} ~VARS@R9 ← 0x10000000;~                 | MOV r/m64, /imm32/ | REX.W C7 /​0 /id/ |                | ~49 C7~ {{{modrm(C1,11,000,001)}}} /~00 00 00 10~/ | r9 = VAR                                    |
| {{{c(2)}}} ~high@DL -= low@CL;~                    | SUB r8, r/m8       | 2A /r            |                | ~2A~ {{{modrm(D1,11,010,001)}}}                    | dl -= cl                                    |
| ~_begin:~                                          |                    |                  | {{{addr(00)}}} |                                                    | # _beg:  like WITHIN ( al cl dl -- eflags ) |
| {{{c(2)}}} /# Is parse area empty?/                |                    |                  |                |                                                    |                                             |
| {{{c(2)}}} ~>in@RAX ← [>IN];~                      | MOV r64, r/m64     | REX.W 8B /r      |                | ~49 8B~ {{{modrm(41,01,000,001)}}} {{{displ(10)}}} | rax = [>IN]                                 |
| {{{c(2)}}} ~if >in@RAX~ \ge{{{unsigned}}} ~[#IN]:~   | CMP r64, r/m64     | REX.W 3B /r      |                | ~49 3B~ {{{modrm(01,00,000,001)}}}                 | cmp rax, [#IN]                              |
| {{{c(4)}}}   ~goto _end.~                          | JAE _rel8_         | 73 _cb_          |                | ~73~ {{{offset(16,1F-09)}}}                        | +jump _end if U>=                           |
| {{{c(2)}}} /# Get current character./              |                    |                  | {{{addr(09)}}} |                                                    |                                             |
| {{{c(2)}}} ~RAX ← [TIB];~                          | MOV r64, r/m64     | REX.W 8B /r      |                | ~49 8B~ {{{modrm(41,01,000,001)}}} {{{displ(08)}}} | rax = [TIB]                                 |
| {{{c(2)}}} ~RAX += [>IN];~                         | ADD r64, r/m64     | REX.W 03 /r      |                | ~49 03~ {{{modrm(41,01,000,001)}}} {{{displ(10)}}} | rax += [>IN]                                |
| {{{c(2)}}} ~chr@AL ← [RAX];~                       | MOV r8, r/m8       | 8A /r            |                | ~8A~ {{{modrm(00,00,000,000)}}}                    | al = [rax]                                  |
| {{{c(2)}}} /# Is ~chr~ in ~[low, high)~?/          |                    |                  |                |                                                    |                                             |
| {{{c(2)}}} ~chr'@AL -= low@CL;~                    | SUB r8, r/m8       | 2A /r            |                | ~2A~ {{{modrm(C1,11,000,001)}}}                    | al -= cl                                    |
| {{{c(2)}}} ~if chr'@AL~ \lt{{{unsigned}}} ~high@DL:~ | CMP r8, r/m8       | 3A /r            |                | ~3A~ {{{modrm(C2,11,000,010)}}}                    | cmp al, dl                                  |
| {{{c(4)}}}   ~goto _end.~                          | JB _rel8_          | 72 _cb_          |                | ~72~ {{{offset(06,1F-19)}}}                        | +jump _end if U<                            |
| {{{c(2)}}} /# Go to next character./               |                    |                  | {{{addr(19)}}} |                                                    |                                             |
| {{{c(2)}}} ~[>IN]++;~                              | INC r/m64          | REX.W FF /0      |                | ~49 FF~ {{{modrm(41,01,000,001)}}} {{{displ(10)}}} | [>IN]++                                     |
| {{{c(2)}}} ~goto _begin.~                          | JMP _rel8_         | EB _cb_          |                | ~EB~ {{{offset(E1,00-1F)}}}                        | -jump _beg                                  |
| ~_end:~                                            |                    |                  | {{{addr(1F)}}} |                                                    | # _end:                                     |
| {{{c(2)}}} ~return.~                               | RET                | C3               |                | ~C3~                                               | return                                      |

*** Subroutine ~PARSE~                                             :noexport:

#+CAPTION: Subroutine ~PARSE~ returns the address and size of a newly parsed string (x86-64).
#+LABEL: tbl:forth:parse:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                                    | *Instruction*      | *Opcode*         | *&*            | *Machine code*                                     | *Intention*                                                                         |
|-----------------------------------------------------------------+--------------------+------------------+----------------+----------------------------------------------------+-------------------------------------------------------------------------------------|
| /# Define:/ _~PARSE~_                                           | ---                | ---              |                | {{{define(04,50 41 52 53 45)}}}                    | define PARSE                                                                        |
| /# In/Out:/    ~( low@CL high@DL~                               |                    |                  |                |                                                    |                                                                                     |
| /#/{{{io}}}     ​~"ccc<char>"~                                   |                    |                  |                |                                                    |                                                                                     |
| /#/{{{io--}}}​ ~-​- addr@RBP u@RAX )~                             |                    |                  |                |                                                    |                                                                                     |
| /#/                                                             |                    |                  |                |                                                    |                                                                                     |
| /# Parse until end of parse area/                               |                    |                  |                |                                                    |                                                                                     |
| /# or until a character in range/                               |                    |                  |                |                                                    |                                                                                     |
| /# ~[low, high)~ is encountered./                               |                    |                  |                |                                                    |                                                                                     |
| /# Return parsed string as its/                                 |                    |                  |                |                                                    |                                                                                     |
| /# address and length./                                         |                    |                  |                |                                                    |                                                                                     |
|                                                                 |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} ~VARS@R9 ← 0x10000000;~                             | MOV r/m64, /imm32/ | REX.W C7 /​​0 /id/ |                | ~49 C7~ {{{modrm(C1,11,000,001)}}} /~00 00 00 10~/ | r9 = VAR                                                                            |
| {{{c( 2)}}} ~start@RBP ← [>IN];~                                | MOV r64, r/m64     | REX.W 8B /r      |                | ~49 8B~ {{{modrm(69,01,101,001)}}} {{{displ(10)}}} | rbp = [>IN]                                                                         |
| {{{c( 2)}}} /# Compile a call to ~seek~/                        |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} /# that advances ~>IN~./                            |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} ~call seek;~  /# Compiled./                         | ---                | ---              |                | {{{compile(73,s)}}}                                | Call seek  (parse until 1st instance within [cl, dl) is parsed or parse area empty) |
| {{{c( 2)}}} ~end@RAX ← [>IN];~                                  | MOV r64, r/m64     | REX.W 8B /r      |                | ~49 8B~ {{{modrm(41,01,000,001)}}} {{{displ(10)}}} | rax = [>IN]                                                                         |
| {{{c( 2)}}} /# Did ~seek()~ encounter the/                      |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} /# end of the parse area? In/                       |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} /# this case the first CMP in/                      |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} /# ~seek~ will have left the/                       |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} /# carry flag unset [cite:@intel_manual_volume_2]./ |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} ~if CF = 0:~                                        |                    |                  |                |                                                    |                                                                                     |
| {{{c( 4)}}}   ~goto _end.~                                      | JAE _rel8_         | 73 _cb_          |                | ~73~ {{{offset(04,04-00)}}}                        | +jump _end if U>=                                                                   |
| {{{c( 2)}}} /# A character in range/                            |                    |                  | {{{addr(00)}}} |                                                    |                                                                                     |
| {{{c( 2)}}} /# ~[low, high)~ was found./                        |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} ~[>IN]++;~  /# Skip it./                            | INC r/m64          | REX.W FF /0      |                | ~49 FF~ {{{modrm(41,01,000,001)}}} {{{displ(10)}}} | [>IN]++                                                                             |
| ~_end:~                                                         |                    |                  | {{{addr(04)}}} |                                                    | # _end:                                                                             |
| {{{c( 2)}}} /# Compute address and/                             |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} /# length of parsed input./                         |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} ~u@RAX ← end@RAX~                                   |                    |                  |                |                                                    |                                                                                     |
| {{{c( 8)}}}       ~- start@RBP;~                                | SUB r/m64, r64     | REX.W 29 /r      |                | ~48 29~ {{{modrm(E8,11,101,000)}}}                 | rax -= rbp                                                                          |
| {{{c( 2)}}} ~addr@RBP ← start@RBP~                              | ADD r64, r/m64     | REX.W 03 /r      |                | ~49 03~ {{{modrm(69,01,101,001)}}} {{{displ(08)}}} | rbp += [TIB]                                                                        |
| {{{c(11)}}}          ~+ [TIB];~                                 |                    |                  |                |                                                    |                                                                                     |
| {{{c( 2)}}} ~return.~                                           | RET                | C3               |                | ~C3~                                               | return                                                                              |

*** Subroutine ~pname~                                             :noexport:

#+CAPTION: Subroutine ~pname~ parses a token and returns it as a string (x86-64).
#+LABEL: tbl:forth:pname:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                        | *Instruction*  | *Opcode*   | *Machine code*                  | *Intention*            |
|-------------------------------------+----------------+------------+---------------------------------+------------------------|
| /# Define:/ _~pname~_               | ---            | ---        | {{{define(05,70 6E 61 6D 65)}}} | define pname           |
| /# In/Out:/   ~( "<SPCs>ccc<SPC>"~  |                |            |                                 |                        |
| /#/{{{io--}}} ~-​- addr@RBP u@RAX )~ |                |            |                                 |                        |
| /#/                                 |                |            |                                 |                        |
| /# Parse a token: first skip over/  |                |            |                                 |                        |
| /# non-printable characters, then/  |                |            |                                 |                        |
| /# parse the word itself./          |                |            |                                 |                        |
|                                     |                |            |                                 |                        |
| /# Skip non-printables./            |                |            |                                 |                        |
| ~low@CL ← 0x21;~   /# Char ~'!'~./  | MOV r8, /imm8/ | B0+rb /ib/ | ~B1~ /~21~/                     |                        |
| ~high@DL ← 0x7F;~  /# Char ~DEL~./  | MOV r8, /imm8/ | B0+rb /ib/ | ~B2~ /~7F~/                     | (cl, dl) = (BL+1, ...) |
| ~call seek;~  /# Compiled./         | ---            | ---        | {{{compile(73,s)}}}             | Call seek              |
| /# Parse token, stopping at first/  |                |            |                                 |                        |
| /# non-printable character./        |                |            |                                 |                        |
| ~low@CL ← 0x7F;~                    | MOV r8, /imm8/ | B0+rb /ib/ | ~B1~ /~7F~/                     |                        |
| ~high@DL ← 0x21;~                   | MOV r8, /imm8/ | B0+rb /ib/ | ~B2~ /~21~/                     | (cl, dl) = (..., BL+1) |
| ~call PARSE;~  /# Compiled./        | ---            | ---        | {{{compile(50,P)}}}             | Call PARSE             |
| ~return.~                           | RET            | C3         | ~C3~                            | return                 |


*** Subroutine ~[~                                                 :noexport:

#+CAPTION: Subroutine ~'['~ changes Forth's ~STATE~ to interpreting (x86-64).
#+LABEL: tbl:forth:lbracket:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                      | *Instruction* | *Opcode* | *Machine code*                                                                    | *Intention*          |
|-----------------------------------+---------------+----------+-----------------------------------------------------------------------------------+----------------------|
| /# Define immediate:/ _~[~_       | ---           | ---      | {{{define(81,5B)}}}                                                               | define [             |
| /# In/Out:/ ~( -​- )~              |               |          |                                                                                   |                      |
| /#/                               |               |          |                                                                                   |                      |
| /# Switch to interpreting state./ |               |          |                                                                                   |                      |
|                                   |               |          |                                                                                   |                      |
| /# Set ~STATE~ to 0./             |               |          |                                                                                   |                      |
| ~push 0;~                         | PUSH /imm8/   | 6A /ib/  | ~6A~ /~00~/                                                                       | push 0(Interpreting) |
| ~[STATE] ← pop;~                  | POP r/m64     | 8F /0    | ~8F~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,100,101)}}} {{{displ(20 00 00 10)}}} | pop [STATE]          |
| ~return.~                         | RET           | C3       | ~C3~                                                                              | return               |

*** Subroutine ~]~                                                 :noexport:

#+CAPTION: Subroutine ~']'~ changes Forth's ~STATE~ to compiling (x86-64).
#+LABEL: tbl:forth:rbracket:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                   | *Instruction* | *Opcode* | *Machine code*                                                                    | *Intention*       |
|--------------------------------+---------------+----------+-----------------------------------------------------------------------------------+-------------------|
| /# Define:/ _~]~_              | ---           | ---      | {{{define(01,5D)}}}                                                               | define ]          |
| /# In/Out:/ ~( -​- )~           |               |          |                                                                                   |                   |
| /#/                            |               |          |                                                                                   |                   |
| /# Switch to compiling state./ |               |          |                                                                                   |                   |
|                                |               |          |                                                                                   |                   |
| /# Set ~STATE~ to 1./          |               |          |                                                                                   |                   |
| ~push 1;~                      | PUSH /imm8/   | 6A /ib/  | ~6A~ /~01~/                                                                       | push 1(Compiling) |
| ~[STATE] ← pop;~               | POP r/m64     | 8F /0    | ~8F~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,100,101)}}} {{{displ(20 00 00 10)}}} | pop [STATE]       |
| ~return.~                      | RET           | C3       | ~C3~                                                                              | return            |

*** Subroutine ~\~                                                 :noexport:

#+CAPTION: Subroutine ~'\'~ implements line comments (x86-64).
#+LABEL: tbl:forth:backslash:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                    | *Instruction*  | *Opcode*    | *Machine code*                                                                       | *Intention* |
|---------------------------------+----------------+-------------+--------------------------------------------------------------------------------------+-------------|
| /# Define immediate:/ _~\~_     | ---            | ---         | {{{define(81,5C)}}}                                                                  | define \    |
| /# In/Out:/ ~( "ccc<eol>" -​- )~ |                |             |                                                                                      |             |
| /#/                             |                |             |                                                                                      |             |
| /# Consumes all characters/     |                |             |                                                                                      |             |
| /# left on the current line./   |                |             |                                                                                      |             |
|                                 |                |             |                                                                                      |             |
| ~RAX ← [#IN];~                  | MOV r64, r/m64 | REX.W 8B /r | ~48 8B~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,100,101)}}} {{{displ(00 00 00 10)}}} | rax = [#IN] |
| ~[>IN] ← RAX;~                  | MOV r/m64, r64 | REX.W 89 /r | ~48 89~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,100,101)}}} {{{displ(10 00 00 10)}}} | [>IN] = rax |
| ~return.~                       | RET            | C3          | ~C3~                                                                                 | return      |

*** Subroutine ~(~                                                 :noexport:

#+CAPTION: Subroutine ~'('~ implements inline comments, ending with a corresponding ~')'~ (x86-64).
#+LABEL: tbl:forth:lparen:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                               | *Instruction*  | *Opcode*   | *Machine code*      | *Intention*                                                                 |
|--------------------------------------------+----------------+------------+---------------------+-----------------------------------------------------------------------------|
| /# Define immediate:/ _~(~_                | ---            | ---        | {{{define(81,28)}}} | define (                                                                    |
| /# In/Out:/ ~( "ccc<rparen>" -​- )~         |                |            |                     |                                                                             |
| /#/                                        |                |            |                     |                                                                             |
| /# Consume characters until a ')' occurs./ |                |            |                     |                                                                             |
|                                            |                |            |                     |                                                                             |
| ~low@CL ← ')';~                            | MOV r8, /imm8/ | B0+rb /ib/ | ~B1~ /~29~/         |                                                                             |
| ~high@DL ← ')' + 1;~                       | MOV r8, /imm8/ | B0+rb /ib/ | ~B2~ /~2A~/         | (cl, dl) = (RP, RP+1)                                                       |
| ~call PARSE;~  /# Compiled./               | ---            | ---        | {{{compile(50,P)}}} | Call PARSE            Forth 2012 implies comment ends at rparen or newline. |
| ~return.~                                  | RET            | C3         | ~C3~                | return                                                                      |


*** Subroutine ~:~                                                 :noexport:

#+CAPTION: Subroutine ~':'~ (colon) begins compiling a word after setting up its dictionary entry (x86-64).
#+LABEL: tbl:forth:colon:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                          | *Instruction*     | *Opcode*          | *Machine code*                            | *Intention*                            |
|---------------------------------------+-------------------+-------------------+-------------------------------------------+----------------------------------------|
| /# Define:/ _~':'~_                   | ---               | ---               | {{{define(01,3A)}}}                       | define :                               |
| /# In/Out:/ ~( "<SPCs>ccc<SPC>" -​- )~ |                   |                   |                                           |                                        |
| /#/                                   |                   |                   |                                           |                                        |
| /# Start a word definition and enter/ |                   |                   |                                           |                                        |
| /# compiling mode. Temporarily hide/  |                   |                   |                                           |                                        |
| /# the word being defined until its/  |                   |                   |                                           |                                        |
| /# definition is completed by ~';'~./ |                   |                   |                                           |                                        |
|                                       |                   |                   |                                           |                                        |
| /# Parse word name and create/        |                   |                   |                                           |                                        |
| /# its dictionary entry./             |                   |                   |                                           |                                        |
| ~call pname;~  /# Compiled./          | ---               | ---               | {{{compile(70,p)}}}                       | Call pname  (See Forth 2012 Table 2.1) |
| ~INPUT@RSI ← addr@RBP;~               | MOV r/m64, r64    | REX.W 89 /r       | ~48 89~ {{{modrm(EE,11,101,110)}}}        | rsi = rbp                              |
| ~latest@RDX ← LATEST;~                | MOV r32, /imm32/  | B8+rd /id/        | ~BA~ /~28 00 00 10~/                      | rdx = Latest                           |
| /# Word length ~u@RAX~ is forwarded/  |                   |                   |                                           |                                        |
| /# as ~flag@AL~ to ~Head~./           |                   |                   |                                           |                                        |
| ~call Head;~  /# Compiled./           | ---               | ---               | {{{compile(48,H)}}}                       | Call Head                              |
|                                       |                   |                   |                                           |                                        |
| /# Set the ~HIDDEN~ bit (~0x40~) on/  |                   |                   |                                           |                                        |
| /# the dictionary entry's flag./      |                   |                   |                                           |                                        |
| ~xt@RCX ← [latest@RDX];~              | MOV r64, r/m64    | REX.W 8B /r       | ~48 8B~ {{{modrm(0A,00,001,010)}}}        | rcx = [rdx]                            |
| ~flag@RCX ← xt@RCX + 16;~             | ADD r/m64, /imm8/ | 9REX.W 83 /​0 /ib/ | ~48 83~ {{{modrm(C1,11,000,001)}}} /~10~/ | rcx += 10                              |
| ~[flag@RCX]~ \vert{}​~=~ ~0x40;~             | OR r/m8, /imm8/   | 80 /​1 /ib/        | ~80~ {{{modrm(09,00,001,001)}}} /~40~/    | [rcx] ¦= 40 HIDDEN                     |
|                                       |                   |                   |                                           |                                        |
| /# Switch to compiling state./        |                   |                   |                                           |                                        |
| ~call ];~  /# Compiled./              | ---               | ---               | {{{compile(5D,])}}}                       | Call ]                                 |
| ~return.~                             | RET               | C3                | ~C3~                                      | return                                 |

*** Subroutine ~;~                                                 :noexport:

#+CAPTION: Subroutine ~';'~ (semicolon) wraps up a colon definition and goes back to interpreting (x86-64).
#+LABEL: tbl:forth:semicolon:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                           | *Instruction*     | *Opcode*         | *Machine code*                                              | *Intention*          |
|----------------------------------------+-------------------+------------------+-------------------------------------------------------------+----------------------|
| /# Define immediate:/ _~;~_            | ---               | ---              | {{{define(81,3B)}}}                                         | define ;             |
| /# In/Out:/ ~( C: -​- )~                |                   |                  |                                                             |                      |
| /#/                                    |                   |                  |                                                             |                      |
| /# Finalize a colon definition and/    |                   |                  |                                                             |                      |
| /# switch back to interpreting state./ |                   |                  |                                                             |                      |
|                                        |                   |                  |                                                             |                      |
| /# Write a RET instr. to ~OUTPUT~./    |                   |                  |                                                             |                      |
| ~op@AL ← 0xC3;~  /# RET opcode./       | MOV r8, /imm8/    | B0+rb /ib/       | ~B0~ /~C3~/                                                 | al = opcode ret      |
| ~[OUTPUT@RDI++] ← op@AL;~              | STOS m8           | AA               | ~AA~                                                        | [rdi++] = al         |
|                                        |                   |                  |                                                             |                      |
| /# Clear the ~HIDDEN~ bit (~0x40~) on/ |                   |                  |                                                             |                      |
| /# the dictionary entry's flag./       |                   |                  |                                                             |                      |
| ~xt@RCX ← [LATEST];~                   | MOV r64, r/m64    | REX.W 8B /r      | ~48 8B~ {{{modrm(0C,00,001,100)}}} {{{sib(25,00,100,101)}}} | rcx = [Latest]       |
|                                        |                   |                  | \hookrightarrow {{{c(2)}}} {{{displ(28 00 00 10)}}}         |                      |
| ~flag@RCX ← xt@RCX + 0x10;~            | ADD r/m64, /imm8/ | REX.W 83 /​0 /ib/ | ~48 83~ {{{modrm(C1,11,000,001)}}} /10/                     | rcx += 10            |
| ~[flag@RCX] &= 0b10111111;~            | AND r/m8, /imm8/  | 80 /4 /ib/       | ~80~ {{{modrm(21,00,100,001)}}} /BF/                        | [rcx] &= BF(~HIDDEN) |
|                                        |                   |                  |                                                             |                      |
| /# Switch to interpreting state./      |                   |                  |                                                             |                      |
| ~call lbracket;~  /# Compiled./        |                   |                  | {{{compile(5B,[)}}}                                         | Call [               |
| ~return.~                              | RET               | C3               | ~C3~                                                        | return               |

*** Subroutine ~.~                                                 :noexport:

#+CAPTION: Subroutine ~'.'~ compiles a byte from the stack to ~OUTPUT~ (x86-64).
#+LABEL: tbl:forth:.:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                     | *Instruction*     | *Opcode*         | *Machine code*                          | *Intention*  |
|----------------------------------+-------------------+------------------+-----------------------------------------+--------------|
| /# Define:/ _~.~_                | ---               | ---              | {{{define(01,2E)}}}                     | define .     |
| /# In/Out:/ ~( u -​- )~           |                   |                  |                                         |              |
| /#/                              |                   |                  |                                         |              |
| /# Non-standard name for ~C,~./  |                   |                  |                                         |              |
| /#/                              |                   |                  |                                         |              |
| /# Pop a byte off the stack and/ |                   |                  |                                         |              |
| /# write it to ~OUTPUT~./        |                   |                  |                                         |              |
|                                  |                   |                  |                                         |              |
| ~byte@AL ← [STACK@R15]~          | MOV r8, r/m8      | REX 8A /r        | ~41 8A~ {{{modrm(07,00,000,111)}}}      | al = [r15]   |
| ~STACK@R15 += 8;~                | ADD r/m64, /imm8/ | REX.W 83 /​0 /ib/ | ~49 83~ {{{modrm(C7,11,000,111)}}} /08/ | r15 += 8     |
| ~[OUTPUT@RDI++] ← byte@AL;~      | STOS m8           | AA               | ~AA~                                    | [rdi++] = al |
| ~return.~                        | RET               | C3               | ~C3~                                    | return       |

*** Subroutine ~LIT~                                               :noexport:

#+CAPTION: Subroutine ~LIT~ compiles a literal byte into a word definition (x86-64).
#+LABEL: tbl:forth:lit:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                                                | *Instruction*     | *Opcode*         | *Machine code*                          | *Intention*             |
|-------------------------------------------------------------+-------------------+------------------+-----------------------------------------+-------------------------|
| /# Define immediate:/ _~LIT~_                               | ---               | ---              | {{{define(83,4C 49 54)}}}               | define LIT              |
| /# In/Out:/ ~( C: x -​- ) ( -- x )~                          |                   |                  |                                         |                         |
| /#/                                                         |                   |                  |                                         |                         |
| /# Pop a byte off the data stack at compile time./          |                   |                  |                                         |                         |
| /# Compile it as the immediate byte of a PUSH/              |                   |                  |                                         |                         |
| /# instruction that inserts it on the data stack/           |                   |                  |                                         |                         |
| /# when the word being defined is executed./                |                   |                  |                                         |                         |
|                                                             |                   |                  |                                         |                         |
| /# Let ~lit~ be the top byte on the data stack./            |                   |                  |                                         |                         |
| /# We will generate three instructions that will/           |                   |                  |                                         |                         |
| /# effectively push ~lit~ on the data stack at/             |                   |                  |                                         |                         |
| /# execution time:/                                         |                   |                  |                                         |                         |
| /# – a SUB instruction that allocates a slot on/            |                   |                  |                                         |                         |
| /# the data stack;/                                         |                   |                  |                                         |                         |
| /# – a pair of PUSH & POP instructions that/                |                   |                  |                                         |                         |
| /# copy ~lit~ to the newly allocated slot./                 |                   |                  |                                         |                         |
|                                                             |                   |                  |                                         |                         |
| /# 1. SUB instruction:/                                     |                   |                  |                                         |                         |
| /# – effect: ~R15 -= 8;~/                                   |                   |                  |                                         |                         |
| /# – instruction: SUB r/m64, imm8/                          |                   |                  |                                         |                         |
| /# – opcode: REX.W 83 /5 ib/                                |                   |                  |                                         |                         |
| /# – machine code: ~49 83~ {{{modrm(EF,11,101,111)}}} ~08~/ |                   |                  |                                         |                         |
| ~EAX ← 0x08EF8349;~                                         | MOV r32, /imm32/  | B8+rd /id/       | ~B8~ /49 83 EF 08/                      | eax = "r15 -= 8"        |
| ~[OUTPUT@RDI++4] ← EAX;~                                    | STOS m32          | AB               | ~AB~                                    | [rdi(++4)] = eax        |
|                                                             |                   |                  |                                         |                         |
| /# 2. PUSH instruction:/                                    |                   |                  |                                         |                         |
| /# – effect: ~push lit;~/                                   |                   |                  |                                         |                         |
| /# – instruction: PUSH imm8/                                |                   |                  |                                         |                         |
| /# – opcode: 6A ib/                                         |                   |                  |                                         |                         |
| /# – machine code: ~6A ??~ (imm. ignored for now)/          |                   |                  |                                         |                         |
| /# Here we only write 0x6A to ~OUTPUT~. Note that/          |                   |                  |                                         |                         |
| /# the three bytes of the next instruction are also/        |                   |                  |                                         |                         |
| /# loaded in EAX at this step, but not yet written./        |                   |                  |                                         |                         |
| ~EAX ← 0x078F416A;~                                         | MOV r32, /imm32/  | B8+rd /id/       | ~B8~ /6A 41 8F 07/                      | eax = push x; pop [r15] |
| ~[OUTPUT@RDI++] ← AL;~  /# Writes only ~0x6A~./             | STOS m8           | AA               | ~AA~                                    | [rdi++] = al            |
|                                                             |                   |                  |                                         |                         |
| /# 3. POP instruction:/                                     |                   |                  |                                         |                         |
| /# – effect: ~[R15] ← pop;~/                                |                   |                  |                                         |                         |
| /# – instruction: POP r/m64/                                |                   |                  |                                         |                         |
| /# – opcode: REX 8F /0/                                     |                   |                  |                                         |                         |
| /# – machine code: ~41 8F~ {{{modrm(07,00,000,111)}}}/      |                   |                  |                                         |                         |
| /# Here we write the immediate byte of the PUSH/            |                   |                  |                                         |                         |
| /# instruction (in AL) and the POP instruction/             |                   |                  |                                         |                         |
| /# (in the rest of EAX)./                                   |                   |                  |                                         |                         |
| ~AL ← [STACK@R15];~                                         | MOV r8, r/m8      | REX 8A /r        | ~41 8A~ {{{modrm(07,00,000,111)}}}      | al = [r15]              |
| ~[OUTPUT@RDI++4] ← EAX;~                                    |                   |                  | ~AB~                                    | [rdi(++4)] = eax        |
|                                                             |                   |                  |                                         |                         |
| /# Pop ~lit~ off the data stack./                           |                   |                  |                                         |                         |
| ~STACK@R15 += 8;~                                           | ADD r/m64, /imm8/ | REX.W 83 /​0 /ib/ | ~49 83~ {{{modrm(C7,11,000,111)}}} /08/ | r15 += 8                |
| ~return.~                                                   | RET               | C3               | ~C3~                                    | return                  |


*** Subroutine ~xt=~                                               :noexport:

#+CAPTION: Subroutine ~xt=~ compares an execution token's name with a given string (x86-64).
#+LABEL: tbl:forth:xt=:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                           | *Instruction*     | *Opcode*         | *&*            | *Machine code*                                     | *Intention*             |
|--------------------------------------------------------+-------------------+------------------+----------------+----------------------------------------------------+-------------------------|
| /# Define:/ _~xt=~_                                    | ---               | ---              |                | {{{define(03,78 74 3D)}}}                          | define xt=              |
| /# In/Out:/    ~( addr@RBP u@RAX xt@RBX~               |                   |                  |                |                                                    |                         |
| /#/{{{io--}}} ~-​- xt@RBX FLAGS~                        |                   |                  |                |                                                    |                         |
| /#/{{{io}}}      ~?@RAX ?@RDI )~                       |                   |                  |                |                                                    |                         |
| /#/                                                    |                   |                  |                |                                                    |                         |
| /# Return with ~ZF~ set if execution token/            |                   |                  |                |                                                    |                         |
| /# ~xt~ is either zero or is not hidden and/           |                   |                  |                |                                                    |                         |
| /# its name matches the string given by/               |                   |                  |                |                                                    |                         |
| /# address ~addr~ and length ~u~./                     |                   |                  |                |                                                    |                         |
|                                                        |                   |                  |                |                                                    |                         |
| {{{c(2)}}} /# Return (with ~ZF~ set) if ~xt~ is zero./ |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~if xt@RBX & xt@RBX != 0:~                  | TEST r/m64, r64   | REX.W 85 /r      |                | ~48 85~ {{{modrm(DB,11,011,011)}}}                 | rbx(xt) ?               |
| {{{c(4)}}}   ~goto _nonzero.~                          | JNZ _rel8_        | 75 _cb_          |                | ~75~ {{{offset(01,01-00)}}}                        | +jump _nonzero if != 0  |
| {{{c(2)}}} ~return.~                                   | RET               | C3               | {{{addr(00)}}} | ~C3~                                               | return                  |
| ~_nonzero:~                                            |                   |                  | {{{addr(01)}}} |                                                    | _nonzero:               |
| {{{c(2)}}} /# Save ~u~ in RCX; to be used later./      |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~u@RCX ← u@RAX;~                            | MOV r64, r/m64    | REX.W 8B /r      |                | ~48 8B~ {{{modrm(C8,11,001,000)}}}                 | rcx = rax(u)            |
| {{{c(2)}}} /# Point RSI to the flag field./            |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~RSI ← xt@RBX + 0x10;~                      | LEA r64,m         | REX.W 8D /r      |                | ~48 8D~ {{{modrm(73,01,110,011)}}} {{{displ(10)}}} | rsi = rbx(xt) + 10      |
| {{{c(2)}}} /# Extract flag and advance RSI/            |                   |                  |                |                                                    |                         |
| {{{c(2)}}} /# to the name field (used later)./         |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~flag@AL ← [RSI++];~                        | LODS m8           | AC               |                | ~AC~                                               | al = [rsi++]            |
| {{{c(2)}}} /# Return (~ZF~ unset) if hidden word./     |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~if flag@AL & 0x40 = 0:~                    | TEST AL, /imm8/   | A8 /ib/          |                | ~A8~ /~40~/                                        | al & 40(HIDDEN) ?       |
| {{{c(4)}}}   ~goto _unhidden.~                         | JZ _rel8_         | 74 _cb_          |                | ~74~ {{{offset(01,01-00)}}}                        | +jump _unhidden if == 0 |
| {{{c(2)}}} ~return.~                                   | RET               | C3               | {{{addr(00)}}} | ~C3~                                               | return                  |
| ~_unhidden:~                                           |                   |                  | {{{addr(01)}}} |                                                    | _unhidden:              |
| {{{c(2)}}} /# Keep only name length in RAX./           |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~length@RAX ← flag@RAX & 0x1F;~             | AND r/m64, /imm8/ | REX.W 83 /​4 /ib/ |                | ~48 83~ {{{modrm(E0,11,100,000)}}} /~1F~/          | rax &= 1F(Length)       |
| {{{c(2)}}} /# Return (~ZF~ unset) if wrong length./    |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~if length@RAX = u@RCX:~                    | CMP r/m64, r64    | REX.W 39 /r      |                | ~48 39~ {{{modrm(C8,11,001,000)}}}                 | cmp rax, rcx            |
| {{{c(4)}}}   ~goto _length_equal.~                     | JE _rel8_         | 74 _cb_          |                | ~74~ {{{offset(01,01-00)}}}                        | +jump _lengthEq if ==   |
| {{{c(2)}}} ~return.~                                   | RET               | C3               | {{{addr(00)}}} | ~C3~                                               | return                  |
| ~_length_equal:~                                       |                   |                  | {{{addr(01)}}} |                                                    | _lengthEq:              |
| {{{c(2)}}} /# Compare ~addr@RBP~ and ~name@RSI~/       |                   |                  |                |                                                    |                         |
| {{{c(2)}}} /# upto length ~u@RCX~./                    |                   |                  |                |                                                    |                         |
| {{{c(2)}}} ~addr@RDI ← addr@RBP;~                      | MOV r64, r/m64    | REX.W 8B /r      |                | ~48 8B~ {{{modrm(FD,11,111,101)}}}                 | rdi = rbp               |
| {{{c(2)}}} ~strncmp(name@RSI,~                         |                   |                  |                |                                                    |                         |
| {{{c(10)}}}        ~addr@RDI,~                         |                   |                  |                |                                                    |                         |
| {{{c(10)}}}        ~u@RCX);~  /# (Un)sets ~ZF~./       | REPE CMPS m8, m8  | F3 A6            |                | ~F3 A6~                                            | strings equal ?         |
| {{{c(2)}}} ~return.~                                   | RET               | C3               |                | ~C3~                                               | return                  |

*** Subroutine ~FIND~                                              :noexport:

#+CAPTION: Subroutine ~FIND~ searches the dictionary for a word matching a given name (x86-64).
#+LABEL: tbl:forth:find:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                               | *Instruction*  | *Opcode*    | *&*            | *Machine code*                                              | *Intention*      |
|--------------------------------------------+----------------+-------------+----------------+-------------------------------------------------------------+------------------|
| /# Define:/ _~FIND~_                       | ---            | ---         |                | {{{define(04,46 49 4E 44)}}}                                | define FIND      |
| /# In/Out:/    ~( addr@RBP u@RAX~          |                |             |                |                                                             |                  |
| /#/{{{io--}}} ~-- addr@RBP u@RAX~          |                |             |                |                                                             |                  |
| /#/{{{io}}}      ~xt@RBX )~                |                |             |                |                                                             |                  |
| /#/                                        |                |             |                |                                                             |                  |
| /# Search the dictionary for a/            |                |             |                |                                                             |                  |
| /# word with name matching/                |                |             |                |                                                             |                  |
| /# ~addr~​/​~u~. Return ~xt = 0~ if/         |                |             |                |                                                             |                  |
| /# no matching word is found./             |                |             |                |                                                             |                  |
|                                            |                |             |                |                                                             |                  |
| {{{c(2)}}} /# Begin search at ~LATEST~./   |                |             |                |                                                             |                  |
| {{{c(2)}}} ~xt@RBX ← [LATEST];~            | MOV r64, r/m64 | REX.W 8B /r |                | ~48 8B~ {{{modrm(1C,00,011,100)}}} {{{sib(25,00,100,101)}}} | rbx = [Latest]   |
|                                            |                |             |                | \hookrightarrow {{{c(2)}}} {{{displ(28 00 00 10)}}}         |                  |
| ~_begin:~                                  |                |             | {{{addr(00)}}} |                                                             | # _beg:          |
| {{{c(2)}}} ~call FIND();~                  | CALL _rel32_   | E8 _cd_     |                | ~E8~ {{{offset(03 00 00 00,05-02)}}}                        | +call (FIND)     |
| {{{c(2)}}} ~if !ZF:~                       |                |             | {{{addr(05)}}} |                                                             |                  |
| {{{c(4)}}}   ~goto _begin.~                | JNE _rel8_     | 75 _cb_     |                | ~75~ {{{offset(F9,00-07)}}}                                 | -jump _beg if != |
| {{{c(2)}}} ~return.~                       | RET            | C3          | {{{addr(07)}}} | ~C3~                                                        | return           |
| ~FIND():~                                  |                |             | {{{addr(08)}}} |                                                             | (FIND):          |
| {{{c(2)}}} /# Save registers./             |                |             |                |                                                             |                  |
| {{{c(2)}}} ~push RAX;~                     | PUSH r64       | 50+rd       |                | ~50~                                                        | push rax         |
| {{{c(2)}}} ~push RDI;~                     | PUSH r64       | 50+rd       |                | ~57~                                                        | push rdi         |
| {{{c(2)}}} /# Does ~xt~ match ~addr~​/​~u~?/ |                |             |                |                                                             |                  |
| {{{c(2)}}} ~call xt=;~  /# Compiled./      | ---            | ---         |                | {{{compile(78,x)}}}                                         | Call xt=         |
| {{{c(2)}}} ~pop RDI;~                      | POP r64        | 58+rd       |                | ~5F~                                                        | pop rdi          |
| {{{c(2)}}} ~pop RAX;~                      | POP r64        | 58+rd       |                | ~58~                                                        | pop rax          |
| {{{c(2)}}} /# If matched, we're done!/     |                |             |                |                                                             |                  |
| {{{c(2)}}} /# Otherwise, follow ~xt~'s/    |                |             |                |                                                             |                  |
| {{{c(2)}}} /# link pointer./               |                |             |                |                                                             |                  |
| {{{c(2)}}} ~if ZF:~  /# Set by ~xt=()~./   |                |             |                |                                                             | +jump _end if == |
| {{{c(4)}}}   ~goto _end.~                  | JE _rel8_      | 74 _cb_     |                | ~74~ {{{offset(04,04-00)}}}                                 |                  |
| {{{c(2)}}} ~xt@RBX ← [xt@RBX + 8];~        | MOV r64, r/m64 | REX.W 8B /r | {{{addr(00)}}} | ~48 8B~ {{{modrm(5B,01,011,011)}}} {{{displ(08)}}}          | rbx = [rbx+8]    |
| ~_end:~                                    |                |             | {{{addr(04)}}} |                                                             | # _end:          |
| {{{c(2)}}} ~return.~                       | RET            | C3          |                | ~C3~                                                        | return           |


*** Subroutine ~Num~                                               :noexport:

#+CAPTION: Subroutine ~Num~ parses a character string as a number and pushes it on the stack (x86-64).
#+LABEL: tbl:forth:num:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                             | *Instruction*     | *Opcode*         | *&*            | *Machine code*                            | *Intention*        |
|------------------------------------------+-------------------+------------------+----------------+-------------------------------------------+--------------------|
| /# Define:/ _~Num~_                      | ---               | ---              |                | {{{define(03,4E 75 6D)}}}                 | define Num         |
| /# In/Out:/    ~( addr@RBP u@RAX~        |                   |                  |                |                                           |                    |
| /#/{{{io--}}} ~-​- n )~                   |                   |                  |                |                                           |                    |
| /#/                                      |                   |                  |                |                                           |                    |
| /# Parse string given by ~addr~​/​~u~/     |                   |                  |                |                                           |                    |
| /# as a number and push it on/           |                   |                  |                |                                           |                    |
| /# the data stack./                      |                   |                  |                |                                           |                    |
|                                          |                   |                  |                |                                           |                    |
| {{{c(2)}}} /# Allocate stack space for/  |                   |                  |                |                                           |                    |
| {{{c(2)}}} /# the parsed number./        |                   |                  |                |                                           |                    |
| {{{c(2)}}} ~STACK@R15 -= 8;~             | SUB r/m64, /imm8/ | REX.W 83 /​5 /ib/ |                | ~49 83~ {{{modrm(EF,11,101,111)}}} /~08~/ | r15 -= 8           |
| {{{c(2)}}} ~[STACK@R15] ← 0;~            | AND r/m64, /imm8/ | REX.W 83 /​4 /ib/ |                | ~49 83~ {{{modrm(27,00,100,111)}}} /~00~/ | [r15] = 0          |
| {{{c(2)}}} ~u@RCX ← u@RAX;~              | MOV r/m64, r64    | REX.W 89 /r      |                | ~48 89~ {{{modrm(C1,11,000,001)}}}        | rcx = rax          |
| {{{c(2)}}} ~addr@RSI ← addr@RBP;~        | MOV r64, r/m64    | REX.W 8B /r      |                | ~48 8B~ {{{modrm(F5,11,110,101)}}}        | rsi = rbp          |
| ~_begin:~                                |                   |                  | {{{addr(00)}}} |                                           | # _beg:            |
| {{{c(2)}}} /# Parse one character./      |                   |                  |                |                                           |                    |
| {{{c(2)}}} ~call Num();~                 | CALL _rel32_      | E8 _cd_          |                | ~E8~ {{{offset(03 00 00 00,08-05)}}}      | +call (Num)        |
| {{{c(2)}}} /# Repeat while there are/    |                   |                  |                |                                           |                    |
| {{{c(2)}}} /# unparsed characters left./ |                   |                  |                |                                           |                    |
| {{{c(2)}}} ~if --u@RCX != 0:~            |                   |                  | {{{addr(05)}}} |                                           |                    |
| {{{c(4)}}}   ~goto _begin.~              | LOOP _rel8_       | E2 _cb_          |                | ~E2~ {{{offset(F9,00-07)}}}               | -jump beg if --rcx |
| {{{c(2)}}} ~return.~                     | RET               | C3               | {{{addr(07)}}} | ~C3~                                      | return             |
| ~Num():~                                 |                   |                  | {{{addr(08)}}} |                                           | (Num)              |
| {{{c(2)}}} ~chr@AL ← [addr@RSI++];~      | LODS m8           | AC               |                | ~AC~                                      | al = [rsi++]       |
| {{{c(2)}}} /# Is it a ~[0-9]~ digit?/    |                   |                  |                |                                           |                    |
| {{{c(2)}}} ~if chr@AL < 'A':~            | CMP AL, /imm8/    | 3C /ib/          |                | ~3C~ /~41~/                               | cmp al, 'A'        |
| {{{c(4)}}}   ~goto _digit.~              | JL _rel8_         | 7C _cb_          |                | ~7C~ {{{offset(02,02-00)}}}               | +jump _digit if <  |
| {{{c(2)}}} /# It's an ~[A-F]~ digit./    |                   |                  | {{{addr(00)}}} |                                           | # _letter:         |
| {{{c(2)}}} ~chr@AL -= 7;~                | SUB AL, /imm8/    | 2C /ib/          |                | ~2C~ /~07~/                               | al -= 7            |
| ~_digit:~                                |                   |                  | {{{addr(02)}}} |                                           | # _digit:          |
| {{{c(2)}}} ~digit@AL = chr@AL - '0';~    | SUB AL, /imm8/    | 2C /ib/          |                | ~2C~ /~30~/                               | al -= 30           |
| {{{c(2)}}} /# Multiply by base and add/  |                   |                  |                |                                           |                    |
| {{{c(2)}}} /# the new digit./            |                   |                  |                |                                           |                    |
| {{{c(2)}}} ~[STACK@R15] <<= 4~;          | SAL r/m64, /imm8/ | REX.W C1 /​4 /ib/ |                | ~49 C1~ {{{modrm(27,00,100,111)}}} /~04~/ | [r15] <<= 4        |
| {{{c(2)}}} ~[STACK@R15]~ \vert​~= digit@RAX;~ | OR r/m64, r64     | REX.W 09 /r      |                | ~49 09~ {{{modrm(07,00,000,111)}}}        | [r15] \vert= rax       |
| {{{c(2)}}} ~return.~                     | RET               | C3               |                | ~C3~                                      | return             |

*** Subroutine ~miss~                                              :noexport:

#+CAPTION: Subroutine ~miss~ attempts parsing a word as a number, optionally compiling it as a literal (x86-64).
#+LABEL: tbl:forth:miss:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                           | *Instruction*     | *Opcode*    | *&*            | *Machine code*                                           | *Intention*           |
|----------------------------------------+-------------------+-------------+----------------+----------------------------------------------------------+-----------------------|
| /# Define:/ _~miss~_                   | ---               | ---         |                | {{{define(04,6D 69 73 73)}}}                             | define miss           |
| /# In/Out:/     ~( addr@RBP u@RAX~     |                   |             |                |                                                          |                       |
| /#/{{{io}}}       ~xt@RXB~             |                   |             |                |                                                          |                       |
| /#/{{{io--}}} ~-​- [num] xt@RXB )~      |                   |             |                |                                                          |                       |
| /#/                                    |                   |             |                |                                                          |                       |
| /# If ~xt~ is zero, try parsing/       |                   |             |                |                                                          |                       |
| /# the string given by ~addr~​/​~u~/     |                   |             |                |                                                          |                       |
| /# as a number. If successful/         |                   |             |                |                                                          |                       |
| /# and if we're in compiling/          |                   |             |                |                                                          |                       |
| /# state, compile the number/          |                   |             |                |                                                          |                       |
| /# as a literal./                      |                   |             |                |                                                          |                       |
|                                        |                   |             |                |                                                          |                       |
| {{{c(2)}}} ~if xt@RBX = 0:~            | TEST r/m64, r64   | REX.W 85 /r |                | ~48 85~ {{{modrm(DB,11,011,011)}}}                       | rbx(xt) ?             |
| {{{c(4)}}}   ~goto miss().~            | JZ _rel8_         | 74 _cb_     |                | ~74~ {{{offset(01,01-00)}}}                              | +jump (miss) if == 0  |
| {{{c(2)}}} ~return.~                   | RET               | C3          | {{{addr(00)}}} | ~C3~                                                     | return                |
| ~miss():~                              |                   |             | {{{addr(01)}}} |                                                          | (miss)                |
| {{{c(2)}}} /# We shouldn't call ~Num~/ |                   |             |                |                                                          |                       |
| {{{c(2)}}} /# with an empty string./   |                   |             |                |                                                          |                       |
| {{{c(2)}}} ~if u@RAX != 0:~            | TEST r/m64, r64   | REX.W 85 /r |                | ~48 85~ {{{modrm(C0,11,000,000)}}}                       | rax(u) ?              |
| {{{c(4)}}}   ~goto _nonempty.~         | JNE _rel8_        | 75 _cb_     |                | ~75~ {{{offset(01,01-00)}}}                              | +jump _nonempty if != |
| {{{c(2)}}} ~return.~                   | RET               | C3          | {{{addr(00)}}} | ~C3~                                                     | return                |
| ~_nonempty:~                           |                   |             | {{{addr(01)}}} |                                                          | # _nonempty:          |
| {{{c(2)}}} ~call Num;~  /# Compiled./  | ---               | ---         |                | {{{compile(4E,N)}}}                                      | Call Num              |
| {{{c(2)}}} /# Are we compiling?/       |                   |             |                |                                                          |                       |
| {{{c(2)}}} ~if [STATE] & 1 != 0:~      | TEST r/m8, /imm8/ | F6 /​0 /ib/  |                | ~F6~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,000,100)}}} | [STATE] ?             |
| {{{c(4)}}}   /# Compile top of stack/  |                   |             |                | \hookrightarrow {{{displ(20 00 00 10)}}} /~01~/          |                       |
| {{{c(4)}}}   /# number as literal./    |                   |             |                |                                                          |                       |
| {{{c(4)}}}   ~goto _lit.~              | JNZ _rel8_        | 75 _cb_     |                | ~75~ {{{offset(01,01-00)}}}                              | +jump _lit if != 0    |
| {{{c(2)}}} ~return.~                   | RET               | C3          | {{{addr(00)}}} | ~C3~                                                     | return                |
| ~_lit:~                                |                   |             | {{{addr(01)}}} |                                                          | # _lit:               |
| {{{c(2)}}} ~call LIT;~  /# Compiled./  | ---               | ---         |                | {{{compile(4C,L)}}}                                      | Call LIT              |
| {{{c(2)}}} ~return.~                   | RET               | C3          |                | ~C3~                                                     | return                |


*** Subroutine ~EXEC~                                              :noexport:

#+CAPTION: Subroutine ~EXEC~ executes a Forth word (x86-64).
#+LABEL: tbl:forth:EXEC:x
#+ATTR_LATEX: :align l|ll|lH
| *Pseudocode*                       | *Instruction*    | *Opcode*   | *Machine code*                  | *Intention*  |
|------------------------------------+------------------+------------+---------------------------------+--------------|
| /# Define:/ _~EXEC~_               | ---              | ---        | {{{define(04,45 58 45 43)}}}    | define EXEC  |
| /# In/Out:/ ~( xt@RBX -- )~        |                  |            |                                 |              |
| /#/                                |                  |            |                                 |              |
| /# Execute word given by ~xt~./    |                  |            |                                 |              |
|                                    |                  |            |                                 |              |
| /# Pick an address in a galaxy/    |                  |            |                                 |              |
| /# far away.../                    |                  |            |                                 |              |
| ~RCX ← 0x7FFFFFF8~                 | MOV r32, /imm32/ | B8+rd /id/ | ~B9~ /~F8 FF FF 7F~/            | rcx = _      |
| /# Temporarily set ~OUTPUT~ to/    |                  |            |                                 |              |
| /# this address, first saving it./ |                  |            |                                 |              |
| ~push OUTPUT@RDI;~                 | PUSH r64         | 50+rd      | ~57~                            | push rdi     |
| ~OUTPUT@RDI ← RCX;~                | MOV r/m32, r32   | 89 /r      | ~89~ {{{modrm(CF,11,001,111)}}} | rdi = rcx    |
|                                    |                  |            |                                 |              |
| /# Compile a call to ~xt~'s code./ |                  |            |                                 |              |
| ~call COMPL;~  /# Compiled./       | ---              | ---        | {{{compile(43,C)}}}             | Call COMPL   |
| /# Compile a RET instruction./     |                  |            |                                 |              |
| ~op@AL ← 0xC3;~                    | MOV r8, /imm8/   | B0+rb /ib/ | ~B0~ /~C3~/                     | al = C3      |
| ~[OUTPUT@RDI++] ← op@AL;~          | STOS m8          | AA         | ~AA~                            | [rdi++] = al |
|                                    |                  |            |                                 |              |
| /# Restore ~OUTPUT~ and transfer/  |                  |            |                                 |              |
| /# control to the newly created/   |                  |            |                                 |              |
| /# instruction sequence./          |                  |            |                                 |              |
| ~pop OUTPUT@RDI;~                  | POP r64          | 58+rd      | ~5F~                            | pop rdi      |
| ~call [RCX];~                      | CALL r/m64       | FF /2      | ~FF~ {{{modrm(D1,11,010,001)}}} | call rcx     |
| ~return.~                          | RET              | C3         | ~C3~                            | return       |

*** Subroutine ~exec~                                              :noexport:

#+CAPTION: Subroutine ~exec~ executes a word if it's immediate or if  (x86-64).
#+LABEL: tbl:forth:exec:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                              | *Instruction*  | *Opcode* | *&*            | *Machine code*               | *Intention*        |
|-------------------------------------------+----------------+----------+----------------+------------------------------+--------------------|
| /# Define:/ _~exec~_                      | ---            | ---      |                | {{{define(04,65 78 65 63)}}} | define exec        |
| /# In/Out:/ ~( xt@RBX~                    |                |          |                |                              |                    |
| /#/{{{io}}}   ~imm+state@AL -- )~         |                |          |                |                              |                    |
| /#/                                       |                |          |                |                              |                    |
| /# Execute ~xt~ if we're in interpreting/ |                |          |                |                              |                    |
| /# mode or if it's an immediate word./    |                |          |                |                              |                    |
| /# In other words, don't execute if we/   |                |          |                |                              |                    |
| /# are compiling and the word is not/     |                |          |                |                              |                    |
| /# immediate (if ~imm+state~ is ~1~)./    |                |          |                |                              |                    |
|                                           |                |          |                |                              |                    |
| {{{c(2)}}} ~if imm+state@AL != 1:~        | CMP AL, /imm8/ | 3C /ib/  |                | ~3C~ /~01~/                  | cmp al, 1          |
| {{{c(4)}}}   ~goto exec().~               | JNE _rel8_     | 75 _cb_  |                | ~75~ {{{offset(01,01-00)}}}  | +jump (exec) if != |
| {{{c(2)}}} ~return.~                      | RET            | C3       | {{{addr(00)}}} | ~C3~                         | return             |
| ~exec():~                                 |                |          | {{{addr(01)}}} |                              | (exec)             |
| {{{c(2)}}} ~call EXEC;~  /# Compiled./    | ---            | ---      |                | {{{compile(45,E)}}}          | Call EXEC          |
| {{{c(2)}}} ~return.~                      | RET            | C3       |                | ~C3~                         | return             |

*** Subroutine ~compl~                                             :noexport:

#+CAPTION: Subroutine ~compl~ compiles a word in compiling state if it's not immediate (x86-64).
#+LABEL: tbl:forth:compl:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                | *Instruction*  | *Opcode*   | *&*            | *Machine code*                  | *Intention*         |
|---------------------------------------------+----------------+------------+----------------+---------------------------------+---------------------|
| /# Define:/ _~compl~_                       | ---            | ---        |                | {{{define(05,63 6F 6D 70 6C)}}} | define compl        |
| /# In/Out:/    ~( xt@RBX imm+state@AL~      |                |            |                |                                 |                     |
| /#/{{{io--}}} ~-- xt@RBX imm+state@AL )~    |                |            |                |                                 |                     |
| /#/                                         |                |            |                |                                 |                     |
| /# Compile ~xt~ in the current definition/  |                |            |                |                                 |                     |
| /# if we're in compiling state and ~xt~ is/ |                |            |                |                                 |                     |
| /# not immediate (if ~imm+state~ is ~1~)./  |                |            |                |                                 |                     |
|                                             |                |            |                |                                 |                     |
| {{{c(2)}}} ~if imm+state@AL = 1:~           | CMP AL, /imm8/ | 3C /ib/    |                | ~3C~ /~01~/                     | cmp al, 1           |
| {{{c(4)}}}   ~goto compl().~                | JE _rel8_      | 74 _cb_    |                | ~74~ {{{offset(01,01-00)}}}     | +jump (compl) if == |
| {{{c(2)}}} ~return.~                        | RET            | C3         | {{{addr(00)}}} | ~C3~                            | return              |
| ~compl():~                                  |                |            | {{{addr(01)}}} |                                 | (compl)             |
| {{{c(2)}}} ~call COMPL;~  /# Compiled./     | ---            | ---        |                | {{{compile(43)}}}               | Call COMPL          |
| {{{c(2)}}} /# Restore AL after ~COMPL~./    |                |            |                |                                 |                     |
| {{{c(2)}}} ~imm+state@AL ← 1;~              | MOV r8, /imm8/ | B0+rb /ib/ |                | ~B0~ /~01~/                     | al = 1              |
| {{{c(2)}}} ~return.~                        | RET            | C3         |                | ~C3~                            | return              |

*** Subroutine ~hit~                                               :noexport:

#+CAPTION: Subroutine ~hit~ either compiles or executes a word found in the dictionary (x86-64).
#+LABEL: tbl:forth:hit:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                      | *Instruction*   | *Opcode*    | *&*            | *Machine code*                                           | *Intention*         |
|---------------------------------------------------+-----------------+-------------+----------------+----------------------------------------------------------+---------------------|
| /# Define:/ _~hit~_                               | ---             | ---         |                | {{{define(03,68 69 74)}}}                                | define hit          |
| /# In/Out:/ ~( xt@RBX -- )~                       |                 |             |                |                                                          |                     |
| /#/                                               |                 |             |                |                                                          |                     |
| /# Either compile or execute a/                   |                 |             |                |                                                          |                     |
| /# word that has been found in/                   |                 |             |                |                                                          |                     |
| /# the dictionary, depending on/                  |                 |             |                |                                                          |                     |
| /# current state and whether it's/                |                 |             |                |                                                          |                     |
| /# an immediate word./                            |                 |             |                |                                                          |                     |
|                                                   |                 |             |                |                                                          |                     |
| {{{c(2)}}} ~if xt@RBX != 0:~                      | TEST r/m64, r64 | REX.W 85 /r |                | ~48 85~ {{{modrm(DB,11,011,011)}}}                       | rbx(xt) ?           |
| {{{c(4)}}}   ~goto hit().~                        | JNZ _rel8_      | 75 _cb_     |                | ~75~ {{{offset(01,01-00)}}}                              | +jump (hit) if != 0 |
| {{{c(2)}}} ~return.~                              | RET             | C3          | {{{addr(00)}}} | ~C3~                                                     | return              |
| ~hit():~                                          |                 |             | {{{addr(01)}}} |                                                          | (hit)               |
| {{{c(2)}}} /# Combine word's immediate/           |                 |             |                |                                                          |                     |
| {{{c(2)}}} /# flag with current state./           |                 |             |                |                                                          |                     |
| {{{c(2)}}} ~flag@AL ← [xt@RBX + 16];~             | MOV r8, r/m8    | REX 8A /r   |                | ~40 8A~ {{{modrm(43,01,000,011)}}} {{{displ(10)}}}       | al = [rbx+10]       |
| {{{c(2)}}} ~imm@AL ← flag@AL & 0x80;~             | AND AL, /imm8/  | 24 /ib/     |                | ~24~ /~80~/                                              | al &= 80(IMMEDIATE) |
| {{{c(2)}}} ~imm+state@AL ← imm@AL~                |                 |             |                |                                                          |                     |
| {{{c(15)}}}              \vert ~[STATE];~             | OR r8, r/m8     | 0A /r       |                | ~0A~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,100,101)}}} | al \vert= [STATE]       |
| {{{c(2)}}} /# Let ~compl~ and ~exec~ decide/      |                 |             |                | \hookrightarrow {{{i(0)}}} {{{displ(20 00 00 10)}}}      |                     |
| {{{c(2)}}} /# what to do./                        |                 |             |                |                                                          |                     |
| {{{c(2)}}} ~call compl;~  {{{c(0)}}}​/# Compiled./ | ---             | ---         |                | {{{compile(63,c)}}}                                      | Call compl          |
| {{{c(2)}}} ~call exec;~   {{{c(1)}}}​/# Compiled./ | ---             | ---         |                | {{{compile(65,e)}}}                                      | Call exec           |
| {{{c(2)}}} ~return.~                              | RET             | C3          |                | ~C3~                                                     | return              |


*** Subroutine ~SVAL~                                              :noexport:

#+CAPTION: Subroutine ~SVAL~ evaluates a line of Forth code (x86-64).
#+LABEL: tbl:forth:SVAL:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                      | *Instruction*  | *Opcode*    | *&*            | *Machine code*                                              | *Intention*     |
|---------------------------------------------------+----------------+-------------+----------------+-------------------------------------------------------------+-----------------|
| /# Define:/ _~SVAL~_                              | ---            | ---         |                | {{{define(04,53 56 41 4C)}}}                                | define SVAL     |
| /# In/Out:/ ~( ··· -- ··· )~                      |                |             |                |                                                             |                 |
| /#/                                               |                |             |                |                                                             |                 |
| /# Evaluate a Forth line: repeatedly/             |                |             |                |                                                             |                 |
| /# parse a token, attempt finding it/             |                |             |                |                                                             |                 |
| /# in the dictionary, then allow ~miss~/          |                |             |                |                                                             |                 |
| /# and ~hit~ to choose the appropriate/           |                |             |                |                                                             |                 |
| /# action in context./                            |                |             |                |                                                             |                 |
|                                                   |                |             |                |                                                             |                 |
| ~_begin:~                                         |                |             | {{{addr(00)}}} |                                                             |                 |
| {{{c(2)}}} ~call SVAL();~                         | CALL _rel32_   | E8 _cd_     |                | ~E8~ {{{offset(03 00 00 00,08-05)}}}                        | +call (SVAL)    |
| {{{c(2)}}} /# Characters left in current line?/   |                |             |                |                                                             |                 |
| {{{c(2)}}} ~if [>in] < [#IN]:~                    |                |             | {{{addr(05)}}} |                                                             |                 |
| {{{c(4)}}}   /# See comparison in ~SVAL()~!/      |                |             |                |                                                             |                 |
| {{{c(4)}}}   ~goto _begin.~                       | JL _rel8_      | 7C _cb_     |                | ~7C~ {{{offset(F9,00-07)}}}                                 | -jump SVAL if < |
| {{{c(2)}}} ~return.~                              | RET            | C3          | {{{addr(07)}}} | ~C3~                                                        | return          |
| ~SVAL():~                                         |                |             | {{{addr(08)}}} |                                                             | (SVAL)          |
| {{{c(2)}}} ~call pname;~  {{{c(0)}}}​/# Compiled./ | ---            | ---         |                | {{{compile(70,p)}}}                                         | Call pname      |
| {{{c(2)}}} ~call FIND;~   {{{c(1)}}}​/# Compiled./ | ---            | ---         |                | {{{compile(46,F)}}}                                         | Call FIND       |
| {{{c(2)}}} ~call miss;~   {{{c(1)}}}​/# Compiled./ | ---            | ---         |                | {{{compile(6D,m)}}}                                         | Call miss       |
| {{{c(2)}}} ~call hit;~    {{{c(2)}}}​/# Compiled./ | ---            | ---         |                | {{{compile(68,h)}}}                                         | Call hit        |
| {{{c(2)}}} ~>in@RAX ← [>IN];~                     | MOV r64, r/m64 | REX.W 8B /r |                | ~48 8B~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,100,101)}}} | rax = [>IN]     |
|                                                   |                |             |                | \hookrightarrow {{{i(0)}}} {{{displ(10 00 00 10)}}}         |                 |
| {{{c(2)}}} ~compare >in@RAX and [#IN];~           | CMP r64, r/m64 | REX.W 3B /r |                | ~48 3B~ {{{modrm(04,00,000,100)}}} {{{sib(25,00,100,101)}}} | cmp rax, [#IN]  |
|                                                   |                |             |                | \hookrightarrow {{{i(0)}}} {{{displ(00 00 00 10)}}}         |                 |
| {{{c(2)}}} ~return.~                              | RET            | C3          |                | ~C3~                                                        | return          |

*** Subroutine ~ti~                                                :noexport:

#+CAPTION: Subroutine ~ti~ brings everything together, reading and evaluating Forth in a loop (x86-64).
#+LABEL: tbl:forth:ti:x
#+ATTR_LATEX: :align l|ll|l|lH
| *Pseudocode*                                       | *Instruction*      | *Opcode*         | *&*            | *Machine code*                                     | *Intention*           |
|----------------------------------------------------+--------------------+------------------+----------------+----------------------------------------------------+-----------------------|
| /# Define:/ _~ti~_                                 | ---                | ---              |                | {{{define(02,74 69)}}}                             | define ti             |
| /# In/Out:/ ~( -- )~                               |                    |                  |                |                                                    |                       |
| /#/                                                |                    |                  |                |                                                    |                       |
| /# Initialize data stack and text/                 |                    |                  |                |                                                    |                       |
| /# input, then repeatedly refill/                  |                    |                  |                |                                                    |                       |
| /# lines and evaluate them./                       |                    |                  |                |                                                    |                       |
|                                                    |                    |                  |                |                                                    |                       |
| {{{c(2)}}} ~STACK@R15 ← 0x10000000;~               | MOV r/m64, /imm32/ | REX.W C7 /​0 /id/ |                | ~49 C7~ {{{modrm(C7,11,000,111)}}} /~00 00 00 10~/ | r15(stack) = 10000000 |
| {{{c(2)}}} ~[TIB] ← INPUT@RSI;~                    | MOV r/m64, r64     | REX.W 89 /r      |                | ~49 89~ {{{modrm(77,01,110,111)}}} {{{displ(08)}}} | [TIB] = rsi           |
| {{{c(2)}}} ~call [;~  /# Compiled./                | ---                | ---              |                | {{{compile(5B,[)}}}                                | Call [                |
| ~_begin:~                                          |                    |                  | {{{addr(00)}}} |                                                    | # _beg:               |
| {{{c(2)}}} ~call ti();~                            | CALL _rel32_       | E8 _cd_          |                | ~E8~ {{{offset(02 00 00 00,07-05)}}}               | +call (ti)            |
| {{{c(2)}}} ~goto _begin.~                          | JMP _rel8_         | EB _cb_          | {{{addr(05)}}} | ~EB~ {{{offset(F9,00-07)}}}                        | -jump _beg            |
| ~ti():~                                            |                    |                  | {{{addr(07)}}} |                                                    | (ti)                  |
| {{{c(2)}}} ~call REFILL;~  {{{c(0)}}}​/# Compiled./ | ---                | ---              |                | {{{compile(52,R)}}}                                | Call REFILL           |
| {{{c(2)}}} ~call SVAL;~    {{{c(2)}}}​/# Compiled./ | ---                | ---              |                | {{{compile(53,S)}}}                                | Call SVAL             |
| {{{c(2)}}} ~return.~                               | RET                | C3               |                | ~C3~                                               | return                |


* Porting SmithForth to RISC-V

** The ELF Header

*** ELF File Header                                                :noexport:

#+CAPTION: ELF file header for the Linux executable (RISC-V).
#+LABEL: tbl:elf-file-header:rv
#+ATTR_LATEX: :align l|l|l
| *&*            | *File Header Bytes*                 | *Explanation*                                                                      |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
| {{{addr(00)}}} | {{{b(0)}}}​~7F 45 4C 46~             | ~e_ident[EI_MAG]~: ELF magic number.                                               |
|                | {{{b(4)}}}​~02~                      | ~e_ident[EI_CLASS]~: ~1~ → 32-bit, _~2~ → 64-bit_.                                 |
|                | {{{b(5)}}}​~01~                      | ~e_ident[EI_DATA]~: _~1~ → little-endian_, ~2~ → big-endian.                       |
|                | {{{b(6)}}}​~01~                      | ~e_ident[EI_VERSION]~: ELF header version; must be ~1~.                            |
|                | {{{b(7)}}}​~00~                      | ~e_ident[EI_OSABI]~: Target OS ABI; ~ELFOSABI_NONE~ (~0~) is fine for Linux.       |
|                | {{{b(0)}}}​~00~                      | ~e_ident[EI_ABIVERSION]~: ABI version; should be ~0~ for Linux.                    |
|                | {{{b(1)}}}​~00 00 00 00 00 00 00~    | ~e_ident[EI_PAD]~: Padding; unused; should be ~0~.                                 |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
|                | {{{b(0)}}}​~02 00~                   | ~e_type~: Object file type; ~2~ → executable.                                      |
|                | {{{b(2)}}}​~F3 00~                   | ~e_machine~: Instruction set architecture; ~0x3E~ → ~x86-64~, _~0xF3~ → ~RISC-V~_. |
|                | {{{b(4)}}}​~01 00 00 00~             | ~e_version~: ELF identification version; must be ~1~.                              |
|                | {{{b(0)}}}​~78 00 00 00 00 00 00 00~ | ~e_entry~: Memory address of entry point (where process starts).                   |
|                | {{{b(0)}}}​~40 00 00 00 00 00 00 00~ | ~e_phoff~: File offset of program headers; ~0x34~ → ~32-bit~, _~0x40~ → 64-bit_.   |
|                | {{{b(0)}}}​~00 00 00 00 00 00 00 00~ | ~e_shoff~: File offset section headers (we don't have any sections).               |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
|                | {{{b(0)}}}​~00 00 00 00~             | ~e_flags~: 0 for the ~x86-64~ architecture.                                        |
|                | {{{b(4)}}}​~40 00~                   | ~e_ehsize~: Size of this header; ~0x34~ → 32-bit, _~0x40~ → 64-bit_.               |
|                | {{{b(6)}}}​~38 00~                   | ~e_phentsize~: Size of each program header; ~0x20~ → 32-bit, _~0x38~ → 64-bit_.    |
|                | {{{b(0)}}}​~01 00~                   | ~e_phnum~: Number of program headers; here ~1~.                                    |
|                | {{{b(2)}}}​~40 00~                   | ~e_shentsize~: Size of each section header; ~0x28~ → 32-bit, _~0x40~ → 64-bit_.    |
|                | {{{b(4)}}}​~00 00~                   | ~e_shnum~: Number of section headers; here ~0~.                                    |
|                | {{{b(6)}}}​~00 00~                   | ~e_shstrndx~: Index of section header containing section names; N/A.               |
|----------------+-------------------------------------+------------------------------------------------------------------------------------|
| {{{addr(40)}}} |                                     |                                                                                    |

*** ELF Program Header                                             :noexport:

#+CAPTION: ELF program header (RISC-V).
#+LABEL: tbl:elf-program-header:rv
#+ATTR_LATEX: :align l|l|l
| *&*            | *File Header Bytes*                 | *Explanation*                                                                                   |
|----------------+-------------------------------------+-------------------------------------------------------------------------------------------------|
| {{{addr(40)}}} | {{{b(0)}}}​~01 00 00 00~             | ~p_type~: Segment type; ~1~ → loadable.                                                         |
|                | {{{b(4)}}}​~07 00 00 00~             | ~p_flags~: Segment-wise permissions; _1 → execute_, _2 → write_, _4 → read_.                    |
|                | {{{b(0)}}}​~00 00 00 00 00 00 00 00~ | ~p_offset~: Offset of segment in file; we load the whole file, so ~0~.                          |
|                | {{{b(0)}}}​~00 00 00 00 00 00 00 00~ | ~p_vaddr~: Virtual address of loaded segment; can be 0 in RISC-V. [cite:@riscv_assembly_manual] |
|                | {{{b(0)}}}​~00 00 00 00 00 00 00 00~ | ~p_paddr~: Only used on systems where physical address is relevant.                             |
|                | {{{b(0)}}}​~02 1E 01 00 00 00 00 00~ | ~p_filesz~: Size of the segment in the file image (~TODO~).                                     |
|                | {{{b(0)}}}​~00 00 C0 7F 00 00 00 00~ | ~p_memsz~: Size of the segment in memory (\ge ~p_filesz~).                                        |
|                | {{{b(0)}}}​~00 10 00 00 00 00 00 00~ | ~p_align~: Align segment to RISC-V page size (4096 or ~0x1000~) [cite:@riscv_spec_vol_ii].      |
|----------------+-------------------------------------+-------------------------------------------------------------------------------------------------|
| {{{addr(78)}}} |                                     |                                                                                                 |


** Global Variables                                                :noexport:

#+CAPTION: Global variables in SmithForth (RISC-V).
#+LABEL: tbl:globals:rv
#+ATTR_LATEX: :align l|l|l
| *Variable* | *Register*​/​*Address*   | *Contents*                                                    |
|------------+------------------------+---------------------------------------------------------------|
| ~INPUT~    | ~s0~                   | Source address of binary interpreter data and commands.       |
| ~OUTPUT~   | ~s1~                   | Destination address of binary interpreter operations.         |
| ~VARS~     | ~s2~                   | Base address of globals stored in memory (~#IN~, ~TIB~ etc).  |
| ~STACK~    | ~s3~                   | Address of top value on the data stack.                       |
|------------+------------------------+---------------------------------------------------------------|
| ~#IN~      | ~0x10000000 (VARS)~    | The number of characters in the current line.                 |
| ~TIB~      | ~0x10000008 (VARS+8)~  | The address where the current line begins.                    |
| ~>IN~      | ~0x10000010 (VARS+16)~ | The number of /parsed/ characters in the current line.        |
| ~STATE~    | ~0x10000020 (VARS+32)~ | Either ~0~ (/interpreting/ state) or ~1~ (/compiling/ state). |
| ~LATEST~   | ~0x10000028 (VARS+40)~ | The execution token (/xt/) of the latest defined Forth word.  |

#+CAPTION: RISC-V: Initialize global variables =INPUT= and =OUTPUT=.
#+LABEL: tbl:forth:init-io:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                     | *Instruction*      | *Encoding*                                                                                             | *&*            | *Mach. code*  |
|----------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+----------------+---------------|
| /# Global variable ~INPUT~./     |                    |                                                                                                        |                |               |
| /#/                              |                    |                                                                                                        |                |               |
| /# Our ~INPUT~ begins after the/ |                    |                                                                                                        |                |               |
| /# binary interpreter, just at/  |                    |                                                                                                        |                |               |
| /# the beginning of ~COMPL~./    |                    |                                                                                                        |                |               |
| ~INPUT@s0 ← 0x000000F0;~         | ~lui s0,0x00000~   | {{{imm(0x00000)}}}                                 {{{rd(01001)}}}   {{{op(0110111)}}}                 | {{{addr(78)}}} | ~37 04 00 00~ |
|                                  |                    | /# Group 8-bit groups into bytes:/                                                                     |                |               |
|                                  |                    | /~0x~/​~⟨~​/~01~/​~⟩⟨~​/~00~/​~⟩⟨~​/~0~/                {{{rd(0100⟩⟨0)}}} {{{op(0110111⟩)}}}                 |                |               |
|                                  |                    | /# Write as hexadecimal:/                                                                              |                |               |
|                                  |                    | ~01 00 04 37~                                                                                          |                |               |
|                                  |                    | /# Finally, change to little-endian:/                                                                  |                |               |
|                                  |                    | ~37 04 00 01~                                                                                          |                |               |
|                                  | ~addi s0,s0,0x0F0~ | {{{imm(0x0F0)}}}                    {{{rs1(01000)}}} {{{fn3(000)}}} {{{rd(01000)}}}  {{{op(0010011)}}} |                | ~13 04 04 0F~ |
| /# Global variable ~OUTPUT~./    |                    |                                                                                                        |                |               |
| ~OUTPUT@s1 ← 0x10000030;~        | ~lui s1,0x10000~   | {{{imm(0x10000)}}}                                 {{{rd(01001)}}}   {{{op(0110111)}}}                 |                | ~B7 04 00 10~ |
|                                  | ~addi s1,s1,0x030~ | {{{imm(0x030)}}}   {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}   {{{op(0010011)}}}                 |                | ~93 84 04 03~ |
| /# Global variable ~VARS~./      |                    |                                                                                                        |                |               |
| ~VARS@s2 ← 0x10000000;~          | ~lui s2,0x10000~   | {{{imm(0x10000)}}}                                 {{{rd(10010)}}}   {{{op(0110111)}}}                 |                | ~37 09 00 10~ |
|                                  | ~addi s2,s2,0x000~ | {{{imm(0x000)}}}   {{{rs1(10010)}}} {{{fn3(000)}}} {{{rd(10010)}}}   {{{op(0010011)}}}                 |                | ~13 09 09 00~ |
|                                  |                    |                                                                                                        | {{{addr(90)}}} |               |


** Binary Interpreter

*** The Binary Interpreter Loop                                    :noexport:

#+CAPTION: The binary interpreter routine and loop (RISC-V).
#+LABEL: tbl:forth:bi:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                      | *Instruction*                        | *Encoding*                                                                                             | *&*            | *Machine code* |
|---------------------------------------------------+--------------------------------------+--------------------------------------------------------------------------------------------------------+----------------+----------------|
| ~_bi:~                                            |                                      |                                                                                                        | {{{addr(90)}}} |                |
| {{{i(1)}}} /# Loop the binary interpreter./       |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~call bi();~                           | *jal* ra, 8                          | {{{off(00000000100000000000)}}}                                     {{{rd(00000)}}}  {{{op(1101111)}}} |                | ~EF 00 80 00~  |
| {{{i(1)}}} ~goto _bi.~                            | *jal* zero, -4                       | {{{off(11111111110111111111)}}}                                     {{{rd(00000)}}}  {{{op(1101111)}}} |                | ~6F F0 DF FF~  |
| ~bi():~                                           |                                      |                                                                                                        | {{{addr(98)}}} |                |
| {{{i(1)}}} /# Read next byte from ~INPUT~./       |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~byte@t0 ← [INPUT@s0];~                | *lbu* t0, 0(s0)                      | {{{off(0x000)}}}                    {{{rs1(01000)}}} {{{fn3(100)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 42 04 00~  |
| {{{i(1)}}} /# Does it start a command?/           |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~if byte@t0 = 0x99:~                   | *addi* t1, zero, 0x099               | {{{imm(0x099)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |                | ~13 03 90 09~  |
| {{{i(2)}}}     ~goto _command.~                   | *beq* t0, t1, 0x018                  | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(00110)}}} {{{fn3(000)}}} {{{off(11000)}}} {{{op(1100011)}}} | {{{addr(A0)}}} | ~63 0C 53 00~  |
| {{{i(1)}}} /# This is just an instruction./       |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# Copy four bytes to ~OUTPUT~/        |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# and return./                        |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~instr@t0 ← [INPUT@s0++4];~            | *lwu* t0, 0(s0)                      | {{{off(0x000)}}}                    {{{rs1(01000)}}} {{{fn3(110)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 62 04 00~  |
| {{{i(1)}}}                                        | *addi* s0, s0, 4                     | {{{imm(0x004)}}}                    {{{rs1(01000)}}} {{{fn3(000)}}} {{{rd(01000)}}}  {{{op(0010011)}}} |                | ~13 04 44 00~  |
| {{{i(1)}}} ~[OUTPUT@s1++4] ← instr@t0;~           | *sw* t0, 0(s1)                       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 A0 54 00~  |
| {{{i(1)}}}                                        | *addi* s1, s1, 4                     | {{{imm(0x004)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |                | ~93 84 44 00~  |
| {{{i(1)}}} ~return.~                              | *jalr* zero, 0(ra)                   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~  |
| ~_command:~                                       |                                      |                                                                                                        | {{{addr(B8)}}} |                |
| {{{i(1)}}} /# Get latest dictionary word/         |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# from ~LATEST~ (~VARS + 40~):/       |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~xt@a0 ← [LATEST];~                    | *ld* a0, 40(s2)                      | {{{off(0x028)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(01010)}}}  {{{op(0000011)}}} |                | ~03 35 89 02~  |
| {{{i(1)}}}                                        |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# Read command argument/              |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# and advance ~INPUT~./               |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~arg@a1 ← [INPUT@s0 + 1];~             | *lbu* a1, 1(s0)                      | {{{off(0x001)}}}                    {{{rs1(01000)}}} {{{fn3(100)}}} {{{rd(01011)}}}  {{{op(0000011)}}} |                | ~83 45 14 00~  |
| {{{i(1)}}} ~INPUT@s0 += 2;~                       | *addi* s0, s0, 2                     | {{{imm(0x002)}}}                    {{{rs1(01000)}}} {{{fn3(000)}}} {{{rd(01000)}}}  {{{op(0010011)}}} |                | ~13 04 24 00~  |
| {{{i(1)}}} /# Command type by argument:/          |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# – ~0bi00ccccc~: define;/            |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# – ~0b011ccccc~: compile;/           |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# – ~0b111ccccc~: execute./           |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~if arg@a1~ ~&~ ~0b01100000~ ~=~ ~0:~  | *andi* t0, a1, 0x060                 | {{{imm(0x060)}}}                    {{{rs1(01011)}}} {{{fn3(111)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 F2 05 06~  |
| {{{i(2)}}}     /# _Define_ a new word./           |                                      |                                                                                                        |                |                |
| {{{i(2)}}}     ~goto Head.~                       | *beq* t0, zero, _0x07E_              | {{{off(0000011)}}} {{{rs2(00101)}}} {{{rs1(00000)}}} {{{fn3(000)}}} {{{off(11110)}}} {{{op(1100011)}}} | {{{addr(C8)}}} | ~63 0F 50 06~  |
| ~_find1:~                                         | TODO: andi below can go above _find1 |                                                                                                        | {{{addr(CC)}}} |                |
| {{{i(1)}}} ~chr@t0~ ~←~ ~arg@a1~ ~&~ ~0b0111111;~ | *andi* t0, a1, 0x07F                 | {{{imm(0x07F)}}}                    {{{rs1(01011)}}} {{{fn3(111)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 F2 F5 07~  |
| {{{i(1)}}} ~if chr@t0 = [xt@a0 + 17]:~            | *lbu* t1, 0x011(a0)                  | {{{off(0x011)}}}                    {{{rs1(01010)}}} {{{fn3(100)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 43 15 01~  |
| {{{i(2)}}}     /# We found a word whose/          |                                      |                                                                                                        |                |                |
| {{{i(2)}}}     /# name begins with ~chr~./        |                                      |                                                                                                        |                |                |
| {{{i(2)}}}     ~goto _match.~                     | *beq* t0, t1, _0x00C_                | {{{off(0000000)}}} {{{rs2(00110)}}} {{{rs1(00101)}}} {{{fn3(000)}}} {{{off(01100)}}} {{{op(1100011)}}} | {{{addr(D4)}}} | ~63 86 62 00~  |
| {{{i(1)}}} /# Follow word's link pointer/         |                                      |                                                                                                        |                |                |
| {{{i(1)}}} /# to previous entry and repeat./      |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~xt@a0 ← [xt@a0 + 8];~                 | *ld* a0, 8(a0)                       | {{{off(0x008)}}}                    {{{rs1(01010)}}} {{{fn3(011)}}} {{{rd(01010)}}}  {{{op(0000011)}}} |                | ~03 35 85 00~  |
| {{{i(1)}}} ~goto _find1.~                         | *jal* zero, _-16_                    | {{{off(11111111000111111111)}}}                                     {{{rd(00000)}}}  {{{op(1101111)}}} | {{{addr(DC)}}} | ~6F F0 1F FF~  |
| ~_match:~                                         |                                      |                                                                                                        | {{{addr(E0)}}} |                |
| {{{i(1)}}} ~if arg@a1 & 0b1000000 = 0:~           | *andi* t0, a1, 0x080                 | {{{imm(0x080)}}}                    {{{rs1(01011)}}} {{{fn3(111)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 F2 05 08~  |
| {{{i(2)}}}     /# _Compile_./                     |                                      |                                                                                                        |                |                |
| {{{i(2)}}}     ~goto COMPL.~                      | *beq* t0, zero, _0x014_              | {{{off(0000000)}}} {{{rs2(00000)}}} {{{rs1(00101)}}} {{{fn3(000)}}} {{{off(10100)}}} {{{op(1100011)}}} | {{{addr(E4)}}} | ~63 8A 02 00~  |
| {{{i(1)}}} /# _Execute_ word's code./             |                                      |                                                                                                        |                |                |
| {{{i(1)}}} ~goto [xt@a0].~                        | *ld* t0, 0(a0)                       | {{{off(0x000)}}}                    {{{rs1(01010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} | {{{addr(E8)}}} | ~83 32 05 00~  |
| {{{i(1)}}}                                        | *jalr* zero, 0(t0)                   | {{{off(0x000)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 02 00~  |
|                                                   |                                      |                                                                                                        | {{{addr(F0)}}} |                |

*** Subroutine ~COMPL~                                             :noexport:

Discuss:
- Differences between the compiled ~CALL~​s in x86-64 and two
  instruction calls in RISC-V.  Explain the consequence of implicit
  vs. explicit pushing of the return address on the stack. Refer to
  the definitions of ~:~ and ~;~ which need to compile prologues and
  epilogues to Forth secondary words.

#+CAPTION: =COMPL=, the FORTH compiler.
#+LABEL: tbl:forth:compl:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                                                                   | *Instruction*      | *Encoding*                                                                                             | *&*             | *Machine code*                  |
|------------------------------------------------------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+-----------------+---------------------------------|
| /# Define:/ _~COMPL~_                                                                          | ---                | ---                                                                                                    | {{{addr(F0)}}}  | {{{define(05,43 4F 4D 50 4C)}}} |
| /# In/Out:/ ~( xt@a0 -- xt@a0 )~                                                               |                    |                                                                                                        |                 | {{{padding(00)}}}               |
|                                                                                                |                    |                                                                                                        |                 |                                 |
| /# Generate two instructions which,/                                                           |                    |                                                                                                        |                 |                                 |
| /# combined, set the PC to ~[xt]~:/                                                            |                    |                                                                                                        |                 |                                 |
| /# 1. Prepare 20 highest bits of ~[xt]~:/                                                      |                    |                                                                                                        |                 |                                 |
| /# – instruction:/ ~lui t6, 0xhhhhh~                                                           |                    |                                                                                                        |                 |                                 |
| /# – encoded:/ {{{imm(0xhhhhh)}}} {{{rd(11111)}}} {{{op(0110111)}}}                            |                    |                                                                                                        |                 |                                 |
| /# 2. Add lowest 12 bits of ~[xt]~ and jump:/                                                  |                    |                                                                                                        |                 |                                 |
| /# – instr.:/ ~jalr ra, 0xhhh(t6)~                                                             |                    |                                                                                                        |                 |                                 |
| /# – enc.:/ {{{off(0xhhh)}}} {{{rs1(11111)}}} {{{fn3(000)}}} {{{rd(00001)}}} {{{op(1101111)}}} |                    |                                                                                                        |                 |                                 |
| /#/                                                                                            |                    |                                                                                                        |                 |                                 |
| /# Thus we generate code as follows:/                                                          |                    |                                                                                                        |                 |                                 |
| /#/{{{c(2)}}}​~bbbbbbbb·bbbbbbbb·bbbb1111·10110111~                                             |                    |                                                                                                        |                 |                                 |
| /#/{{{c(2)}}}​~bbbbbbbb·bbbb1111·10000000·11100111~                                             |                    |                                                                                                        |                 |                                 |
| /#/                                                                                            |                    |                                                                                                        |                 |                                 |
| /# Care is required to compensate for the potential/                                           |                    |                                                                                                        |                 |                                 |
| /# sign-extension of ~jalr~​'s immediate operand./                                              |                    |                                                                                                        |                 |                                 |
|                                                                                                |                    |                                                                                                        |                 |                                 |
| /# A useful bit mask./                                                                         |                    |                                                                                                        |                 |                                 |
| ~mask@t1 ← 0x00000FFF;~                                                                        | lui t1, 1          | {{{imm(0x00001)}}}                                                  {{{rd(00110)}}}  {{{op(0110111)}}} | {{{addr(F8)}}}  | ~37 13 00 00~                   |
|                                                                                                | addi t1, t1, -1    | {{{imm(0xFFF)}}}                    {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |                 | ~13 03 F3 FF~                   |
| /# 1. Load code address from ~xt~ and extract low & high bits./                                |                    |                                                                                                        |                 |                                 |
| ~addr@t0 ← [xt@a0];~                                                                           | *lwu* t0, 0(a0)    | {{{off(0x000)}}}                    {{{rs1(01010)}}} {{{fn3(110)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                 | ~83 62 05 00~                   |
| ~high@t2 ← addr@t0 >> 12;~                                                                     | srli t2, t0, 12    | ~000000~​{{{shamt(001100)}}}         {{{rs1(00101)}}} {{{fn3(101)}}} {{{rd(00111)}}}  {{{op(0010011)}}} |                 | ~93 D3 C2 00~                   |
| ~low@t3 ← addr@t0 & 0x00000FFF;~                                                               | and t3, t0, t1     | {{{fn7(0000000)}}} {{{rs2(00110)}}} {{{rs1(00101)}}} {{{fn3(111)}}} {{{rd(11100)}}}  {{{op(0110011)}}} |                 | ~33 FE 62 00~                   |
|                                                                                                |                    |                                                                                                        |                 |                                 |
| /# 2. Assemble and write ~lui~ instr./                                                         |                    |                                                                                                        |                 |                                 |
| ~sign@t4 ← low@t3 >> 11;~                                                                      | srli t4, t3, 11    | ~000000~​{{{shamt(001011)}}}         {{{rs1(11100)}}} {{{fn3(101)}}} {{{rd(11101)}}}  {{{op(0010011)}}} |                 | ~93 5E BE 00~                   |
| ~high@t2 ← high@t2 + sign@t4;~                                                                 | add t2, t2, t4     | {{{fn7(0000000)}}} {{{rs2(11101)}}} {{{rs1(00111)}}} {{{fn3(000)}}} {{{rd(00111)}}}  {{{op(0110011)}}} |                 | ~B3 83 D3 01~                   |
| ~instr@t2 ← (high@t2 << 12) + 0x00000FB7;~                                                         | slli t2, t2, 12    | ~000000~​{{{shamt(001100)}}}         {{{rs1(00111)}}} {{{fn3(001)}}} {{{rd(00111)}}}  {{{op(0010011)}}} |                 | ~93 93 C3 00~                   |
|                                                                                                | andi t4, t1, 0xFB7 | {{{imm(0xFB7)}}}                    {{{rs1(00110)}}} {{{fn3(111)}}} {{{rd(11101)}}}  {{{op(0010011)}}} |                 | ~93 7E 73 FB~                   |
|                                                                                                | add t2, t2, t4     | {{{fn7(0000000)}}} {{{rs2(11101)}}} {{{rs1(00111)}}} {{{fn3(000)}}} {{{rd(00111)}}}  {{{op(0110011)}}} |                 | ~B3 83 D3 01~                   |
| ~[OUTPUT@s1] ← instr@t2;~                                                                      | sw t2, 0(s1)       | {{{off(0000000)}}} {{{rs2(00111)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00000)}}} {{{op(0100011)}}} |                 | ~23 A0 74 00~                   |
|                                                                                                |                    |                                                                                                        |                 |                                 |
| /# 3. Assemble and write ~jalr~ instruction./                                                  |                    |                                                                                                        |                 |                                 |
| ~instr@t3 = (low@t3 << 20) \vert 0x000F80E7;~                                                      | slli t3, t3, 20    | ~000000~​{{{shamt(010100)}}}         {{{rs1(11100)}}} {{{fn3(001)}}} {{{rd(11100)}}}  {{{op(0010011)}}} |                 | ~13 1E 4E 01~                   |
|                                                                                                | lui t4, 0xF8       | {{{imm(0x000F8)}}}                                                  {{{rd(11101)}}}  {{{op(0110111)}}} |                 | ~B7 8E 0F 00~                   |
|                                                                                                | addi t4, t4, 0x0E7 | {{{imm(0x0E7)}}}                    {{{rs1(11101)}}} {{{fn3(000)}}} {{{rd(11101)}}}  {{{op(0010011)}}} |                 | ~93 8E 7E 0E~                   |
|                                                                                                | or t3, t3, t4      | {{{fn7(0000000)}}} {{{rs2(11101)}}} {{{rs1(11100)}}} {{{fn3(110)}}} {{{rd(11100)}}}  {{{op(0110011)}}} |                 | ~33 6E DE 01~                   |
| ~[OUTPUT@s1 + 4] ← instr@t3;~                                                                  | sw t3, 4(s1)       | {{{off(0000000)}}} {{{rs2(11100)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00100)}}} {{{op(0100011)}}} |                 | ~23 A2 C4 01~                   |
|                                                                                                |                    |                                                                                                        |                 |                                 |
| ~OUTPUT@s1 += 8;~                                                                              | *addi* s1, s1, 8   | {{{imm(0x008)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |                 | ~93 84 84 00~                   |
| ~return.~  /# To interpreter loop./                                                            | *jalr* zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                 | ~67 80 00 00~                   |
|                                                                                                |                    |                                                                                                        | {{{addr(140)}}} |                                 |

*** Subroutine ~Head~                                              :noexport:

#+CAPTION: Subroutine =Head= defines new words in the dictionary (RISC-V).
#+LABEL: tbl:forth:head:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                                           | *Instruction*                          | *Encoding*                                                                                             | *&*             | *Machine code*               |
|------------------------------------------------------------------------+----------------------------------------+--------------------------------------------------------------------------------------------------------+-----------------+------------------------------|
| /# Define:/ _~Head~_                                                   | ---                                    | ---                                                                                                    | {{{addr(140)}}} | {{{define(04,48 65 61 64)}}} |
| /# In/Out:/ ~( latest@a0~                                              |                                        |                                                                                                        |                 |                              |
| /#/{{{io}}}   ~flag@a1 -​- )~                                           |                                        |                                                                                                        |                 |                              |
|                                                                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# 16-bit align ~OUTPUT~./                                   |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​~OUTPUT@s1 += 0x00F;~  /# TODO: Necessary?!                  | *addi* s1, s1, /0x00F/                 | {{{imm(0x00F)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} | {{{addr(146)}}} | ~93 84 F4 00~                |
| {{{c(2)}}}​~OUTPUT@s1 &= 0xFF0;~                                        | *andi* s1, s1, /0xFF0/                 | {{{imm(0xFF0)}}}                    {{{rs1(01001)}}} {{{fn3(111)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |                 | ~93 F4 04 FF~                |
|                                                                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# New word starts here./                                    | /# TODO: convert to ~addi t0, s1, 0~:/ |                                                                                                        |                 |                              |
| {{{c(2)}}}​~xt@t0 ← OUTPUT@s1;~                                         | *or* t0, s1, s1                        | {{{fn7(0000000)}}} {{{rs2(01001)}}} {{{rs1(01001)}}} {{{fn3(110)}}} {{{rd(00101)}}}  {{{op(0110011)}}} |                 | ~B3 E2 94 00~                |
|                                                                        | /# ... because it's more intuitive./   |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# Fill the new dictionary entry:/                           |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/#/                                                          |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# 1. Set the _link_ field, then point/                      |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# ~LATEST~ (~VARS+40~) to new word./                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​~[xt@t0 + 8] ← latest@a0;~                                   | *sd* a0, _8_​(t0)                       | {{{off(0000000)}}} {{{rs2(01010)}}} {{{rs1(00101)}}} {{{fn3(011)}}} {{{off(01000)}}} {{{op(0100011)}}} |                 | ~23 B4 A2 00~                |
| {{{c(2)}}}​~[LATEST] ← xt@t0;~                                          | *sd* t0, _40_​(s2)                      | {{{off(0000001)}}} {{{rs2(00101)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(01000)}}} {{{op(0100011)}}} |                 | ~23 34 59 02~                |
|                                                                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# 2. Set the _flag+length_ field./                          |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​~[xt@t0 + 16] ← flag@a1;~                                    | *sb* a1, _16_​(t0)                      | {{{off(0000000)}}} {{{rs2(01011)}}} {{{rs1(00101)}}} {{{fn3(000)}}} {{{off(10000)}}} {{{op(0100011)}}} |                 | ~23 88 B2 00~                |
|                                                                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# 3. Extract name length from/                              |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# ~flag~ and fill the _name_ field./                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​~length@t1 ← flag@a1 & 0x1F;~                                | *andi* t1, a1, /0x01F/                 | {{{imm(0x01F)}}}                    {{{rs1(01011)}}} {{{fn3(111)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |                 | ~13 F3 F5 01~                |
| {{{c(2)}}}​~OUTPUT@s1 ← xt@t0 + 17;~                                    | *addi* s1, t0, /0x011/                 | {{{imm(0x011)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |                 | ~93 84 12 01~                |
| ~_begin:~                                                              |                                        |                                                                                                        | {{{addr(00)}}}  |                              |
| {{{c(2)}}}​~chr@t2 ← [INPUT@s0++];~                                     | *lbu* t2, _0_​(s0)                      | {{{off(0x000)}}}                    {{{rs1(01000)}}} {{{fn3(100)}}} {{{rd(00111)}}}  {{{op(0000011)}}} |                 | ~83 43 04 00~                |
|                                                                        | *addi* s0, s0, /1/                     | {{{imm(0x001)}}}                    {{{rs1(01000)}}} {{{fn3(000)}}} {{{rd(01000)}}}  {{{op(0010011)}}} |                 | ~13 04 14 00~                |
| {{{c(2)}}}​~[OUTPUT@s1] ← chr@t2;~                                      | *sb* t2, _0_​(s1)                       | {{{off(0000000)}}} {{{rs2(00111)}}} {{{rs1(01001)}}} {{{fn3(000)}}} {{{off(00000)}}} {{{op(0100011)}}} |                 | ~23 80 74 00~                |
|                                                                        | *addi* s1, s1, /1/                     | {{{imm(0x001)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |                 | ~93 84 14 00~                |
| {{{c(2)}}}​~length@t1--;~                                               | *addi* t1, t1, /-1/                    | {{{imm(0xFFF)}}}                    {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |                 | ~13 03 F3 FF~                |
| {{{c(2)}}}​~if length@t1 != 0:~                                         |                                        |                                                                                                        |                 |                              |
| {{{c(4)}}}​  ~goto _begin;~                                             | *bne* t1, zero, _0xFEC_                | {{{off(1111111)}}} {{{rs2(00000)}}} {{{rs1(00110)}}} {{{fn3(001)}}} {{{off(01101)}}} {{{op(1100011)}}} | {{{addr(14)}}}  | ~E3 16 03 FE~                |
|                                                                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# One padding byte might follow/                            |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# the word's name to abide by/                              |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# RISC-V's requirement to align/                            |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# instructions to even addresses [cite:@riscv_spec_vol_i]./ |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# Both ~INPUT~ and ~OUTPUT~ need to/                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# be 1-bit aligned: the former to keep/                     |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# instructions in the executable/                           |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# aligned and former to make sure/                          |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# that compiled code is also aligned./                      |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​~INPUT@s0 += 0x001;~                                         | *addi* s0, s0, /0x001/                 | {{{imm(0x001)}}}                    {{{rs1(01000)}}} {{{fn3(000)}}} {{{rd(01000)}}}  {{{op(0010011)}}} |                 | ~13 04 14 00~                |
| {{{c(2)}}}​~INPUT@s0 &= 0xFFE;~                                         | *andi* s0, s0, /0xFFE/                 | {{{imm(0xFFE)}}}                    {{{rs1(01000)}}} {{{fn3(111)}}} {{{rd(01000)}}}  {{{op(0010011)}}} |                 | ~13 74 E4 FF~                |
| {{{c(2)}}}​~OUTPUT@s1 += 0x001;~                                        | *addi* s1, s1, /0x001/                 | {{{imm(0x001)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |                 | ~93 84 14 00~                |
| {{{c(2)}}}​~OUTPUT@s1 &= 0xFFE;~                                        | *andi* s1, s1, /0xFFE/                 | {{{imm(0xFFE)}}}                    {{{rs1(01001)}}} {{{fn3(111)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |                 | ~93 F4 E4 FF~                |
|                                                                        |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# 4b. Point _code_ field to the code/                       |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​/# about to be generated at ~OUTPUT~./                       |                                        |                                                                                                        |                 |                              |
| {{{c(2)}}}​~[xt@t0 + 0] ← OUTPUT@s1;~                                   | *sd* s1, _0_​(t0)                       | {{{off(0000000)}}} {{{rs2(01001)}}} {{{rs1(00101)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                 | ~23 B0 92 00~                |
| {{{c(2)}}}​~return.~  /# To interpreter loop./                          | *jalr* zero, _0_​(ra)                   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                 | ~67 80 00 00~                |


** A Way Out

*** Subroutine ~BYE~                                               :noexport:

#+CAPTION: Subroutine ~BYE~ terminates the program by performing an ~exit~ syscall (RISC-V).
#+LABEL: tbl:forth:BYE:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                       | *Instruction*          | *Encoding*                                                                                             | *Machine code*            |
|------------------------------------+------------------------+--------------------------------------------------------------------------------------------------------+---------------------------|
| /# Define:/ _~BYE~_                | ---                    | ---                                                                                                    | {{{define(03,42 59 45)}}} |
| /# In/Out:/ ~( -​- )~               |                        |                                                                                                        | {{{padding(00)}}}         |
|                                    |                        |                                                                                                        |                           |
| /# Goodbye, world (exit syscall)./ |                        |                                                                                                        |                           |
| ~nr@a7 ← 93;~  /# ~__NR_exit~./    | *addi* a7, zero, 0x05D | {{{imm(0x05D)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(10001)}}}  {{{op(0010011)}}} | ~93 08 D0 05~             |
|                                    |                        |                                                                                                        |                           |
| ~status@a0 ← 0;~                   | *addi* a0, zero, 0     | {{{imm(0x000)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} | ~13 05 00 00~             |
| ~syscall exit(status@a0).~         | *ecall*                | ~000000000000~     ~00000~                           {{{fn3(000)}}} ~00000~          {{{op(1110011)}}} | ~73 00 00 00~             |


** Debugging Utilities

*** Subroutine ~TYPE~                                              :noexport:

Citations:
- Section "3.2 Calling convention" from [cite:@patterson2017]:
  function prologue & epilogue.

#+CAPTION: Subroutine ~TYPE~ dumps a memory range to ~STDOUT~ (RISC-V).
#+LABEL: tbl:forth:type:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                                          | *Instruction*            | *Encoding*                                                                                                | *&*                  | *Machine code*               |
|-----------------------------------------------------------------------+--------------------------+-----------------------------------------------------------------------------------------------------------+----------------------+------------------------------|
| /# Define:/ _~TYPE~_                                                  | ---                      | ---                                                                                                       |                      | {{{define(04,54 59 50 45)}}} |
| /# In/Out:/ ~( addr@a0 u@a1~ -- )~                                    |                          |                                                                                                           |                      |                              |
| /#/                                                                   |                          |                                                                                                           |                      |                              |
| /# Dump memory range ~[addr, addr+u)~./                               |                          |                                                                                                           |                      |                              |
|                                                                       |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} /# Use saved registers to preserve/                        |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} /# values of ~addr~ and ~a1~ across/                       |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} /# the ~write~ system calls [cite:@system_v_psabi_riscv]./ |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} /# Also save the return address./                          |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} ~save s10, s11, ra;~                                       | *addi* sp, sp, -24       | {{{imm(0xFE.8)}}}                    {{{rs1(0001.0)}}} {{{fn3(000)}}} {{{rd(0001.0)}}}  {{{op(0010011)}}} |                      | ~13 01 81 FE~                |
|                                                                       | *sd* ra, 16(sp)          | {{{off(0000000)}}} {{{rs2(0.0001)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} |                      | ~23 38 11 00~                |
|                                                                       | *sd* s11, 8(sp)          | {{{off(0000000)}}} {{{rs2(1.1011)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} |                      | ~23 34 B1 01~                |
|                                                                       | *sd* s10, 0(sp)          | {{{off(0000000)}}} {{{rs2(1.1010)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} |                      | ~23 30 A1 01~                |
| {{{i(1)}}} ~addr@s10 ← addr@a0;~                                      | *addi* s10, a0, 0        | {{{imm(0x00.0)}}}                    {{{rs1(0101.0)}}} {{{fn3(000)}}} {{{rd(1101.0)}}}  {{{op(0010011)}}} |                      | ~13 0D 05 00~                |
| {{{i(1)}}} ~u@s11 ← u@a1;~                                            | *addi* s11, a1, 0        | {{{imm(0x00.0)}}}                    {{{rs1(0101.1)}}} {{{fn3(000)}}} {{{rd(1101.1)}}}  {{{op(0010011)}}} |                      | ~93 8D 05 00~                |
|                                                                       |                          |                                                                                                           |                      |                              |
| ~_begin:~                                                             |                          |                                                                                                           | {{{addr(00)}}}[fn:2] |                              |
| {{{i(1)}}} ~fd@a0 ← 1;~  /# ~STDOUT_FILENO~./                         | *addi* a0, zero, 1       | {{{imm(0x00.1)}}}                    {{{rs1(0000.0)}}} {{{fn3(000)}}} {{{rd(0101.0)}}}  {{{op(0010011)}}} |                      | ~13 05 10 00~                |
| {{{i(1)}}} ~addr@a1 ← addr@s10;~                                      | *addi* a1, s10, 0        | {{{imm(0x00.0)}}}                    {{{rs1(1101.0)}}} {{{fn3(000)}}} {{{rd(0101.1)}}}  {{{op(0010011)}}} |                      | ~93 05 0D 00~                |
| {{{i(1)}}} ~u@a2 ← u@s11;~                                            | *addi* a2, s11, 0        | {{{imm(0x00.0)}}}                    {{{rs1(1101.1)}}} {{{fn3(000)}}} {{{rd(0110.0)}}}  {{{op(0010011)}}} |                      | ~13 86 0D 00~                |
| {{{i(1)}}} ~nr@a7 ← 64;~  /# ~__NR_write~./                           | *addi* a7, zero, 64      | {{{imm(0x04.0)}}}                    {{{rs1(0000.0)}}} {{{fn3(000)}}} {{{rd(1000.1)}}}  {{{op(0010011)}}} |                      | ~93 08 00 04~                |
| {{{i(1)}}} ~syscall write(fd@a0,~                                     |                          |                                                                                                           |                      |                              |
| {{{i(1)}}}{{{c(14)}}}    ~addr@a1,~                                   |                          |                                                                                                           |                      |                              |
| {{{i(1)}}}{{{c(14)}}}    ~u@a2);~                                     | *ecall*                  | ~00000000.0000~                      ~0000.0~          {{{fn3(000)}}} ~0000.0~          {{{op(1110011)}}} |                      | ~73 00 00 00~                |
| {{{i(1)}}} ~if ret@a0 < 0:~                                           |                          |                                                                                                           |                      |                              |
| {{{i(2)}}} /# An error occured./                                      |                          |                                                                                                           |                      |                              |
| {{{i(2)}}}     ~goto _end.~                                           | *blt* a0, zero, _+0x10_  | {{{off(0000000)}}} {{{rs2(0.0000)}}} {{{rs1(0101.0)}}} {{{fn3(100)}}} {{{off(1000.0)}}} {{{op(1100011)}}} | {{{addr(14)}}}       | ~63 48 05 00~                |
| {{{i(1)}}} /# Advance by ~ret~ (printed) bytes./                      |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} ~addr@s10 += ret@a0;~                                      | *add* s10, s10, a0       | {{{fn7(0000000)}}} {{{rs2(0.1010)}}} {{{rs1(1101.0)}}} {{{fn3(000)}}} {{{rd(1101.0)}}}  {{{op(0110011)}}} |                      | ~33 0D AD 00~                |
| {{{i(1)}}} /# Fewer bytes left to print./                             |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} ~u@s11 -= ret@a0;~                                         | *sub* s11, s11, a0       | {{{fn7(0100000)}}} {{{rs2(0.1010)}}} {{{rs1(1101.1)}}} {{{fn3(000)}}} {{{rd(1101.1)}}}  {{{op(0110011)}}} |                      | ~B3 8D AD 40~                |
| {{{i(1)}}} ~if u@s11 > 0:~                                            |                          |                                                                                                           |                      |                              |
| {{{i(2)}}}     /# We still have bytes to print./                      |                          |                                                                                                           |                      |                              |
| {{{i(2)}}}     ~goto _begin.~                                         | *blt* zero, s11, _-0x20_ | {{{off(1111111)}}} {{{rs2(1.1011)}}} {{{rs1(0000.0)}}} {{{fn3(100)}}} {{{off(0000.1)}}} {{{op(1100011)}}} | {{{addr(20)}}}       | ~E3 40 B0 FF~                |
| ~_end:~                                                               |                          |                                                                                                           | {{{addr(24)}}}       |                              |
| {{{i(1)}}} /# Restore saved registers and return./                    |                          |                                                                                                           |                      |                              |
| {{{i(1)}}} ~restore s10, s11, ra;~                                    | *ld* s10, 0(sp)          | {{{off(0x00.0)}}}                    {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{rd(1101.0)}}}  {{{op(0000011)}}} |                      | ~03 3D 01 00~                |
|                                                                       | *ld* s11, 8(sp)          | {{{off(0x00.8)}}}                    {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{rd(1101.1)}}}  {{{op(0000011)}}} |                      | ~83 3D 81 00~                |
|                                                                       | *ld* ra, 16(sp)          | {{{off(0x01.0)}}}                    {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{rd(0000.1)}}}  {{{op(0000011)}}} |                      | ~83 30 01 01~                |
|                                                                       | *addi* sp, sp, 24        | {{{imm(0x01.8)}}}                    {{{rs1(0001.0)}}} {{{fn3(000)}}} {{{rd(0001.0)}}}  {{{op(0010011)}}} |                      | ~13 01 81 01~                |
| {{{i(1)}}} ~return.~                                                  | *jalr* zero, 0(ra)       | {{{off(0x00.0)}}}                    {{{rs1(0000.1)}}} {{{fn3(000)}}} {{{rd(0000.0)}}}  {{{op(1100111)}}} |                      | ~67 80 00 00~                |

*** Subroutine ~dbg~                                               :noexport:

Explain:
- ~addr~ value of ~0x0FFFFFE0~ is chosen so that the first four words
  on the stack (whose top is at ~0x10000000~) are printed.
- How to print readably using ~xxd -e -g8 -u -o 0x0FFFFFE0~.

#+CAPTION: Subroutine ~dbg~ dumps the working memory to ~STDOUT~ (RISC-V).
#+LABEL: tbl:forth:dbg:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                  | *Instruction*        | *Encoding*                                                                                                | *Machine code*            |
|-------------------------------+----------------------+-----------------------------------------------------------------------------------------------------------+---------------------------|
| /# Define:/ _~dbg~_           | ---                  | ---                                                                                                       | {{{define(03,64 52 67)}}}​ |
| /# In/Out:/ ~( -​- )~          |                      |                                                                                                           | {{{padding(00)}}}         |
| /#/                           |                      |                                                                                                           |                           |
| /# Dump working memory./      |                      |                                                                                                           |                           |
|                               |                      |                                                                                                           |                           |
| ~save ra;~                    | *addi* sp, sp, -8    | {{{imm(0xFF.8)}}}                    {{{rs1(0001.0)}}} {{{fn3(000)}}} {{{rd(0001.0)}}}  {{{op(0010011)}}} | ~13 01 81 FF~             |
|                               | *sd* ra, 0(sp)       | {{{off(0000000)}}} {{{rs2(0.0001)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 11 00~             |
|                               |                      |                                                                                                           |                           |
| /# Dump memory contents/      |                      |                                                                                                           |                           |
| /# using subroutine ~TYPE~./  |                      |                                                                                                           |                           |
| ~addr@a0 ← 0x0FFFFFE0;~       | *lui* a0, 0x10000    | {{{imm(0x10.00.0)}}}                                                  {{{rd(0101.0)}}}  {{{op(0110111)}}} | ~37 05 00 10~             |
|                               | *addi* a0, a0, -0x20 | {{{imm(0xFE.0)}}}                    {{{rs1(0101.0)}}} {{{fn3(000)}}} {{{rd(0101.0)}}}  {{{op(0010011)}}} | ~13 05 05 FE~             |
| ~u@a1 ← 0xA00;~               | *lui* a1, 0x00001    | {{{imm(0x00.00.1)}}}                                                  {{{rd(0101.1)}}}  {{{op(0110111)}}} | ~B7 15 00 00~             |
|                               | *addi* a1, a1, 0xA00 | {{{imm(0xA0.0)}}}                    {{{rs1(0101.1)}}} {{{fn3(000)}}} {{{rd(0101.1)}}}  {{{op(0010011)}}} | ~93 85 05 A0~             |
| /# Compile a call to ~TYPE~./ |                      |                                                                                                           |                           |
| ~call TYPE;~  /# Compiled./   | ---                  | ---                                                                                                       | {{{compile(54,T)}}}       |
|                               |                      |                                                                                                           |                           |
| ~restore ra;~                 | *ld* ra, 0(sp)       | {{{off(0x00.0)}}}                    {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{rd(0000.1)}}}  {{{op(0000011)}}} | ~83 30 01 00~             |
|                               | *addi* sp, sp, 8     | {{{imm(0x00.8)}}}                    {{{rs1(0001.0)}}} {{{fn3(000)}}} {{{rd(0001.0)}}}  {{{op(0010011)}}} | ~13 01 81 00~             |
|                               |                      |                                                                                                           |                           |
| ~return.~                     | *jalr* zero, 0(ra)   | {{{off(0x00.0)}}}                    {{{rs1(0000.1)}}} {{{fn3(000)}}} {{{rd(0000.0)}}}  {{{op(1100111)}}} | ~67 80 00 00~             |
|                               |                      |                                                                                                           |                           |

*** Subroutine ~reg~                                               :noexport:

#+CAPTION: Subroutine ~reg~ dumps the registers to ~STDOUT~ (RISC-V).
#+LABEL: tbl:forth:reg:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                           | *Instruction*        | *Encoding*                                                                                                | *Machine code*            |
|----------------------------------------+----------------------+-----------------------------------------------------------------------------------------------------------+---------------------------|
| /# Define:/ _~reg~_                    | ---                  | ---                                                                                                       | {{{define(03,72 65 67)}}} |
| /# In/Out:/ ~( -​- )~                   |                      |                                                                                                           | {{{padding(00)}}}         |
| /#/                                    |                      |                                                                                                           |                           |
| /# Dump the registers./                |                      |                                                                                                           |                           |
|                                        |                      |                                                                                                           |                           |
| /# Allocate stack space for all/       |                      |                                                                                                           |                           |
| /# 32 RISC-V general-purpose/          |                      |                                                                                                           |                           |
| /# registers and for the return/       |                      |                                                                                                           |                           |
| /# address (8 * 32 + 8)./              |                      |                                                                                                           |                           |
| ~save ra;~                             | *addi* sp, sp, -264  | {{{imm(0xEF.8)}}}                    {{{rs1(0001.0)}}} {{{fn3(000)}}} {{{rd(0001.0)}}}  {{{op(0010011)}}} | ~13 01 81 EF~             |
|                                        | *sd* ra, 256(sp)     | {{{off(0001000)}}} {{{rs2(0.0001)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 11 10~             |
|                                        |                      |                                                                                                           |                           |
| /# Push the 32 registers on the/       | *sd* zero,  0(sp)    | {{{off(0000000)}}} {{{rs2(0.0000)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 01 00~             |
| /# they're displayed like this:/       | *sd* a6,    0(sp)    | {{{off(0000000)}}} {{{rs2(1.0000)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 01 01~             |
| /# stack so that when printed/         | *sd* ra,    0(sp)    | {{{off(0000000)}}} {{{rs2(0.0001)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 11 00~             |
| /#/                                    | *sd* a7,    8(sp)    | {{{off(0000000)}}} {{{rs2(1.0001)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C 11 01~             |
| /#/{{{c(4)}}} ~·---------·~            | *sd* sp,   16(sp)    | {{{off(0000001)}}} {{{rs2(0.0010)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 21 02~             |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~x0 ¦ a6 ¦~ | *sd* s2,   24(sp)    | {{{off(0000001)}}} {{{rs2(1.0010)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 21 03~             |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~ra ¦ s7 ¦~ | *sd* gp,   32(sp)    | {{{off(0000001)}}} {{{rs2(0.0011)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 31 02~             |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~·· ¦ ·· ¦~ | *sd* s3,   40(sp)    | {{{off(0000001)}}} {{{rs2(1.0011)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C 31 03~             |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~a4 ¦ t5 ¦~ | *sd* tp,   48(sp)    | {{{off(0000010)}}} {{{rs2(0.0100)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 41 04~             |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~a5 ¦ p6 ¦~ | *sd* s4,   56(sp)    | {{{off(0000010)}}} {{{rs2(1.0100)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 41 05~             |
| /#/{{{c(4)}}} ~¦~​{{{c(1)}}}​~pc ¦ -- ¦~ | *sd* t0,   64(sp)    | {{{off(0000010)}}} {{{rs2(0.0101)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 51 04~             |
| /#/{{{c(4)}}} ~·---------·~            | *sd* s5,   72(sp)    | {{{off(0000010)}}} {{{rs2(1.0101)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C 51 05~             |
|                                        | *sd* t1,   80(sp)    | {{{off(0000011)}}} {{{rs2(0.0110)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 61 06~             |
|                                        | *sd* s6,   88(sp)    | {{{off(0000011)}}} {{{rs2(1.0110)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 61 07~             |
|                                        | *sd* t2,   96(sp)    | {{{off(0000011)}}} {{{rs2(0.0111)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 71 06~             |
|                                        | *sd* s7,  104(sp)    | {{{off(0000011)}}} {{{rs2(1.0111)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C 71 07~             |
|                                        | *sd* s0,  112(sp)    | {{{off(0000100)}}} {{{rs2(0.1000)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 81 08~             |
|                                        | *sd* s8,  120(sp)    | {{{off(0000100)}}} {{{rs2(1.1000)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 81 09~             |
|                                        | *sd* s1,  128(sp)    | {{{off(0000100)}}} {{{rs2(0.1001)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 91 08~             |
|                                        | *sd* s9,  136(sp)    | {{{off(0000100)}}} {{{rs2(1.1001)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C 91 09~             |
|                                        | *sd* a0,  144(sp)    | {{{off(0000101)}}} {{{rs2(0.1010)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 A1 0A~             |
|                                        | *sd* s10, 152(sp)    | {{{off(0000101)}}} {{{rs2(1.1010)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 A1 0B~             |
|                                        | *sd* a1,  160(sp)    | {{{off(0000101)}}} {{{rs2(0.1011)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 B1 0A~             |
|                                        | *sd* s11, 168(sp)    | {{{off(0000101)}}} {{{rs2(1.1011)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C B1 0B~             |
|                                        | *sd* a2,  176(sp)    | {{{off(0000110)}}} {{{rs2(0.1100)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 C1 0C~             |
|                                        | *sd* t3,  184(sp)    | {{{off(0000110)}}} {{{rs2(1.1100)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 C1 0D~             |
|                                        | *sd* a3,  192(sp)    | {{{off(0000110)}}} {{{rs2(0.1101)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 D1 0C~             |
|                                        | *sd* t4,  200(sp)    | {{{off(0000110)}}} {{{rs2(1.1101)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C D1 0D~             |
|                                        | *sd* a4,  208(sp)    | {{{off(0000111)}}} {{{rs2(0.1110)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0000.0)}}} {{{op(0100011)}}} | ~23 30 E1 0E~             |
|                                        | *sd* t5,  216(sp)    | {{{off(0000111)}}} {{{rs2(1.1110)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(0100.0)}}} {{{op(0100011)}}} | ~23 34 E1 0F~             |
|                                        | *sd* a5,  224(sp)    | {{{off(0000111)}}} {{{rs2(0.1111)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1000.0)}}} {{{op(0100011)}}} | ~23 38 F1 0E~             |
|                                        | *sd* t6,  232(sp)    | {{{off(0000111)}}} {{{rs2(1.1111)}}} {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{off(1100.0)}}} {{{op(0100011)}}} | ~23 3C F1 0F~             |
| /# Print top 256 stack bytes/          |                      |                                                                                                           |                           |
| /# using subroutine ~TYPE~./           |                      |                                                                                                           |                           |
| ~addr@a0 ← sp;~                        | *addi* a0, sp, 0     | {{{imm(0x00.0)}}}                    {{{rs1(0001.0)}}} {{{fn3(000)}}} {{{rd(0101.0)}}}  {{{op(0010011)}}} | ~13 05 01 00~             |
| ~u@a1 ← 256;~                          | *addi* a1, zero, 256 | {{{imm(0x10.0)}}}                    {{{rs1(0000.0)}}} {{{fn3(000)}}} {{{rd(0101.1)}}}  {{{op(0010011)}}} | ~93 05 00 10~             |
| ~call TYPE;~  /# Compiled./            | ---                  | ---                                                                                                       | {{{compile(54,T)}}}       |
|                                        |                      |                                                                                                           |                           |
| /# Restore return address and/         |                      |                                                                                                           |                           |
| /# clean the stack./                   |                      |                                                                                                           |                           |
| ~restore ra;~                          | *ld* ra, 256(sp)     | {{{off(0x10.0)}}}                    {{{rs1(0001.0)}}} {{{fn3(011)}}} {{{rd(0000.1)}}}  {{{op(0000011)}}} | ~83 30 01 10~             |
|                                        | *addi* sp, sp, 264   | {{{imm(0x10.8)}}}                    {{{rs1(0001.0)}}} {{{fn3(000)}}} {{{rd(0001.0)}}}  {{{op(0010011)}}} | ~13 01 81 10~             |
| ~return.~                              | *jalr* zero, 0(ra)   | {{{off(0x00.0)}}}                    {{{rs1(0000.1)}}} {{{fn3(000)}}} {{{rd(0000.0)}}}  {{{op(1100111)}}} | ~67 80 00 00~             |



** Text Interpreter

# ============= TEXT INTERPRETER
#
# Standard Forth handles input one line at a time.
# SmithForth's text interpreter is a simple interpreter in the standard Forth style.
# SVAL (see standard Forth's EVALUATE) interprets each line.
# REFILL fetches a line of input, including its trailing LF, and sets the input source state.
#     10000000 #IN      cell contains #characters in the current line.
#     10000008 TIB      cell contains the address where the current line begins.
#     10000010 >IN      cell contains #characters in the current line that have been parsed.
#     10000020 STATE    cell contains 0(Interpreting) or 1(Compiling).
#     10000028 Latest   cell contains the execution token (xt) of the latest defined Forth word.
# In Forth, to parse is to remove from the input stream. As a line is parsed, [>IN] increases from 0 to [#IN].
# Forth's "parse area" is the part of the line not yet parsed.

*** Subroutine ~REFILL~                                            :noexport:

#+CAPTION: Subroutine ~REFILL~ replenishes the /parse area/ by advancing ~TIB~ and ~#IN~ (RISC-V).
#+LABEL: tbl:forth:refill:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                     | *Instruction*       | *Encoding*                                                                                             | *&*            | *Machine code*                     |
|--------------------------------------------------+---------------------+--------------------------------------------------------------------------------------------------------+----------------+------------------------------------|
| /# Define:/ _~REFILL~_                           | ---                 | ---                                                                                                    |                | {{{define(06,52 45 46 49 4C 4C)}}} |
| /# In/Out:/ ~( -​- )~                             |                     |                                                                                                        |                |                                    |
| /#/                                              |                     |                                                                                                        |                |                                    |
| /# Advance ~TIB~ and ~#IN~ so/                   |                     |                                                                                                        |                |                                    |
| /# that ~[TIB, TIB + #IN)~ contains/             |                     |                                                                                                        |                |                                    |
| /# a new line to be parsed./                     |                     |                                                                                                        |                |                                    |
|                                                  |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# Advance ~TIB~​ by ~#IN~./           |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /#/                                   |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# Note:         ~#IN~ is ~VARS+0~,/  |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# {{{i(2.35)}}} ~TIB~ is ~VARS+8~,/  |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# {{{i(2.35)}}} ~>IN~ is ~VARS+16~./ |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} ~#in@t0 ← [#IN];~                     | ld t0, 0(s2)        | {{{off(0x000)}}}                    {{{rs1(00111)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 32 09 00~                      |
| {{{i(1)}}} ~tib@t1 ← [TIB] + #in@t0;~            | ld t1, 8(s2)        | {{{off(0x008)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 33 89 00~                      |
| {{{i(1)}}}                                       | add t1, t1, t0      | {{{fn7(0000000)}}} {{{rs2(00101)}}} {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(00110)}}}  {{{op(0110011)}}} |                | ~33 03 53 00~                      |
| {{{i(1)}}} ~[TIB] ← tib@t1;~                     | sd t1, 8(s2)        | {{{off(0000000)}}} {{{rs2(00110)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(01000)}}} {{{op(0100011)}}} |                | ~23 34 69 00~                      |
| {{{i(1)}}}                                       |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# Reset ~#IN~ and ~>IN~ to 0./       |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} ~#in@t0 ← 0;~                         | addi t0, zero, 0    | {{{imm(0x000)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 02 00 00~                      |
| {{{i(1)}}} ~[>IN] ← 0;~                          | sd zero, 16(s2)     | {{{off(0000000)}}} {{{rs2(00000)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(10000)}}} {{{op(0100011)}}} |                | ~23 38 09 00~                      |
| {{{i(1)}}}                                       |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# Advance ~#IN~ until just/          |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# after first ~LF~ character./       |                     |                                                                                                        |                |                                    |
| ~_begin:~                                        |                     |                                                                                                        | {{{addr(00)}}} |                                    |
| {{{i(1)}}} ~#in@t0++;~                           | addi t0, t0, 1      | {{{imm(0x001)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 82 12 00~                      |
| {{{i(1)}}} ~chr@t3 ← [tib@t1 + #in@t0 - 1];~     | add t2, t1, t0      | {{{fn7(0000000)}}} {{{rs2(00101)}}} {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(00111)}}}  {{{op(0110011)}}} |                | ~B3 03 53 00~                      |
| {{{i(1)}}}                                       | lbu t3, -1(t2)      | {{{off(0xfff)}}}                    {{{rs1(00111)}}} {{{fn3(100)}}} {{{rd(11100)}}}  {{{op(0000011)}}} |                | ~03 CE F3 FF~                      |
| {{{i(1)}}} /# Newline character?/                |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} ~if chr != 0x0A:~                     | addi t4, zero, 0x0A | {{{imm(0x00A)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(11101)}}}  {{{op(0010011)}}} |                | ~93 0E A0 00~                      |
| {{{i(2)}}}   ~goto _begin.~                      | bne t3, t4, -16     | {{{off(1111111)}}} {{{rs2(11101)}}} {{{rs1(11100)}}} {{{fn3(001)}}} {{{off(10001)}}} {{{op(1100011)}}} | {{{addr(10)}}} | ~E3 18 DE FF~                      |
| {{{i(1)}}}                                       |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} /# Store the new ~#IN~./              |                     |                                                                                                        |                |                                    |
| {{{i(1)}}} ~[#IN] ← #in@t0;~                     | sd t0, 0(s2)        | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 59 00~                      |
| {{{i(1)}}} ~return.~                             | jalr zero, 0(ra)    | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                      |

*** Subroutine ~seek~                                              :noexport:

#+CAPTION: Subroutine ~seek~ parses characters until it finds one in a given range (RISC-V).
#+LABEL: tbl:forth:seek:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                        | *Instruction*     | *Encoding*                                                                                             | *&*            | *Machine code*               |
|-----------------------------------------------------+-------------------+--------------------------------------------------------------------------------------------------------+----------------+------------------------------|
| /# Define:/ _~seek~_                                | ---               | ---                                                                                                    |                | {{{define(04,73 65 65 6B)}}} |
| /# In/Out:/    ~( low@a0 high@a1~                   |                   |                                                                                                        |                |                              |
| /#/{{{io}}}      ~"ccc"~                            |                   |                                                                                                        |                |                              |
| /#/{{{io--}}} ~-​- eof@a0 )~                         |                   |                                                                                                        |                |                              |
| /#/                                                 |                   |                                                                                                        |                |                              |
| /# Advance ~>IN~ until next/                        |                   |                                                                                                        |                |                              |
| /# char is within ~[low, high)~/                    |                   |                                                                                                        |                |                              |
| /# or parse area is empty./                         |                   |                                                                                                        |                |                              |
| /# Return ~1~ if the latter./                       |                   |                                                                                                        |                |                              |
|                                                     |                   |                                                                                                        |                |                              |
| {{{c(2)}}} ~eof@t5 ← 0;~                            | addi t5, zero, 0  | {{{imm(0x000)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(11110)}}}  {{{op(0010011)}}} |                | ~13 0F 00 00~                |
| {{{c(2)}}} ~high'@a1 ← high@a1~                     |                   |                                                                                                        |                |                              |
| {{{c(11)}}}         ~- low@a0;~                     | sub a1, a1, a0    | {{{fn7(0100000)}}} {{{rs2(01010)}}} {{{rs1(01011)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0110011)}}} |                | ~B3 85 A5 40~                |
| {{{c(2)}}} ~>in@t2 ← [>IN];~                        | ld t2, 16(s2)     | {{{off(0x010)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00111)}}}  {{{op(0000011)}}} |                | ~83 33 09 01~                |
| {{{c(2)}}} ~#in@t0 ← [#IN];~                        | ld t0, 0(s2)      | {{{off(0x000)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 32 09 00~                |
| ~_begin:~                                           |                   |                                                                                                        | {{{addr(00)}}} |                              |
| {{{c(2)}}} /# Is parse area empty?/                 |                   |                                                                                                        |                |                              |
| {{{c(2)}}} ~if >in@t2~ \ge{{{unsigned}}} ~#in@t0:~    |                   |                                                                                                        |                |                              |
| {{{c(4)}}}   ~goto _end_eof.~                       | bgeu t2, t0, 0x20 | {{{off(0000001)}}} {{{rs2(00101)}}} {{{rs1(00111)}}} {{{fn3(111)}}} {{{off(00000)}}} {{{op(1100011)}}} |                | ~63 F0 53 02~                |
| {{{c(2)}}} /# Get current character./               |                   |                                                                                                        |                |                              |
| {{{c(2)}}} ~tib@t1 ← [TIB];~                        | ld t1, 8(s2)      | {{{off(0x008)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 33 89 00~                |
| {{{c(2)}}} ~chr@t3 ← [tib@t1~                       |                   |                                                                                                        |                |                              |
| {{{c(10)}}}        ~+ >in@t2];~                     | add t4, t1, t2    | {{{fn7(0000000)}}} {{{rs2(00111)}}} {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(11101)}}}  {{{op(0110011)}}} |                | ~B3 0E 73 00~                |
| {{{c(2)}}}                                          | lbu t3, 0(t4)     | {{{off(0x000)}}}                    {{{rs1(11101)}}} {{{fn3(100)}}} {{{rd(11100)}}}  {{{op(0000011)}}} |                | ~03 CE 0E 00~                |
| {{{c(2)}}} /# Is ~chr~ in ~[low, high)~?/           |                   |                                                                                                        |                |                              |
| {{{c(2)}}} ~chr'@t3 ← chr@t3~                       |                   |                                                                                                        |                |                              |
| {{{c(10)}}}        ~- low@a0;~                      | sub t3, t3, a0    | {{{fn7(0100000)}}} {{{rs2(01010)}}} {{{rs1(11100)}}} {{{fn3(000)}}} {{{rd(11100)}}}  {{{op(0110011)}}} |                | ~33 0E AE 40~                |
| {{{c(2)}}} ~if chr'@t3~ \lt{{{unsigned}}} ~high'@a1:~ |                   |                                                                                                        |                |                              |
| {{{c(4)}}}   ~goto _end.~                           | bltu t3, a1, 0x10 | {{{off(0000000)}}} {{{rs2(01011)}}} {{{rs1(11100)}}} {{{fn3(110)}}} {{{off(10000)}}} {{{op(1100011)}}} | {{{addr(14)}}} | ~63 68 BE 00~                |
| {{{c(2)}}} /# Go to next character./                |                   |                                                                                                        |                |                              |
| {{{c(2)}}} ~>in@t2++;~                              | addi t2, t2, 1    | {{{imm(0x001)}}}                    {{{rs1(00111)}}} {{{fn3(000)}}} {{{rd(00111)}}}  {{{op(0010011)}}} |                | ~93 83 13 00~                |
| {{{c(2)}}} ~goto _begin.~                           | jal zero, 0xFE4   | {{{off(01111110010100000000)}}}                                     {{{rd(00000)}}}  {{{op(1101111)}}} | {{{addr(1C)}}} | ~6F F0 5F FE~                |
| ~_end_eof:~                                         |                   |                                                                                                        | {{{addr(20)}}} |                              |
| {{{c(2)}}} ~eof@t5 ← 1;~                            | addi t5, zero, 1  | {{{imm(0x001)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(11110)}}}  {{{op(0010011)}}} |                | ~13 0F 10 00~                |
| ~_end:~                                             |                   |                                                                                                        | {{{addr(24)}}} |                              |
| {{{c(2)}}} ~[>IN] ← >in@t2;~                        | sd t2, 16(s2)     | {{{off(0000000)}}} {{{rs2(00111)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(10000)}}} {{{op(0100011)}}} |                | ~23 38 79 00~                |
| {{{c(2)}}} ~eof@a0 ← eof@t5;~                       | addi a0, t5, 0    | {{{imm(0x000)}}}                    {{{rs1(11110)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} |                | ~13 05 0F 00~                |
| {{{c(2)}}} ~return.~                                | jalr zero, 0(ra)  | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                |

*** Subroutine ~PARSE~                                             :noexport:

#+CAPTION: Subroutine ~PARSE~ returns the address and size of a newly parsed string (RISC-V).
#+LABEL: tbl:forth:parse:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                    | *Instruction*    | *Encoding*                                                                                             | *&*            | *Machine code*                  |
|-------------------------------------------------+------------------+--------------------------------------------------------------------------------------------------------+----------------+---------------------------------|
| /# Define:/ _~PARSE~_                           | ---              | ---                                                                                                    |                | {{{define(04,50 41 52 53 45)}}} |
| /# In/Out:/    ~( low@a0 high@a1~               |                  |                                                                                                        |                | {{{padding(00)}}}               |
| /#/{{{io}}}     ​~"ccc<char>"~                   |                  |                                                                                                        |                |                                 |
| /#/{{{io--}}}​ ~-​- addr@a0 u@a1 )~               |                  |                                                                                                        |                |                                 |
| /#/                                             |                  |                                                                                                        |                |                                 |
| /# Parse until end of parse area/               |                  |                                                                                                        |                |                                 |
| /# or until a character in range/               |                  |                                                                                                        |                |                                 |
| /# ~[low, high)~ is encountered./               |                  |                                                                                                        |                |                                 |
| /# Return parsed string as its/                 |                  |                                                                                                        |                |                                 |
| /# address and length./                         |                  |                                                                                                        |                |                                 |
|                                                 |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} ~push ra;~                          | addi sp, sp, -16 | {{{imm(0xFF0)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 01 FF~                   |
| {{{c( 2)}}}                                     | sd ra, 8(sp)     | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(01000)}}} {{{op(0100011)}}} |                | ~23 34 11 00~                   |
| {{{c( 2)}}} ~start@t0 ← [>IN];~                 | ld t0, 16(s2)    | {{{off(0x010)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 32 09 01~                   |
| {{{c( 2)}}} ~push start@t0;~                    | sd t0, 0(sp)     | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 51 00~                   |
| {{{c( 2)}}} /# Compile a call to ~seek~/        |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} /# that advances ~>IN~./            |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} ~call seek;~  /# Compiled./         | ---              | ---                                                                                                    |                | {{{compile(73,s)}}}             |
| {{{c( 2)}}} ~end@t1 ← [>IN];~                   | ld t1, 16(s2)    | {{{off(0x010)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 33 09 01~                   |
| {{{c( 2)}}} ~restore start@t0;~                 | ld t0, 0(sp)     | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 32 01 00~                   |
| {{{c( 2)}}} /# Did ~seek()~ encounter the/      |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} /# end of the parse area?/          |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} ~if eof@a0 != 0:~                   |                  |                                                                                                        |                |                                 |
| {{{c( 4)}}}   ~goto _end.~                      | bne a0, zero, 12 | {{{off(0000000)}}} {{{rs2(00000)}}} {{{rs1(01010)}}} {{{fn3(001)}}} {{{off(01100)}}} {{{op(1100011)}}} | {{{addr(00)}}} | ~63 16 05 00~                   |
| {{{c( 2)}}} /# A character in range/            |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} /# ~[low, high)~ was found./        |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} ~[>IN]++;~  /# Skip it./            | addi t2, t1, 1   | {{{imm(0x001)}}}                    {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(00111)}}}  {{{op(0010011)}}} |                | ~93 03 13 00~                   |
| {{{c( 2)}}}                                     | sd t2, 16(s2)    | {{{off(0000000)}}} {{{rs2(00111)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(10000)}}} {{{op(0100011)}}} |                | ~23 38 79 00~                   |
| ~_end:~                                         |                  |                                                                                                        | {{{addr(0C)}}} |                                 |
| {{{c( 2)}}} /# Compute address and/             |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} /# length of parsed input./         |                  |                                                                                                        |                |                                 |
| {{{c( 2)}}} ~addr@a0 ← [TIB]~                   | ld t2, 8(s2)     | {{{off(0x008)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00111)}}}  {{{op(0000011)}}} |                | ~83 33 89 00~                   |
| {{{c(10)}}}         ~+ start@t0;~               | add a0, t2, t0   | {{{fn7(0000000)}}} {{{rs2(00101)}}} {{{rs1(00111)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0110011)}}} |                | ~33 85 53 00~                   |
| {{{c( 2)}}} ~u@a1~ ~←~ ~end@t1~ ~-~ ~start@t0;~ | sub a1, t1, t0   | {{{fn7(0100000)}}} {{{rs2(00101)}}} {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0110011)}}} |                | ~B3 05 53 40~                   |
| {{{c( 2)}}} ~pop ra;~                           | ld ra, 8(sp)     | {{{off(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                | ~83 30 81 00~                   |
| {{{c( 2)}}}                                     | addi sp, sp, 16  | {{{imm(0x010)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 01 01~                   |
| {{{c( 2)}}} ~return.~                           | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                   |

*** Subroutine ~pname~                                             :noexport:

#+CAPTION: Subroutine ~pname~ parses a token and returns it as a string (RISC-V).
#+LABEL: tbl:forth:pname:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                       | *Instruction*        | *Encoding*                                                                                             | *Machine code*                  |
|------------------------------------+----------------------+--------------------------------------------------------------------------------------------------------+---------------------------------|
| /# Define:/ _~pname~_              | ---                  | ---                                                                                                    | {{{define(05,70 6E 61 6D 65)}}} |
| /# In/Out:/   ~( "<SPCs>ccc<SPC>"~ |                      |                                                                                                        | {{{padding(00)}}}               |
| /#/{{{io--}}} ~-​- addr@a0 u@a1 )~  |                      |                                                                                                        |                                 |
| /#/                                |                      |                                                                                                        |                                 |
| /# Parse a token: first skip over/ |                      |                                                                                                        |                                 |
| /# non-printable characters, then/ |                      |                                                                                                        |                                 |
| /# parse the word itself./         |                      |                                                                                                        |                                 |
|                                    |                      |                                                                                                        |                                 |
| ~push ra;~                         | addi sp, sp, -8      | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} | ~13 01 81 FF~                   |
|                                    | sd ra, 0(sp)         | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 30 11 00~                   |
| /# Skip non-printables./           |                      |                                                                                                        |                                 |
| ~low@a0 ← 0x21;~   /# Char ~'!'~./ | addi a0, zero, 0x021 | {{{imm(0x021)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} | ~13 05 10 02~                   |
| ~high@a1 ← 0x7F;~  /# Char ~DEL~./ | addi a1, zero, 0x07F | {{{imm(0x07F)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0010011)}}} | ~93 05 F0 07~                   |
| ~call seek;~  /# Compiled./        | ---                  | ---                                                                                                    | {{{compile(73,s)}}}             |
| /# Parse token, stopping at first/ |                      |                                                                                                        |                                 |
| /# non-printable character./       |                      |                                                                                                        |                                 |
| ~low@a0 ← 0x7F;~                   | addi a0, zero, 0x7F  | {{{imm(0x07F)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} | ~13 05 F0 07~                   |
| ~high@a1 ← 0x21;~                  | addi a1, zero, 0x21  | {{{imm(0x021)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0010011)}}} | ~93 05 10 02~                   |
| ~call PARSE;~  /# Compiled./       | ---                  | ---                                                                                                    | {{{compile(50,P)}}}             |
| ~pop ra;~                          | ld ra, 0(sp)         | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} | ~83 30 01 00~                   |
|                                    | addi sp, sp, 8       | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} | ~13 01 81 00~                   |
| ~return.~                          | jalr zero, 0(ra)     | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~                   |


*** Subroutine ~[~                                                 :noexport:

#+CAPTION: Subroutine ~'['~ changes Forth's ~STATE~ to interpreting (RISC-V).
#+LABEL: tbl:forth:lbracket:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                      | *Instruction*    | *Encoding*                                                                                             | *Machine code*      |
|-----------------------------------+------------------+--------------------------------------------------------------------------------------------------------+---------------------|
| /# Define immediate:/ _~[~_       | ---              | ---                                                                                                    | {{{define(81,5B)}}} |
| /# In/Out:/ ~( -​- )~              |                  |                                                                                                        | {{{padding(00)}}}   |
| /#/                               |                  |                                                                                                        |                     |
| /# Switch to interpreting state./ |                  |                                                                                                        |                     |
|                                   |                  |                                                                                                        |                     |
| /# Set ~STATE~ to 0./             |                  |                                                                                                        |                     |
| ~[STATE] ← 0;~                    | sd zero, 32(s2)  | {{{off(0000001)}}} {{{rs2(00000)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 30 09 02~       |
| ~return.~                         | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~       |

*** Subroutine ~]~                                                 :noexport:

#+CAPTION: Subroutine ~']'~ changes Forth's ~STATE~ to compiling (RISC-V).
#+LABEL: tbl:forth:rbracket:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                   | *Instruction*    | *Encoding*                                                                                             | *Machine code*      |
|--------------------------------+------------------+--------------------------------------------------------------------------------------------------------+---------------------|
| /# Define:/ _~]~_              | ---              | ---                                                                                                    | {{{define(01,5D)}}} |
| /# In/Out:/ ~( -​- )~           |                  |                                                                                                        | {{{padding(00)}}}   |
| /#/                            |                  |                                                                                                        |                     |
| /# Switch to compiling state./ |                  |                                                                                                        |                     |
|                                |                  |                                                                                                        |                     |
| /# Set ~STATE~ to 1./          |                  |                                                                                                        |                     |
| ~[STATE] ← 1;~                 | addi t0, zero, 1 | {{{imm(0x001)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} | ~93 02 10 00~       |
|                                | sd t0, 32(s2)    | {{{off(0000001)}}} {{{rs2(00101)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 30 59 02~       |
| ~return.~                      | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~       |

*** Subroutine ~\~                                                 :noexport:

#+CAPTION: Subroutine ~'\'~ implements line comments (RISC-V).
#+LABEL: tbl:forth:backslash:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                    | *Instruction*    | *Encoding*                                                                                             | *Machine code*      |
|---------------------------------+------------------+--------------------------------------------------------------------------------------------------------+---------------------|
| /# Define immediate:/ _~\~_     | ---              | ---                                                                                                    | {{{define(81,5C)}}} |
| /# In/Out:/ ~( "ccc<eol>" -​- )~ |                  |                                                                                                        | {{{padding(00)}}}   |
| /#/                             |                  |                                                                                                        |                     |
| /# Consumes all characters/     |                  |                                                                                                        |                     |
| /# left on the current line./   |                  |                                                                                                        |                     |
|                                 |                  |                                                                                                        |                     |
| ~#in@t0 ← [#IN];~               | ld t0, 0(s2)     | {{{off(0x000)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} | ~83 32 09 00~       |
| ~[>IN] ← #in@t0;~               | sd t0, 16(s2)    | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(10000)}}} {{{op(0100011)}}} | ~23 38 59 00~       |
| ~return.~                       | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~       |

*** Subroutine ~(~                                                 :noexport:

#+CAPTION: Subroutine ~'('~ implements inline comments, ending with a corresponding ~')'~ (RISC-V).
#+LABEL: tbl:forth:lparen:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                               | *Instruction*     | *Encoding*                                                                                             |   | *Machine code*      |
|--------------------------------------------+-------------------+--------------------------------------------------------------------------------------------------------+---+---------------------|
| /# Define immediate:/ _~(~_                | ---               | ---                                                                                                    |   | {{{define(81,28)}}} |
| /# In/Out:/ ~( "ccc<rparen>" -​- )~         |                   |                                                                                                        |   | {{{padding(00)}}}   |
| /#/                                        |                   |                                                                                                        |   |                     |
| /# Consume characters until a ')' occurs./ |                   |                                                                                                        |   |                     |
|                                            |                   |                                                                                                        |   |                     |
| ~push ra;~                                 | addi sp, sp, -8   | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |   | ~13 01 81 FF~       |
|                                            | sd ra, 0(sp)      | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |   | ~23 30 11 00~       |
| ~low@a0 ← ')';~                            | addi a0, zero, 41 | {{{imm(0x029)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} |   | ~13 05 90 02~       |
| ~high@a1 ← ')' + 1;~                       | addi a1, zero, 42 | {{{imm(0x02A)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0010011)}}} |   | ~93 05 A0 02~       |
| ~call PARSE;~  /# Compiled./               | ---               | ---                                                                                                    |   | {{{compile(50,P)}}} |
| ~pop ra;~                                  | ld ra, 0(sp)      | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |   | ~83 30 01 00~       |
|                                            | addi sp, sp, 8    | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |   | ~13 01 81 00~       |
| ~return.~                                  | jalr zero, 0(ra)  | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |   | ~67 80 00 00~       |


*** Subroutine ~:~                                                 :noexport:

#+CAPTION: Subroutine ~':'~ (colon) begins compiling a word after setting up its dictionary entry (RISC-V).
#+LABEL: tbl:forth:colon:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                                                                          | *Instruction*      | *Encoding*                                                                                             | *Machine code*      |
|---------------------------------------------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+---------------------|
| /# Define:/ _~':'~_                                                                   | ---                | ---                                                                                                    | {{{define(01,3A)}}} |
| /# In/Out:/ ~( "<SPCs>ccc<SPC>" -​- )~                                                 |                    |                                                                                                        | {{{padding(00)}}}   |
| /#/                                                                                   |                    |                                                                                                        |                     |
| /# Start a word definition and enter/                                                 |                    |                                                                                                        |                     |
| /# compiling mode. Temporarily hide/                                                  |                    |                                                                                                        |                     |
| /# the word being defined until its/                                                  |                    |                                                                                                        |                     |
| /# definition is completed by ~';'~./                                                 |                    |                                                                                                        |                     |
| /#/                                                                                   |                    |                                                                                                        |                     |
| /# RISC-V only: Because calls do not/                                                 |                    |                                                                                                        |                     |
| /# implicitly push the return address/                                                |                    |                                                                                                        |                     |
| /# on the stack, we have to generate/                                                 |                    |                                                                                                        |                     |
| /# a prologue to the word that does it./                                              |                    |                                                                                                        |                     |
|                                                                                       |                    |                                                                                                        |                     |
| ~push ra;~                                                                            | addi sp, sp, -8    | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} | ~13 01 81 FF~       |
|                                                                                       | sd ra, 0(sp)       | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 30 11 00~       |
| /# Parse word name and create/                                                        |                    |                                                                                                        |                     |
| /# its dictionary entry./                                                             |                    |                                                                                                        |                     |
| ~call pname;~  /# Compiled./                                                          | ---                | ---                                                                                                    | {{{compile(70,p)}}} |
| ~INPUT@s0 ← addr@a0;~                                                                 | addi s0, a0, 0     | {{{imm(0x000)}}}                    {{{rs1(01010)}}} {{{fn3(000)}}} {{{rd(01000)}}}  {{{op(0010011)}}} | ~13 04 05 00~       |
| ~latest@a0 ← [LATEST];~                                                               | ld a0, 40(s2)      | {{{off(0x028)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(01010)}}}  {{{op(0000011)}}} | ~03 35 89 02~       |
| /# Word length ~u@a1~ is forwarded/                                                   |                    |                                                                                                        |                     |
| /# as ~flag@a1~ to ~Head~./                                                           |                    |                                                                                                        |                     |
| ~call Head;~  /# Compiled./                                                           | ---                | ---                                                                                                    | {{{compile(48,H)}}} |
|                                                                                       |                    |                                                                                                        |                     |
| /# Set the ~HIDDEN~ bit (~0x40~) on/                                                  |                    |                                                                                                        |                     |
| /# the dictionary entry's flag./                                                      |                    |                                                                                                        |                     |
| ~xt@t0 ← [LATEST];~                                                                   | ld t0, 40(s2)      | {{{off(0x028)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} | ~83 32 89 02~       |
| ~flag@t1 ← [xt@t0 + 16];~                                                             | lbu t1, 16(t0)     | {{{off(0x010)}}}                    {{{rs1(00101)}}} {{{fn3(100)}}} {{{rd(00110)}}}  {{{op(0000011)}}} | ~03 C3 02 01~       |
| ~flag@t1~ \vert{}​~=~ ~0b01000000;~  /# ~HIDDEN~./                                           | ori t1, t1, 0x040  | {{{imm(0x040)}}}                    {{{rs1(00110)}}} {{{fn3(110)}}} {{{rd(00110)}}}  {{{op(0010011)}}} | ~13 63 03 04~       |
| ~[xt@t0 + 16] ← flag@t1;~                                                             | sb t1, 16(t0)      | {{{off(0000000)}}} {{{rs2(00110)}}} {{{rs1(00101)}}} {{{fn3(000)}}} {{{off(10000)}}} {{{op(0100011)}}} | ~23 88 62 00~       |
|                                                                                       |                    |                                                                                                        |                     |
| /# Generate a prologue that pushes/                                                   |                    |                                                                                                        |                     |
| /# register ~ra~ on the stack:/                                                       |                    |                                                                                                        |                     |
| /# 1. Allocate stack space:/                                                          |                    |                                                                                                        |                     |
| /# – instruction:/ ~addi sp, sp, -8~                                                  |                    |                                                                                                        |                     |
| /# – encoded:/ {{{imm(0xFF8)}}} {{{rs1(00010)}}}                                      |                    |                                                                                                        |                     |
| /#/{{{i(5.1)}}} \(\hookrightarrow\) {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                    |                                                                                                        |                     |
| /# 2. Save ~ra~ on the stack:/                                                        |                    |                                                                                                        |                     |
| /# – instruction:/ ~sd ra, 0(sp)~                                                     |                    |                                                                                                        |                     |
| /# – enc.:/ {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}}                      |                    |                                                                                                        |                     |
| /#/{{{i(3.5)}}} \(\hookrightarrow\) {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                    |                                                                                                        |                     |
| /# Thus we generate code as follows:/                                                 |                    |                                                                                                        |                     |
| /#/{{{c(2)}}}​~13·01·81·FF~                                                              |                    |                                                                                                        |                     |
| /#/{{{c(2)}}}​~23·30·11·00~                                                               |                    |                                                                                                        |                     |
|                                                                                       |                    |                                                                                                        |                     |
| /# 1. Assemble and write ~addi~./                                                     |                    |                                                                                                        |                     |
| ~t0 ← 0xFF810113;~                                                                    | lui t0, 0xFF810    | {{{imm(0xFF810)}}}                                                  {{{rd(00101)}}}  {{{op(0110111)}}} | ~B7 02 81 FF~       |
|                                                                                       | addi t0, t0, 0x113 | {{{imm(0x113)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} | ~93 82 32 11~       |
| ~[OUTPUT@s1] ← t0;~                                                                   | sw t0, 0(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 A0 54 00~       |
|                                                                                       |                    |                                                                                                        |                     |
| /# 2. Assemble and write ~sd~./                                                       |                    |                                                                                                        |                     |
| ~t0 ← 0x00113023;~                                                                    | lui t0, 0x00113    | {{{imm(0x00113)}}}                                                  {{{rd(00101)}}}  {{{op(0110111)}}} | ~B7 32 11 00~       |
|                                                                                       | addi t0, t0, 0x023 | {{{imm(0x023)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} | ~93 82 32 02~       |
| ~[OUTPUT@s1 + 4] ← t0;~                                                               | sw t0, 4(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00100)}}} {{{op(0100011)}}} | ~23 A2 54 00~       |
| ~OUTPUT@s1 += 8;~                                                                     | addi s1, s1, 8     | {{{imm(0x008)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} | ~93 84 84 00~       |
|                                                                                       |                    |                                                                                                        |                     |
| /# Switch to compiling state./                                                        |                    |                                                                                                        |                     |
| ~call ];~  /# Compiled./                                                              | ---                | ---                                                                                                    | {{{compile(5D,])}}} |
| ~pop ra;~                                                                             | ld ra, 0(sp)       | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} | ~83 30 01 00~       |
|                                                                                       | addi sp, sp, 8     | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} | ~13 01 81 00~       |
| ~return.~                                                                             | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~       |

*** Subroutine ~;~                                                 :noexport:

#+CAPTION: Subroutine ~';'~ (semicolon) wraps up a colon definition and goes back to interpreting (RISC-V).
#+LABEL: tbl:forth:semicolon:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                                                                          | *Instruction*      | *Encoding*                                                                                             |   | *Machine code*      |
|---------------------------------------------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+---+---------------------|
| /# Define immediate:/ _~;~_                                                           | ---                | ---                                                                                                    |   | {{{define(81,3B)}}} |
| /# In/Out:/ ~( C: -​- )~                                                               |                    |                                                                                                        |   | {{{padding(00)}}}   |
| /#/                                                                                   |                    |                                                                                                        |   |                     |
| /# Finalize a colon definition and/                                                   |                    |                                                                                                        |   |                     |
| /# switch back to interpreting state./                                                |                    |                                                                                                        |   |                     |
| /#/                                                                                   |                    |                                                                                                        |   |                     |
| /# RISC-V only: similar to the/                                                       |                    |                                                                                                        |   |                     |
| /# prologue in ~`:`~, we need to/                                                     |                    |                                                                                                        |   |                     |
| /# compile an epilogue that pops/                                                     |                    |                                                                                                        |   |                     |
| /# the return address off the stack./                                                 |                    |                                                                                                        |   |                     |
|                                                                                       |                    |                                                                                                        |   |                     |
| /# Generate an epilogue as follows:/                                                  |                    |                                                                                                        |   |                     |
| /# 1. Restore return address register:/                                               |                    |                                                                                                        |   |                     |
| /# – instruction:/ ~ld ra, 0(sp)~                                                     |                    |                                                                                                        |   |                     |
| /# – enc.:/ {{{off(0x000)}}} {{{rs1(00010)}}}                                         |                    |                                                                                                        |   |                     |
| /#/{{{i(3.5)}}} \(\hookrightarrow\) {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                    |                                                                                                        |   |                     |
| /# 2. Deallocate stack space:/                                                        |                    |                                                                                                        |   |                     |
| /# – instruction:/ ~addi sp, sp, 8~                                                   |                    |                                                                                                        |   |                     |
| /# – enc.:/ {{{imm(0x008)}}} {{{rs1(00010)}}}                                         |                    |                                                                                                        |   |                     |
| /#/{{{i(3.5)}}} \(\hookrightarrow\) {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                    |                                                                                                        |   |                     |
| /# 3. Return to calling word:/                                                        |                    |                                                                                                        |   |                     |
| /# – instruction:/ ~jalr zero, 0(ra)~                                                 |                    |                                                                                                        |   |                     |
| /# – enc.:/ {{{off(0x000)}}} {{{rs1(00001)}}}                                         |                    |                                                                                                        |   |                     |
| /#/{{{i(3.5)}}} \(\hookrightarrow\) {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                    |                                                                                                        |   |                     |
| /#/                                                                                   |                    |                                                                                                        |   |                     |
| /# Thus we generate code as follows:/                                                 |                    |                                                                                                        |   |                     |
| /#/{{{c(2)}}}​~83·30·01·00~                                                            |                    |                                                                                                        |   |                     |
| /#/{{{c(2)}}}​~13·01·81·00~                                                            |                    |                                                                                                        |   |                     |
| /#/{{{c(2)}}}​~67·80·00·00~                                                            |                    |                                                                                                        |   |                     |
|                                                                                       |                    |                                                                                                        |   |                     |
| ~push ra;~                                                                            | addi sp, sp, -8    | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |   | ~13 01 81 FF~       |
|                                                                                       | sd ra, 0(sp)       | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |   | ~23 30 11 00~       |
| /# 1. Assemble and write ~ld~./                                                       |                    |                                                                                                        |   |                     |
| ~t0 ← 0x00013083;~                                                                    | lui t0, 0x00013    | {{{imm(0x00013)}}}                                                  {{{rd(00101)}}}  {{{op(0110111)}}} |   | ~B7 32 01 00~       |
|                                                                                       | addi t0, t0, 0x083 | {{{imm(0x083)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |   | ~93 82 32 08~       |
| ~[OUTPUT@s1] ← t0;~                                                                   | sw t0, 0(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00000)}}} {{{op(0100011)}}} |   | ~23 A0 54 00~       |
|                                                                                       |                    |                                                                                                        |   |                     |
| /# 2. Assemble and write ~addi~./                                                     |                    |                                                                                                        |   |                     |
| ~t0 ← 0x00810113;~                                                                    | lui t0, 0x00810    | {{{imm(0x00810)}}}                                                  {{{rd(00101)}}}  {{{op(0110111)}}} |   | ~B7 02 81 00~       |
|                                                                                       | addi t0, t0, 0x113 | {{{imm(0x113)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |   | ~93 82 32 11~       |
| ~[OUTPUT@s1 + 4] ← t0;~                                                               | sw t0, 4(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00100)}}} {{{op(0100011)}}} |   | ~23 A2 54 00~       |
|                                                                                       |                    |                                                                                                        |   |                     |
| /# 3. Assemble and write ~jalr~./                                                     |                    |                                                                                                        |   |                     |
| ~t0 ← 0x00008067;~                                                                    | lui t0, 0x00008    | {{{imm(0x00008)}}}                                                  {{{rd(00101)}}}  {{{op(0110111)}}} |   | ~B7 82 00 00~       |
|                                                                                       | addi t0, t0, 0x067 | {{{imm(0x067)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |   | ~93 82 72 06~       |
| ~[OUTPUT@s1 + 8] ← t0;~                                                               | sw t0, 8(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(01000)}}} {{{op(0100011)}}} |   | ~23 A4 54 00~       |
| ~OUTPUT@s1 += 12;~                                                                    | addi s1, s1, 12    | {{{imm(0x00C)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |   | ~93 84 C4 00~       |
|                                                                                       |                    |                                                                                                        |   |                     |
| /# Clear the ~HIDDEN~ bit (~0x40~) on/                                                |                    |                                                                                                        |   |                     |
| /# the dictionary entry's flag./                                                      |                    |                                                                                                        |   |                     |
| ~xt@t0 ← [LATEST];~                                                                   | ld t0, 40(s2)      | {{{off(0x028)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |   | ~83 32 89 02~       |
| ~flag@t1 ← [xt@t0 + 16];~                                                             | lbu t1, 16(t0)     | {{{off(0x010)}}}                    {{{rs1(00101)}}} {{{fn3(100)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |   | ~03 C3 02 01~       |
| ~flag@t1 &= 0b10111111;~                                                              | andi t1, t1, 0xBF  | {{{imm(0x0BF)}}}                    {{{rs1(00110)}}} {{{fn3(111)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |   | ~13 73 F3 0B~       |
| ~[xt@t0 + 16] ← flag@t1;~                                                             | sb t1, 16(t0)      | {{{off(0000000)}}} {{{rs2(00110)}}} {{{rs1(00101)}}} {{{fn3(000)}}} {{{off(10000)}}} {{{op(0100011)}}} |   | ~23 88 62 00~       |
|                                                                                       |                    |                                                                                                        |   |                     |
| /# Switch to interpreting state./                                                     |                    |                                                                                                        |   |                     |
| ~call [;~  /# Compiled./                                                              | ---                | ---                                                                                                    |   | {{{compile(5B,[)}}} |
| ~pop ra;~                                                                             | ld ra, 0(sp)       | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |   | ~83 30 01 00~       |
|                                                                                       | addi sp, sp, 8     | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |   | ~13 01 81 00~       |
| ~return.~                                                                             | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |   | ~67 80 00 00~       |

*** Subroutine ~.~                                                 :noexport:

#+CAPTION: Subroutine ~'.'~ compiles a byte from the stack to ~OUTPUT~ (RISC-V).
#+LABEL: tbl:forth:.:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                     | *Instruction*    | *Encoding*                                                                                             | *Machine code*      |
|----------------------------------+------------------+--------------------------------------------------------------------------------------------------------+---------------------|
| /# Define:/ _~.~_                | ---              | ---                                                                                                    | {{{define(01,2E)}}} |
| /# In/Out:/ ~( u -​- )~           |                  |                                                                                                        | {{{padding(00)}}}   |
| /#/                              |                  |                                                                                                        |                     |
| /# Non-standard name for ~C,~./  |                  |                                                                                                        |                     |
| /#/                              |                  |                                                                                                        |                     |
| /# Pop a byte off the stack and/ |                  |                                                                                                        |                     |
| /# write it to ~OUTPUT~./        |                  |                                                                                                        |                     |
|                                  |                  |                                                                                                        |                     |
| ~byte@t0 ← [STACK@s3]~           | lbu t0, 0(s3)    | {{{off(0x000)}}}                    {{{rs1(10011)}}} {{{fn3(100)}}} {{{rd(00101)}}}  {{{op(0000011)}}} | ~83 C2 09 00~       |
| ~STACK@s3 += 8;~                 | addi s3, s3, 8   | {{{imm(0x008)}}}                    {{{rs1(10011)}}} {{{fn3(000)}}} {{{rd(10011)}}}  {{{op(0010011)}}} | ~93 89 89 00~       |
| ~[OUTPUT@s1++] ← byte@t0;~       | sb t0, 0(s1)     | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(000)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 80 54 00~       |
|                                  | addi s1, s1, 1   | {{{imm(0x001)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} | ~93 84 14 00~       |
| ~return.~                        | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~       |

#+CAPTION: Subroutine ~'....'~ compiles a 32-bit instruction from the stack to ~OUTPUT~ (RISC-V).
#+LABEL: tbl:forth:....:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                         | *Instruction*    | *Encoding*                                                                                             |   | *Machine code*      |
|--------------------------------------+------------------+--------------------------------------------------------------------------------------------------------+---+---------------------|
| /# Define:/ _~....~_                 | ---              | ---                                                                                                    |   | {{{define(01,2E)}}} |
| /# In/Out:/ ~( instr -​- )~           |                  |                                                                                                        |   | {{{padding(00)}}}   |
| /#/                                  |                  |                                                                                                        |   |                     |
| /# Pop an instruction off the stack/ |                  |                                                                                                        |   |                     |
| /# and write it to ~OUTPUT~./        |                  |                                                                                                        |   |                     |
|                                      |                  |                                                                                                        |   |                     |
| ~instr@t0 ← [STACK@s3]~              | lwu t0, 0(s3)    | {{{off(0x000)}}}                    {{{rs1(10011)}}} {{{fn3(110)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |   | ~83 E2 09 00~       |
| ~STACK@s3 += 8;~                     | addi s3, s3, 8   | {{{imm(0x008)}}}                    {{{rs1(10011)}}} {{{fn3(000)}}} {{{rd(10011)}}}  {{{op(0010011)}}} |   | ~93 89 89 00~       |
| ~[OUTPUT@s1++4] ← instr@t0;~         | sw t0, 0(s1)     | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00000)}}} {{{op(0100011)}}} |   | ~23 A0 54 00~       |
|                                      | addi s1, s1, 4   | {{{imm(0x004)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} |   | ~93 84 44 00~       |
| ~return.~                            | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |   | ~67 80 00 00~       |

*** Subroutine ~LIT~                                               :noexport:

#+CAPTION: Subroutine ~LIT~ compiles a literal byte into a word definition (RISC-V).
#+LABEL: tbl:forth:lit:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                                                                                      | *Instruction*      | *Encoding*                                                                                             | *Machine code*            |
|---------------------------------------------------------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+---------------------------|
| /# Define immediate:/ _~LIT~_                                                                     | ---                | ---                                                                                                    | {{{define(83,4C 49 54)}}} |
| /# In/Out:/ ~( C: x -​- ) ( -- x )~                                                                |                    |                                                                                                        | {{{padding(00)}}}         |
| /#/                                                                                               |                    |                                                                                                        |                           |
| /# Pop a byte off the data stack at compile time./                                                |                    |                                                                                                        |                           |
| /# Compile it as the immediate part of a push/                                                    |                    |                                                                                                        |                           |
| /# sequence that inserts it on the data stack/                                                    |                    |                                                                                                        |                           |
| /# when the word being defined is executed./                                                      |                    |                                                                                                        |                           |
|                                                                                                   |                    |                                                                                                        |                           |
| /# Let ~lit~ be the top byte on the data stack./                                                  |                    |                                                                                                        |                           |
| /# We will generate three instructions that will/                                                 |                    |                                                                                                        |                           |
| /# effectively push ~lit~ on the data stack at/                                                   |                    |                                                                                                        |                           |
| /# execution time:/                                                                               |                    |                                                                                                        |                           |
| /# – an ~addi~ instruction that loads ~lit~ into/                                                 |                    |                                                                                                        |                           |
| /# register ~t0~ as an immediate value;/                                                          |                    |                                                                                                        |                           |
| /# – a pair of `addi` & `sd` instructions that/                                                   |                    |                                                                                                        |                           |
| /# push register ~t0~ on the data stack./                                                         |                    |                                                                                                        |                           |
|                                                                                                   |                    |                                                                                                        |                           |
| /# 1. Load ~lit~ in register ~t0~:/                                                               |                    |                                                                                                        |                           |
| /# – effect:/ ~t0 ← 0x0XY;~  /# ~XY~ stands for ~lit~./                                           |                    |                                                                                                        |                           |
| /# – instruction:/ ~addi t0, zero, 0x0XY~                                                         |                    |                                                                                                        |                           |
| /# – encoded:/ {{{imm(0x0XY)}}} {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00101)}}} {{{op(0010011)}}} |                    |                                                                                                        |                           |
| /# – bits:/ ~0000xxxx·yyyy0000·00000010·10010011~                                                 |                    |                                                                                                        |                           |
| ~lit@t0 ← [STACK@s3];~                                                                            | lbu t0, 0(s3)      | {{{off(0x000)}}}                    {{{rs1(10011)}}} {{{fn3(100)}}} {{{rd(00101)}}}  {{{op(0000011)}}} | ~83 C2 09 00~             |
| ~STACK@s3 += 8;~                                                                                  | addi s3, s3, 8     | {{{imm(0x008)}}}                    {{{rs1(10011)}}} {{{fn3(000)}}} {{{rd(10011)}}}  {{{op(0010011)}}} | ~93 89 89 00~             |
| ~t0 <<= 20;~                                                                                      | slli t0, t0, 20    | ~000000~​{{{shamt(010100)}}}         {{{rs1(00101)}}} {{{fn3(001)}}} {{{rd(00101)}}}  {{{op(0010011)}}} | ~93 92 42 01~             |
| ~t0~ \vert​~= 0x293;~                                                                                  | ori t0, t0, 0x293  | {{{imm(0x293)}}}                    {{{rs1(00101)}}} {{{fn3(110)}}} {{{rd(00101)}}}  {{{op(0010011)}}} | ~93 E2 32 29~             |
| ~[OUTPUT@s1] ← t0;~                                                                               | sw t0, 0(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 A0 54 00~             |
|                                                                                                   |                    |                                                                                                        |                           |
| /# 2. Allocate stack space:/                                                                      |                    |                                                                                                        |                           |
| /# – effect:/ ~STACK@s3 -= 8;~                                                                    |                    |                                                                                                        |                           |
| /# – instruction:/ ~addi s3, s3, -8~                                                              |                    |                                                                                                        |                           |
| /# – encoded:/ {{{imm(0xFF8)}}} {{{rs1(10011)}}} {{{fn3(000)}}} {{{rd(10011)}}} {{{op(0010011)}}} |                    |                                                                                                        |                           |
| ~t0 ← 0xFF898993;~                                                                                | lui t0, 0xFF899    | {{{imm(0xFF899)}}}                                                  {{{rd(00101)}}}  {{{op(0110111)}}} | ~B7 92 89 FF~             |
|                                                                                                   | addi t0, t0, 0x993 | {{{imm(0x993)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} | ~93 82 32 99~             |
| ~[OUTPUT@s1 + 4] ← t0;~                                                                           | sw t0, 4(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(00100)}}} {{{op(0100011)}}} | ~23 A2 54 00~             |
|                                                                                                   |                    |                                                                                                        |                           |
| /# 3. Write register ~t0~ to stack:/                                                              |                    |                                                                                                        |                           |
| /# – effect:/ ~[STACK@s3] ← t0;~                                                                  |                    |                                                                                                        |                           |
| /# – instruction:/ ~sd t0, 0(s3)~                                                                 |                    |                                                                                                        |                           |
| /# – encoded:/ {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(10011)}}}                               |                    |                                                                                                        |                           |
| /#/ {{{i(4.7)}}} \(\hookrightarrow\) {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}}            |                    |                                                                                                        |                           |
| ~t0 ← 0x0059B023;~                                                                                | lui t0, 0x0059B    | {{{imm(0x0059B)}}}                                                  {{{rd(00101)}}}  {{{op(0110111)}}} | ~B7 B2 59 00~             |
|                                                                                                   | addi t0, t0, 0x023 | {{{imm(0x023)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} | ~93 82 32 02~             |
| ~[OUTPUT@s1 + 8] ← t0;~                                                                           | sw t0, 8(s1)       | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(01001)}}} {{{fn3(010)}}} {{{off(01000)}}} {{{op(0100011)}}} | ~23 A4 54 00~             |
| ~OUTPUT@s1 += 12;~                                                                                | addi s1, s1, 12    | {{{imm(0x00C)}}}                    {{{rs1(01001)}}} {{{fn3(000)}}} {{{rd(01001)}}}  {{{op(0010011)}}} | ~93 84 C4 00~             |
| ~return.~                                                                                         | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~             |


*** Subroutine ~xt=~                                               :noexport:

#+CAPTION: Subroutine ~xt=~ compares an execution token's name with a given string (RISC-V).
#+LABEL: tbl:forth:xt=:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                     | *Instruction*      | *Encoding*                                                                                             | *&*            | *Machine code*            |
|--------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+----------------+---------------------------|
| /# Define:/ _~xt=~_                              | ---                | ---                                                                                                    |                | {{{define(03,78 74 3D)}}} |
| /# In/Out:/    ~( addr@a0 u@a1 xt@a2~            |                    |                                                                                                        |                | {{{padding(00)}}}         |
| /#/{{{io--}}} ~-- equal@a0     xt@a2)~           |                    |                                                                                                        |                |                           |
| /#/                                              |                    |                                                                                                        |                |                           |
| /# Returns with ~equal~ set if ~xt~ is/          |                    |                                                                                                        |                |                           |
| /# either zero or is not hidden and its/         |                    |                                                                                                        |                |                           |
| /# name matches the string given by/             |                    |                                                                                                        |                |                           |
| /# address ~addr~ and length ~u~./               |                    |                                                                                                        |                |                           |
|                                                  |                    |                                                                                                        |                |                           |
| {{{c(2)}}} /# "Equal" if ~xt~ zero./             |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~if xt@a2 = 0:~                       |                    |                                                                                                        |                |                           |
| {{{c(4)}}}   ~goto _equal.~                      | beq a2, zero, 0x44 | {{{off(0000010)}}} {{{rs2(01100)}}} {{{rs1(00000)}}} {{{fn3(000)}}} {{{off(00100)}}} {{{op(1100011)}}} | {{{addr(00)}}} | ~63 02 C0 04~             |
| {{{c(2)}}} /# Not equal if hidden word./         |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~flag@t0 ← [xt@a2 + 16];~             | lbu t0, 16(a2)     | {{{off(0x010)}}}                    {{{rs1(01100)}}} {{{fn3(100)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 42 06 01~             |
| {{{c(2)}}} ~if flag@t0 & 0x40 != 0:~             | andi t1, t0, 0x40  | {{{imm(0x040)}}}                    {{{rs1(00101)}}} {{{fn3(111)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |                | ~13 F3 02 04~             |
| {{{c(4)}}}   ~goto _not_equal.~                  | bne t1, zero, 0x30 | {{{off(0000001)}}} {{{rs2(00110)}}} {{{rs1(00000)}}} {{{fn3(001)}}} {{{off(10000)}}} {{{op(1100011)}}} | {{{addr(0C)}}} | ~63 18 60 02~             |
| {{{c(2)}}} /# Not equal if lengths don't match./ |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~length@t0 ← flag@t0 & 0x1F;~         | andi t0, t0, 0x1F  | {{{imm(0x01F)}}}                    {{{rs1(00101)}}} {{{fn3(111)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 F2 F2 01~             |
| {{{c(2)}}} ~if length@t0 != u@a1:~               |                    |                                                                                                        |                |                           |
| {{{c(4)}}}   ~goto _not_equal.~                  | bne t0, a1, 0x28   | {{{off(0000001)}}} {{{rs2(00101)}}} {{{rs1(01011)}}} {{{fn3(001)}}} {{{off(01000)}}} {{{op(1100011)}}} | {{{addr(14)}}} | ~63 94 55 02~             |
| {{{c(2)}}} /# Compare word name (~xt@a0+17~)/    |                    |                                                                                                        |                |                           |
| {{{c(2)}}} /# and ~addr@a1~ upto length ~u@a2~./ |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~addr'@t0 ← xt@a2 + 17;~              | addi t0, a2, 17    | {{{imm(0x011)}}}                    {{{rs1(01100)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 02 16 01~             |
| ~_begin:~                                        |                    |                                                                                                        | {{{addr(1C)}}} |                           |
| {{{c(2)}}} /# No more characters?/               |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~if u@a1 = 0;~                        |                    |                                                                                                        |                |                           |
| {{{c(4)}}}   ~goto _equal.~                      | beq a1, zero, 0x28 | {{{off(0000001)}}} {{{rs2(01011)}}} {{{rs1(00000)}}} {{{fn3(000)}}} {{{off(01000)}}} {{{op(1100011)}}} | {{{addr(1C)}}} | ~63 04 B0 02~             |
| {{{c(2)}}} /# First characters different?/       |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~chr@t1 ← [addr@a0];~                 | lbu t1, 0(a0)      | {{{off(0x000)}}}                    {{{rs1(01010)}}} {{{fn3(100)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 43 05 00~             |
| {{{c(2)}}} ~chr'@t2 ← [addr'@t0];~               | lbu t2, 0(t0)      | {{{off(0x000)}}}                    {{{rs1(00101)}}} {{{fn3(100)}}} {{{rd(00111)}}}  {{{op(0000011)}}} |                | ~83 C3 02 00~             |
| {{{c(2)}}} ~if chr@t1 != chr'@t2:~               |                    |                                                                                                        |                |                           |
| {{{c(4)}}}   ~goto _not_equal.~                  | bne t1, t2, 0x14   | {{{off(0000000)}}} {{{rs2(00110)}}} {{{rs1(00111)}}} {{{fn3(001)}}} {{{off(10100)}}} {{{op(1100011)}}} | {{{addr(28)}}} | ~63 9A 63 00~             |
| {{{c(2)}}} /# Proceed to next characters./       |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~addr@a0++;~                          | addi a0, a0, 1     | {{{imm(0x001)}}}                    {{{rs1(01010)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} |                | ~13 05 15 00~             |
| {{{c(2)}}} ~addr'@t0++;~                         | addi t0, t0, 1     | {{{imm(0x001)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 82 12 00~             |
| {{{c(2)}}} ~u@a1--;~                             | addi a1, a1, -1    | {{{imm(0xFFF)}}}                    {{{rs1(01011)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0010011)}}} |                | ~93 85 F5 FF~             |
| {{{c(2)}}} ~goto _begin.~                        | jal zero, -0x1C    | {{{off(11111110010111111111)}}}                                     {{{rd(00000)}}}  {{{op(1101111)}}} | {{{addr(38)}}} | ~6F F0 5F FE~             |
| ~_not_equal:~                                    |                    |                                                                                                        | {{{addr(3C)}}} |                           |
| {{{c(2)}}} ~equal@a0 ← 0;~                       | addi a0, zero, 0   | {{{imm(0x000)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} |                | ~13 05 00 00~             |
| {{{c(2)}}} ~return.~                             | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~             |
| ~_equal:~                                        |                    |                                                                                                        | {{{addr(44)}}} |                           |
| {{{c(2)}}} ~equal@a0 ← 1;~                       | addi a0, zero, 1   | {{{imm(0x001)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} |                | ~13 05 10 00~             |
| {{{c(2)}}} ~return.~                             | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~             |

*** Subroutine ~FIND~                                              :noexport:

#+CAPTION: Subroutine ~FIND~ searches the dictionary for a word matching a given name (RISC-V).
#+LABEL: tbl:forth:find:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                               | *Instruction*      | *Encoding*                                                                                             | *&*            | *Machine code*               |
|--------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+----------------+------------------------------|
| /# Define:/ _~FIND~_                       | ---                | ---                                                                                                    |                | {{{define(04,46 49 4E 44)}}} |
| /# In/Out:/    ~( addr@a0 u@a1~            |                    |                                                                                                        |                |                              |
| /#/{{{io--}}} ~-- addr@a0 u@a1~            |                    |                                                                                                        |                |                              |
| /#/{{{io}}}      ~xt@a2 )~                 |                    |                                                                                                        |                |                              |
| /#/                                        |                    |                                                                                                        |                |                              |
| /# Search the dictionary for a/            |                    |                                                                                                        |                |                              |
| /# word with name matching/                |                    |                                                                                                        |                |                              |
| /# ~addr~​/​~u~. Return ~xt = 0~ if/         |                    |                                                                                                        |                |                              |
| /# no matching word is found./             |                    |                                                                                                        |                |                              |
|                                            |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~push ra;~                      | addi sp, sp, -24   | {{{imm(0xFE8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 FE~                |
| {{{c(2)}}}                                 | sd ra, 16(sp)      | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(10000)}}} {{{op(0100011)}}} |                | ~23 38 11 00~                |
| {{{c(2)}}} /# Begin search at ~LATEST~./   |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~xt@a2 ← [LATEST];~             | ld a2, 40(s2)      | {{{off(0x028)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(01100)}}}  {{{op(0000011)}}} |                | ~03 36 89 02~                |
| ~_begin:~                                  |                    |                                                                                                        | {{{addr(00)}}} |                              |
| {{{c(2)}}} /# Save registers that are/     |                    |                                                                                                        |                |                              |
| {{{c(2)}}} /# not preserved by ~xt=~./     |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~push addr@a0;~                 | sd a0, 8(sp)       | {{{off(0000000)}}} {{{rs2(01010)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(01000)}}} {{{op(0100011)}}} |                | ~23 34 A1 00~                |
| {{{c(2)}}} ~push u@a1;~                    | sd a1, 0(sp)       | {{{off(0000000)}}} {{{rs2(01011)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 B1 00~                |
| {{{c(2)}}} /# Does ~xt~ match ~addr~​/​~u~?/ |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~call xt=;~  /# Compiled./      | ---                | ---                                                                                                    |                | {{{compile(78,x)}}}          |
| {{{c(2)}}} ~equal@t0 ← equal@a0;~          | addi t0, a0, 0     | {{{imm(0x000)}}}                    {{{rs1(01010)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 02 05 00~                |
| {{{c(2)}}} ~pop u@a1;~                     | ld a1, 0(sp)       | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(01011)}}}  {{{op(0000011)}}} |                | ~83 35 01 00~                |
| {{{c(2)}}} ~pop addr@a0;~                  | ld a0, 8(sp)       | {{{off(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(01010)}}}  {{{op(0000011)}}} |                | ~03 35 81 00~                |
| {{{c(2)}}} /# If matched, we're done!/     |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~if equal@t0:~                  |                    |                                                                                                        |                |                              |
| {{{c(4)}}}   ~goto _end.~                  | bne t0, zero, 0x0C | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(00000)}}} {{{fn3(001)}}} {{{off(01100)}}} {{{op(1100011)}}} | {{{addr(1C)}}} | ~63 16 50 00~                |
| {{{c(2)}}} /# Otherwise, follow ~xt~'s/    |                    |                                                                                                        |                |                              |
| {{{c(2)}}} /# link pointer and repeat./    |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~xt@a2 ← [xt@a2 + 8];~          | ld a2, 8(a2)       | {{{off(0x008)}}}                    {{{rs1(01100)}}} {{{fn3(011)}}} {{{rd(01100)}}}  {{{op(0000011)}}} |                | ~03 36 86 00~                |
| {{{c(2)}}} ~goto _begin.~                  | jal zero, -0x24    | {{{off(11111101110111111111)}}}                                     {{{rd(00000)}}}  {{{op(1101111)}}} | {{{addr(24)}}} | ~6F F0 DF FD~                |
| ~_end:~                                    |                    |                                                                                                        | {{{addr(28)}}} |                              |
| {{{c(2)}}} ~pop ra;~                       | ld ra, 16(sp)      | {{{off(0x010)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                | ~83 30 01 01~                |
| {{{c(2)}}}                                 | addi sp, sp, 24    | {{{imm(0x018)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 01~                |
| {{{c(2)}}} ~return.~                       | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                |


*** Subroutine ~Num~                                               :noexport:

#+CAPTION: Subroutine ~Num~ parses a character string as a number and pushes it on the stack (RISC-V).
#+LABEL: tbl:forth:num:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                             | *Instruction*       | *Encoding*                                                                                             | *&*            | *Machine code*            |
|------------------------------------------+---------------------+--------------------------------------------------------------------------------------------------------+----------------+---------------------------|
| /# Define:/ _~Num~_                      | ---                 | ---                                                                                                    |                | {{{define(03,4E 75 6D)}}} |
| /# In/Out:/    ~( addr@a0 u@a1~          |                     |                                                                                                        |                | {{{padding(00)}}}         |
| /#/{{{io--}}} ~-​- n )~                   |                     |                                                                                                        |                |                           |
| /#/                                      |                     |                                                                                                        |                |                           |
| /# Parse string given by ~addr~​/​~u~/     |                     |                                                                                                        |                |                           |
| /# as a number and push it on/           |                     |                                                                                                        |                |                           |
| /# the data stack./                      |                     |                                                                                                        |                |                           |
|                                          |                     |                                                                                                        |                |                           |
| {{{c(2)}}} ~num@t0 ← 0;~                 | addi t0, zero, 0    | {{{imm(0x000)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 02 00 00~             |
| ~_begin:~                                |                     |                                                                                                        | {{{addr(00)}}} |                           |
| {{{c(2)}}} /# Parse one character./      |                     |                                                                                                        |                |                           |
| {{{c(2)}}} ~chr@t1 ← [addr@a0++];~       | lbu t1, 0(a0)       | {{{off(0x000)}}}                    {{{rs1(01010)}}} {{{fn3(100)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 43 05 00~             |
| {{{c(2)}}}                               | addi a0, a0, 1      | {{{imm(0x001)}}}                    {{{rs1(01010)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} |                | ~13 05 15 00~             |
| {{{c(2)}}} /# Is it a ~[0-9]~ digit?/    |                     |                                                                                                        |                |                           |
| {{{c(2)}}} ~if chr@t1 < 'A':~            | addi t2, zero, 65   | {{{imm(0x041)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00111)}}}  {{{op(0010011)}}} |                | ~93 03 10 04~             |
| {{{c(4)}}}   ~goto _digit.~              | bltu t1, t2, 0x08   | {{{off(0000000)}}} {{{rs2(00111)}}} {{{rs1(00110)}}} {{{fn3(110)}}} {{{off(01000)}}} {{{op(1100011)}}} | {{{addr(0C)}}} | ~63 64 73 00~             |
| {{{c(2)}}} /# It's an ~[A-F]~ digit./    |                     |                                                                                                        |                |                           |
| {{{c(2)}}} ~chr@t1 -= 7;~                | addi t1, t1, -7     | {{{imm(0xFF9)}}}                    {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |                | ~13 03 93 FF~             |
| ~_digit:~                                |                     |                                                                                                        | {{{addr(14)}}} |                           |
| {{{c(2)}}} ~digit@t1 = chr@t1 - '0';~    | addi t1, t1, -48    | {{{imm(0xFD0)}}}                    {{{rs1(00110)}}} {{{fn3(000)}}} {{{rd(00110)}}}  {{{op(0010011)}}} |                | ~13 03 03 FD~             |
| {{{c(2)}}} /# Multiply by base and add/  |                     |                                                                                                        |                |                           |
| {{{c(2)}}} /# the new digit./            |                     |                                                                                                        |                |                           |
| {{{c(2)}}} ~num@t0 <<= 4~;               | slli t0, t0, 4      | ~000000~​{{{shamt(000100)}}}         {{{rs1(00101)}}} {{{fn3(001)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 92 42 00~             |
| {{{c(2)}}} ~num@t0~ \vert​~= digit@t1;~       | or t0, t0, t1       | {{{fn7(0000000)}}} {{{rs2(00110)}}} {{{rs1(00101)}}} {{{fn3(110)}}} {{{rd(00101)}}}  {{{op(0110011)}}} |                | ~B3 E2 62 00~             |
| {{{c(2)}}} /# Repeat while there are/    |                     |                                                                                                        |                |                           |
| {{{c(2)}}} /# unparsed characters left./ |                     |                                                                                                        |                |                           |
| {{{c(2)}}} ~if --u@a1 != 0:~             | addi a1, a1, -1     | {{{imm(0xFFF)}}}                    {{{rs1(01011)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0010011)}}} |                | ~93 85 F5 FF~             |
| {{{c(4)}}}   ~goto _begin.~              | bne a1, zero, -0x24 | {{{off(1111110)}}} {{{rs2(01011)}}} {{{rs1(00000)}}} {{{fn3(001)}}} {{{off(11101)}}} {{{op(1100011)}}} | {{{addr(24)}}} | ~E3 1E B0 FC~             |
| {{{c(2)}}} /# Push the parsed number/    |                     |                                                                                                        |                |                           |
| {{{c(2)}}} /# on the data stack./        |                     |                                                                                                        |                |                           |
| {{{c(2)}}} ~STACK@s3 -= 8;~              | addi s3, s3, -8     | {{{imm(0xFF8)}}}                    {{{rs1(10011)}}} {{{fn3(000)}}} {{{rd(10011)}}}  {{{op(0010011)}}} |                | ~93 89 89 FF~             |
| {{{c(2)}}} ~[STACK@s3] ← num@t0;~        | sd t0, 0(s3)        | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(10011)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 B0 59 00~             |
| {{{c(2)}}} ~return.~                     | jalr zero, 0(ra)    | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~             |

*** Subroutine ~miss~                                              :noexport:

#+CAPTION: Subroutine ~miss~ attempts parsing a word as a number, optionally compiling it as a literal (RISC-V).
#+LABEL: tbl:forth:miss:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                           | *Instruction*      | *Encoding*                                                                                             | *&*            | *Machine code*               |
|----------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+----------------+------------------------------|
| /# Define:/ _~miss~_                   | ---                | ---                                                                                                    |                | {{{define(04,6D 69 73 73)}}} |
| /# In/Out:/     ~( addr@a0 u@a1~       |                    |                                                                                                        |                |                              |
| /#/{{{io}}}       ~xt@a2~              |                    |                                                                                                        |                |                              |
| /#/{{{io--}}} ~-​- [num] xt@a0 )~       |                    |                                                                                                        |                |                              |
| /#/                                    |                    |                                                                                                        |                |                              |
| /# If ~xt~ is zero, try parsing/       |                    |                                                                                                        |                |                              |
| /# the string given by ~addr~​/​~u~/     |                    |                                                                                                        |                |                              |
| /# as a number. If successful/         |                    |                                                                                                        |                |                              |
| /# and if we're in compiling/          |                    |                                                                                                        |                |                              |
| /# state, compile the number/          |                    |                                                                                                        |                |                              |
| /# as a literal./                      |                    |                                                                                                        |                |                              |
|                                        |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~push ra;~                  | addi sp, sp, -8    | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 FF~                |
| {{{c(2)}}}                             | sd ra, 0(sp)       | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 11 00~                |
| {{{c(2)}}} ~if xt@a2 != 0:~            |                    |                                                                                                        |                |                              |
| {{{c(4)}}}   ~goto _end.~              | bne a2, zero, 0x20 | {{{off(0000001)}}} {{{rs2(01100)}}} {{{rs1(00000)}}} {{{fn3(001)}}} {{{off(00000)}}} {{{op(1100011)}}} | {{{addr(00)}}} | ~63 10 C0 02~                |
| {{{c(2)}}} /# We shouldn't call ~Num~/ |                    |                                                                                                        |                |                              |
| {{{c(2)}}} /# with an empty string./   |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~if u@a1 = 0:~              |                    |                                                                                                        |                |                              |
| {{{c(4)}}}   ~goto _end.~              | beq a1, zero, 0x1C | {{{off(0000000)}}} {{{rs2(01011)}}} {{{rs1(00000)}}} {{{fn3(000)}}} {{{off(11100)}}} {{{op(1100011)}}} | {{{addr(04)}}} | ~63 0E B0 00~                |
| {{{c(2)}}} ~call Num;~  /# Compiled./  | ---                | ---                                                                                                    |                | {{{compile(4E,N)}}}          |
| {{{c(2)}}} /# Are we compiling?/       |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~if [STATE] == 0:~          | ld t0, 32(s2)      | {{{off(0x020)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 32 09 02~                |
| {{{c(4)}}}   ~goto _end.~              | beq t0, zero, 0x0C | {{{off(0000000)}}} {{{rs2(00101)}}} {{{rs1(00000)}}} {{{fn3(000)}}} {{{off(01100)}}} {{{op(1100011)}}} | {{{addr(14)}}} | ~63 06 50 00~                |
| {{{c(2)}}} /# Compile top of stack/    |                    |                                                                                                        |                |                              |
| {{{c(2)}}} /# number as literal./      |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~call LIT;~  /# Compiled./  | ---                | ---                                                                                                    |                | {{{compile(4C,L)}}}          |
| ~_end:~                                |                    |                                                                                                        | {{{addr(20)}}} |                              |
| {{{c(2)}}} ~xt@a0 ← xt@a2;~            | addi a0, a2, 0     | {{{imm(0x000)}}}                    {{{rs1(01100)}}} {{{fn3(000)}}} {{{rd(01010)}}}  {{{op(0010011)}}} |                | ~13 05 06 00~                |
| {{{c(2)}}} ~pop ra;~                   | ld ra, 0(sp)       | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                | ~83 30 01 00~                |
| {{{c(2)}}}                             | addi sp, sp, 8     | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 00~                |
| {{{c(2)}}} ~return.~                   | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                |


*** Subroutine ~EXEC~                                              :noexport:

#+CAPTION: Subroutine ~EXEC~ executes a Forth word (RISC-V).
#+LABEL: tbl:forth:EXEC:rv
#+ATTR_LATEX: :align l|ll|l
| *Pseudocode*                    | *Instruction*    | *Encoding*                                                                                             | *Machine code*               |
|---------------------------------+------------------+--------------------------------------------------------------------------------------------------------+------------------------------|
| /# Define:/ _~EXEC~_            | ---              | ---                                                                                                    | {{{define(04,45 58 45 43)}}} |
| /# In/Out:/ ~( xt@a0 -- )~      |                  |                                                                                                        |                              |
| /#/                             |                  |                                                                                                        |                              |
| /# Execute word given by ~xt~./ |                  |                                                                                                        |                              |
|                                 |                  |                                                                                                        |                              |
| /# Retrieve code address./      |                  |                                                                                                        |                              |
| ~code@t0 ← [xt@a0];~            | ld t0, 0(a0)     | {{{off(0x000)}}}                    {{{rs1(01010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} | ~83 32 05 00~                |
|                                 |                  |                                                                                                        |                              |
| /# Call that code, making/      |                  |                                                                                                        |                              |
| /# sure the return address/     |                  |                                                                                                        |                              |
| /# is saved and restored./      |                  |                                                                                                        |                              |
| ~push ra;~                      | addi sp, sp, -8  | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} | ~13 01 81 FF~                |
|                                 | sd ra, 0(sp)     | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} | ~23 30 11 00~                |
| ~call [code@t0];~               | jalr ra, 0(t0)   | {{{off(0x000)}}}                    {{{rs1(00101)}}} {{{fn3(000)}}} {{{rd(00001)}}}  {{{op(1100111)}}} | ~E7 80 02 00~                |
| ~pop ra;~                       | ld ra, 0(sp)     | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} | ~83 30 01 00~                |
|                                 | addi sp, sp, 8   | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} | ~13 01 81 00~                |
| ~return.~                       | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} | ~67 80 00 00~                |

*** Subroutine ~exec~                                              :noexport:

#+CAPTION: Subroutine ~exec~ executes a word if interpreting or if it's immediate (RISC-V).
#+LABEL: tbl:forth:exec:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                              | *Instruction*    | *Encoding*                                                                                             | *&*            | *Machine code*               |
|-------------------------------------------+------------------+--------------------------------------------------------------------------------------------------------+----------------+------------------------------|
| /# Define:/ _~exec~_                      | ---              | ---                                                                                                    |                | {{{define(04,65 78 65 63)}}} |
| /# In/Out:/ ~( xt@a0~                     |                  |                                                                                                        |                |                              |
| /#/{{{io}}}   ~imm+state@a1 -- )~         |                  |                                                                                                        |                |                              |
| /#/                                       |                  |                                                                                                        |                |                              |
| /# Execute ~xt~ if we're in interpreting/ |                  |                                                                                                        |                |                              |
| /# mode or if it's an immediate word./    |                  |                                                                                                        |                |                              |
| /# In other words, don't execute if we/   |                  |                                                                                                        |                |                              |
| /# are compiling and the word is not/     |                  |                                                                                                        |                |                              |
| /# immediate (if ~imm+state~ is ~1~)./    |                  |                                                                                                        |                |                              |
|                                           |                  |                                                                                                        |                |                              |
| {{{c(2)}}} ~if imm+state@a1 = 1:~         | addi t0, zero, 1 | {{{imm(0x001)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 02 10 00~                |
| {{{c(4)}}}   ~goto _end.~                 | beq a1, t0, 0x1C | {{{off(0000000)}}} {{{rs2(01011)}}} {{{rs1(00101)}}} {{{fn3(000)}}} {{{off(11100)}}} {{{op(1100011)}}} | {{{addr(00)}}} | ~63 8E B2 00~                |
| {{{c(2)}}} /# Execute word using ~EXEC~./ |                  |                                                                                                        |                |                              |
| {{{c(2)}}} ~push ra;~                     | addi sp, sp, -8  | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 FF~                |
|                                           | sd ra, 0(sp)     | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 11 00~                |
| {{{c(2)}}} ~call EXEC;~  /# Compiled./    | ---              | ---                                                                                                    |                | {{{compile(45,E)}}}          |
| {{{c(2)}}} ~pop ra;~                      | ld ra, 0(sp)     | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                | ~83 30 01 00~                |
| {{{c(2)}}}                                | addi sp, sp, 8   | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 00~                |
| ~_end:~                                   |                  |                                                                                                        | {{{addr(1C)}}} |                              |
| {{{c(2)}}} ~return.~                      | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                |

*** Subroutine ~compl~                                             :noexport:

#+CAPTION: Subroutine ~compl~ compiles a word in compiling state if it's not immediate (RISC-V).
#+LABEL: tbl:forth:compl:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                | *Instruction*    | *Encoding*                                                                                             | *&*            | *Machine code*                  |
|---------------------------------------------+------------------+--------------------------------------------------------------------------------------------------------+----------------+---------------------------------|
| /# Define:/ _~compl~_                       | ---              | ---                                                                                                    |                | {{{define(05,63 6F 6D 70 6C)}}} |
| /# In/Out:/    ~( xt@a0 imm+state@a1~       |                  |                                                                                                        |                | {{{padding(00)}}}               |
| /#/{{{io--}}} ~-- xt@a0 imm+state@a1 )~     |                  |                                                                                                        |                |                                 |
| /#/                                         |                  |                                                                                                        |                |                                 |
| /# Compile ~xt~ in the current definition/  |                  |                                                                                                        |                |                                 |
| /# if we're in compiling state and ~xt~ is/ |                  |                                                                                                        |                |                                 |
| /# not immediate (if ~imm+state~ is ~1~)./  |                  |                                                                                                        |                |                                 |
|                                             |                  |                                                                                                        |                |                                 |
| {{{c(2)}}} ~if imm+state@a1 != 1:~          | addi t0, zero, 1 | {{{imm(0x001)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 02 10 00~                   |
| {{{c(4)}}}   ~goto _end.~                   | bne a1, t0, 0x20 | {{{off(0000001)}}} {{{rs2(01011)}}} {{{rs1(00101)}}} {{{fn3(001)}}} {{{off(00000)}}} {{{op(1100011)}}} | {{{addr(00)}}} | ~63 90 B2 02~                   |
| {{{c(2)}}} /# Compile word using ~COMPL~./  |                  |                                                                                                        |                |                                 |
| {{{c(2)}}} ~push ra;~                       | addi sp, sp, -8  | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 FF~                   |
| {{{c(2)}}}                                  | sd ra, 0(sp)     | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 11 00~                   |
| {{{c(2)}}} ~call COMPL;~  /# Compiled./     | ---              | ---                                                                                                    |                | {{{compile(43)}}}               |
| {{{c(2)}}} ~pop ra;~                        | ld ra, 0(sp)     | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                | ~83 30 01 00~                   |
| {{{c(2)}}}                                  | addi sp, sp, 8   | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 00~                   |
| {{{c(2)}}} /# Restore ~a1~ after ~COMPL~./  |                  |                                                                                                        |                |                                 |
| {{{c(2)}}} ~imm+state@a1 ← 1;~              | addi a1, zero, 1 | {{{imm(0x001)}}}                    {{{rs1(00000)}}} {{{fn3(000)}}} {{{rd(01011)}}}  {{{op(0010011)}}} |                | ~93 05 10 00~                   |
| ~_end:~                                     |                  |                                                                                                        | {{{addr(20)}}} |                                 |
| {{{c(2)}}} ~return.~                        | jalr zero, 0(ra) | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                   |

*** Subroutine ~hit~                                               :noexport:

#+CAPTION: Subroutine ~hit~ either compiles or executes a word found in the dictionary (RISC-V).
#+LABEL: tbl:forth:hit:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                      | *Instruction*      | *Opcode*                                                                                               | *&*            | *Machine code*            |
|---------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+----------------+---------------------------|
| /# Define:/ _~hit~_                               | ---                | ---                                                                                                    |                | {{{define(03,68 69 74)}}} |
| /# In/Out:/ ~( xt@a0 -- )~                        |                    |                                                                                                        |                | {{{padding(00)}}}         |
| /#/                                               |                    |                                                                                                        |                |                           |
| /# Either compile or execute a/                   |                    |                                                                                                        |                |                           |
| /# word that has been found in/                   |                    |                                                                                                        |                |                           |
| /# the dictionary, depending on/                  |                    |                                                                                                        |                |                           |
| /# current state and whether it's/                |                    |                                                                                                        |                |                           |
| /# an immediate word./                            |                    |                                                                                                        |                |                           |
|                                                   |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~if xt@a0 = 0:~                        |                    |                                                                                                        |                |                           |
| {{{c(4)}}}   ~goto _end.~                         | beq a0, zero, 0x34 | {{{off(0000001)}}} {{{rs2(00000)}}} {{{rs1(01010)}}} {{{fn3(000)}}} {{{off(10100)}}} {{{op(1100011)}}} | {{{addr(00)}}} | ~63 0A 05 02~             |
| {{{c(2)}}} /# Combine word's immediate/           |                    |                                                                                                        |                |                           |
| {{{c(2)}}} /# flag with current state./           |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~flag@t0 ← [xt@a0 + 16];~              | lbu t0, 16(a0)     | {{{off(0x010)}}}                    {{{rs1(01010)}}} {{{fn3(100)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 42 05 01~             |
| {{{c(2)}}} ~imm@t0 ← flag@t0 & 0x80;~             | andi t0, t0, 0x80  | {{{imm(0x080)}}}                    {{{rs1(00101)}}} {{{fn3(111)}}} {{{rd(00101)}}}  {{{op(0010011)}}} |                | ~93 F2 02 08~             |
| {{{c(2)}}} ~imm+state@a1 ← imm@t0~                | lbu t1, 32(s2)     | {{{off(0x020)}}}                    {{{rs1(10010)}}} {{{fn3(100)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 43 09 02~             |
| {{{c(15)}}}              \vert ~[STATE];~             | or a1, t0, t1      | {{{fn7(0000000)}}} {{{rs2(00110)}}} {{{rs1(00101)}}} {{{fn3(110)}}} {{{rd(01011)}}}  {{{op(0110011)}}} |                | ~B3 E5 62 00~             |
| {{{c(2)}}} /# Let ~compl~ and ~exec~ decide/      |                    |                                                                                                        |                |                           |
| {{{c(2)}}} /# what to do./                        |                    |                                                                                                        |                |                           |
| {{{c(2)}}} ~push ra;~                             | addi sp, sp, -8    | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 FF~             |
| {{{c(2)}}}                                        | sd ra, 0(sp)       | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 11 00~             |
| {{{c(2)}}} ~call compl;~  {{{c(0)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(63,c)}}}       |
| {{{c(2)}}} ~call exec;~   {{{c(1)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(65,e)}}}       |
| {{{c(2)}}} ~pop ra;~                              | ld ra, 0(sp)       | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                | ~83 30 01 00~             |
| {{{c(2)}}}                                        | addi sp, sp, 8     | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 00~             |
| ~_end:~                                           |                    |                                                                                                        | {{{addr(34)}}} |                           |
| {{{c(2)}}} ~return.~                              | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~             |


*** Subroutine ~SVAL~                                              :noexport:

#+CAPTION: Subroutine ~SVAL~ evaluates a line of Forth code (RISC-V).
#+LABEL: tbl:forth:SVAL:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                      | *Instruction*      | *Encoding*                                                                                             | *&*            | *Machine code*               |
|---------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+----------------+------------------------------|
| /# Define:/ _~SVAL~_                              | ---                | ---                                                                                                    |                | {{{define(04,53 56 41 4C)}}} |
| /# In/Out:/ ~( ··· -- ··· )~                      |                    |                                                                                                        |                |                              |
| /#/                                               |                    |                                                                                                        |                |                              |
| /# Evaluate a Forth line: repeatedly/             |                    |                                                                                                        |                |                              |
| /# parse a token, attempt finding it/             |                    |                                                                                                        |                |                              |
| /# in the dictionary, then allow ~miss~/          |                    |                                                                                                        |                |                              |
| /# and ~hit~ to choose the appropriate/           |                    |                                                                                                        |                |                              |
| /# action in context./                            |                    |                                                                                                        |                |                              |
|                                                   |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~push ra;~                             | addi sp, sp, -8    | {{{imm(0xFF8)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 FF~                |
|                                                   | sd ra, 0(sp)       | {{{off(0000000)}}} {{{rs2(00001)}}} {{{rs1(00010)}}} {{{fn3(011)}}} {{{off(00000)}}} {{{op(0100011)}}} |                | ~23 30 11 00~                |
| ~_begin:~                                         |                    |                                                                                                        | {{{addr(00)}}} |                              |
| {{{c(2)}}} ~call pname;~  {{{c(0)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(70,p)}}}          |
| {{{c(2)}}} ~call FIND;~   {{{c(1)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(46,F)}}}          |
| {{{c(2)}}} ~call miss;~   {{{c(1)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(6D,m)}}}          |
| {{{c(2)}}} ~call hit;~    {{{c(2)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(68,h)}}}          |
| {{{c(2)}}} /# Characters left in current line?/   |                    |                                                                                                        |                |                              |
| {{{c(2)}}} ~>in@t0 ← [>IN];~                      | ld t0, 16(s2)      | {{{off(0x010)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00101)}}}  {{{op(0000011)}}} |                | ~83 32 09 01~                |
| {{{c(2)}}} ~#in@t1 ← [#IN];~                      | ld t1, 0(s2)       | {{{off(0x000)}}}                    {{{rs1(10010)}}} {{{fn3(011)}}} {{{rd(00110)}}}  {{{op(0000011)}}} |                | ~03 33 09 00~                |
| {{{c(2)}}} ~if >in@t0 < #in@t1:~                  |                    |                                                                                                        |                |                              |
| {{{c(4)}}}   ~goto _begin.~                       | bltu t0, t1, -0x28 | {{{off(1111110)}}} {{{rs2(00110)}}} {{{rs1(00101)}}} {{{fn3(110)}}} {{{off(11001)}}} {{{op(1100011)}}} | {{{addr(28)}}} | ~E3 EC 62 FC~                |
| {{{c(2)}}} ~pop ra;~                              | ld ra, 0(sp)       | {{{off(0x000)}}}                    {{{rs1(00010)}}} {{{fn3(011)}}} {{{rd(00001)}}}  {{{op(0000011)}}} |                | ~83 30 01 00~                |
| {{{c(2)}}}                                        | addi sp, sp, 8     | {{{imm(0x008)}}}                    {{{rs1(00010)}}} {{{fn3(000)}}} {{{rd(00010)}}}  {{{op(0010011)}}} |                | ~13 01 81 00~                |
| {{{c(2)}}} ~return.~                              | jalr zero, 0(ra)   | {{{off(0x000)}}}                    {{{rs1(00001)}}} {{{fn3(000)}}} {{{rd(00000)}}}  {{{op(1100111)}}} |                | ~67 80 00 00~                |

*** Subroutine ~ti~                                                :noexport:

#+CAPTION: Subroutine ~ti~ brings everything together, reading and evaluating Forth in a loop (RISC-V).
#+LABEL: tbl:forth:ti:rv
#+ATTR_LATEX: :align l|ll|l|l
| *Pseudocode*                                       | *Instruction*      | *Encoding*                                                                                             | *&*            | *Machine code*         |
|----------------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------+----------------+------------------------|
| /# Define:/ _~ti~_                                 | ---                | ---                                                                                                    |                | {{{define(02,74 69)}}} |
| /# In/Out:/ ~( -- )~                               |                    |                                                                                                        |                |                        |
| /#/                                                |                    |                                                                                                        |                |                        |
| /# Initialize data stack and text/                 |                    |                                                                                                        |                |                        |
| /# input, then repeatedly refill/                  |                    |                                                                                                        |                |                        |
| /# lines and evaluate them./                       |                    |                                                                                                        |                |                        |
|                                                    |                    |                                                                                                        |                |                        |
| {{{c(2)}}} ~STACK@s3 ← 0x10000000;~                | lui s3, 0x10000    | {{{imm(0x00001)}}}                                                  {{{rd(10011)}}}  {{{op(0110111)}}} |                | ~B7 09 00 10~          |
| {{{c(2)}}} ~[TIB] ← INPUT@s0;~                     | sd s0, 8(s2)       | {{{off(0000000)}}} {{{rs2(01000)}}} {{{rs1(10010)}}} {{{fn3(011)}}} {{{off(01000)}}} {{{op(0100011)}}} |                | ~23 34 89 00~          |
| {{{c(2)}}} ~call [;~  /# Compiled./                | ---                | ---                                                                                                    |                | {{{compile(5B,[)}}}    |
| ~_begin:~                                          |                    |                                                                                                        | {{{addr(00)}}} |                        |
| {{{c(2)}}} ~call REFILL;~  {{{c(0)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(52,R)}}}    |
| {{{c(2)}}} ~call SVAL;~    {{{c(2)}}}​/# Compiled./ | ---                | ---                                                                                                    |                | {{{compile(53,S)}}}    |
| {{{c(2)}}} ~goto _begin.~                          | jal zero, -0x10    | {{{off(11111111000111111111)}}}                                     {{{rd(00000)}}}  {{{op(1101111)}}} | {{{addr(10)}}} | ~6F F0 1F FF~          |




* Forth in Forth

* Analysis                                                         :noexport:

| *Instruction*           | *Type* | *Encoding*                                                                                             |                                                                |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| ecall                   | I      | ~000000000000~                      ~00000~          {{{fn3(000)}}} ~00000~          {{{op(1110011)}}} | ~000000000000             00000  000  00000           1110011~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| slli rd, rs1, shamt     | I      | ~000000~​{{{shamt(bbbbbb)}}}         {{{rs1(rrrrr)}}} {{{fn3(001)}}} {{{rd(rrrrr)}}}  {{{op(0010011)}}} | ~0000000 shamt            rs1    001  rd              0010011~ |
| srli rd, rs1, shamt     | I      | ~000000~​{{{shamt(bbbbbb)}}}         {{{rs1(rrrrr)}}} {{{fn3(101)}}} {{{rd(rrrrr)}}}  {{{op(0010011)}}} | ~0000000 shamt            rs1    101  rd              0010011~ |
| addi rd, rs1, immediate | I      | {{{imm(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(000)}}} {{{rd(rrrrr)}}}  {{{op(0010011)}}} | ~immediate[11:0]          rs1    000  rd              0010011~ |
| andi rd, rs1, immediate | I      | {{{imm(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(111)}}} {{{rd(rrrrr)}}}  {{{op(0010011)}}} | ~immediate[11:0]          rs1    111  rd              0010011~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| lb  rd, offset(rs1)     | I ?    | {{{off(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(000)}}} {{{rd(rrrrr)}}}  {{{op(0000011)}}} | ~offset[11:0]             rs1    000  rd              0000011~ |
| lw  rd, offset(rs1)     | I ?    | {{{off(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(010)}}} {{{rd(rrrrr)}}}  {{{op(0000011)}}} | ~offset[11:0]             rs1    010  rd              0000011~ |
| ld  rd, offset(rs1)     | I      | {{{off(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(011)}}} {{{rd(rrrrr)}}}  {{{op(0000011)}}} | ~offset[11:0]             rs1    011  rd              0000011~ |
| lbu rd, offset(rs1)     | I      | {{{off(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(100)}}} {{{rd(rrrrr)}}}  {{{op(0000011)}}} | ~offset[11:0]             rs1    100  rd              0000011~ |
| lwu rd, offset(rs1)     | I      | {{{off(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(110)}}} {{{rd(rrrrr)}}}  {{{op(0000011)}}} | ~offset[11:0]             rs1    110  rd              0000011~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| jalr rd, offset(rs1)    | I      | {{{off(0xhhh)}}}                    {{{rs1(rrrrr)}}} {{{fn3(000)}}} {{{rd(rrrrr)}}}  {{{op(1100111)}}} | ~offset[11:0]             rs1    000  rd              1100111~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| add rd, rs1, rs2        | R      | {{{fn7(0000000)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(000)}}} {{{rd(rrrrr)}}}  {{{op(0110011)}}} | ~0000000           rs2    rs1    000  rd              0110011~ |
| or  rd, rs1, rs2        | R      | {{{fn7(0000000)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(110)}}} {{{rd(rrrrr)}}}  {{{op(0110011)}}} | ~0000000           rs2    rs1    110  rd              0110011~ |
| and rd, rs1, rs2        | R      | {{{fn7(0000000)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(111)}}} {{{rd(rrrrr)}}}  {{{op(0110011)}}} | ~0000000           rs2    rs1    111  rd              0110011~ |
| sub rd, rs1, rs2        | R      | {{{fn7(0100000)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(000)}}} {{{rd(rrrrr)}}}  {{{op(0110011)}}} | ~0100000           rs2    rs1    111  rd              0110011~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| sb rs2, offset(rs1)     | S      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(000)}}} {{{off(bbbbb)}}} {{{op(0100011)}}} | ~offset[11:5]      rs2    rs1    000  offset[4:0]     0100011~ |
| sw rs2, offset(rs1)     | S      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(010)}}} {{{off(bbbbb)}}} {{{op(0100011)}}} | ~offset[11:5]      rs2    rs1    010  offset[4:0]     0100011~ |
| sd rs2, offset(rs1)     | S      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(011)}}} {{{off(bbbbb)}}} {{{op(0100011)}}} | ~offset[11:5]      rs2    rs1    011  offset[4:0]     0100011~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| beq rs1, rs2, offset    | B      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(000)}}} {{{off(bbbbb)}}} {{{op(1100011)}}} | ~offset[12\vert10:5]   rs2    rs1    000  offset[4:1\vert11]  1100011~ |
| bne rs1, rs2, offset    | B      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(001)}}} {{{off(bbbbb)}}} {{{op(1100011)}}} | ~offset[12\vert10:5]   rs2    rs1    001  offset[4:1\vert11]  1100011~ |
| blt rs1, rs2, offset    | B      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(100)}}} {{{off(bbbbb)}}} {{{op(1100011)}}} | ~offset[12\vert10:5]   rs2    rs1    100  offset[4:1\vert11]  1100011~ |
| bge rs1, rs2, offset    | B ?    | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(101)}}} {{{off(bbbbb)}}} {{{op(1100011)}}} | ~offset[12\vert10:5]   rs2    rs1    101  offset[4:1\vert11]  1100011~ |
| bltu rs1, rs2, offset   | B      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(110)}}} {{{off(bbbbb)}}} {{{op(1100011)}}} | ~offset[12\vert10:5]   rs2    rs1    110  offset[4:1\vert11]  1100011~ |
| bgeu rs1, rs2, offset   | B      | {{{off(bbbbbbb)}}} {{{rs2(rrrrr)}}} {{{rs1(rrrrr)}}} {{{fn3(111)}}} {{{off(bbbbb)}}} {{{op(1100011)}}} | ~offset[12\vert10:5]   rs2    rs1    111  offset[4:1\vert11]  1100011~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| auipc rd, immediate     | U ?    | {{{imm(0xhhhhh)}}}                                                  {{{rd(rrrrr)}}}  {{{op(0010111)}}} | ~immediate[31:12]                     rd              0010111~ |
| lui rd, immediate       | U      | {{{imm(0xhhhhh)}}}                                                  {{{rd(rrrrr)}}}  {{{op(0110111)}}} | ~immediate[31:12]                     rd              0110111~ |
|-------------------------+--------+--------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| jal rd, offset          | J      | {{{off(bbbbbbbbbbbbbbbbbbbb)}}}                                     {{{rd(rrrrr)}}}  {{{op(1101111)}}} | ~offset[20\vert10:1\vert11\vert19:12]             rd              1101111~ |


* Bibliography

References:

#+PRINT_BIBLIOGRAPHY:


* Notes                                                            :noexport:

*** TODOs
- [X] Convert all *&* columns to use the ~addr~ macro.
- [X] Find places where it makes sense to restart address counts.
- [X] Convert all /N/A/​s to ~---~.
- [X] Check all returns/gotos end with ~.~ and all calls with ~;~.
- [X] Check that compiled calls don't end in ~()~.
- [X] Properly align /In/Out/ sections.
- [ ] If supported, make all subroutine table labels case-sensitive.
- [ ] Macrofy ~\hookrightarrow~.
- [ ] Convert all bytes to uppercase.
- [ ] RISC-V:
  - [ ] Macrofy all remaining bits in encodings.
  - [ ] Convert all numbers in the instr. column to a standardized
    format.
  - [ ] Add bit ranges to the *Encoding* column. Probably hard.
- [ ] x86-64:
  - [ ] Convert *Instruction* column to actual *Assembly*.
    - [ ] Including compiled instructions in ~COMPL~, ~LIT~ etc.!!!
  - [ ] Move *&* column after *Machine code*? It'd allow matching
    addresses with their corresponding ~goto~​s.
  - [ ] Add a ~rex~ macro to annotate the REX byte?
  - [ ] Change *Opcode* col. name to *Encoding* everywhere.
  - [ ] Align ~\hookrightarrow~ properly.
- [ ] Check there's no ~???~ or ~TODO~ left.
  
*** Sections that I should include in the thesis
- [ ] Legend explaining the typographic conventions.
  - Do it by column for the code tables.
- [X] Comparison between SmithForth, sectorforth, milliForth, other (?).
- Call graph of the subroutines to show how they are related.
- Summaries of instructions (~x86-64~ and ~riscv~) used in the two
  implementations.
- Explain why byte ~99~ for commands is OK for RISC-V.
  - [ ] Show no instr. opcode overlaps with ~99~.
  - [ ] Explain how we copy 4 bytes at a time to ~OUTPUT~ to avoid
    in-instruction ~99~ bytes.
  
*** Useful Sections in the Intel Manual

Volume 2:
- 2.1 INSTRUCTION FORMAT FOR PROTECTED MODE, REAL-ADDRESS MODE, AND
  VIRTUAL-8086 MODE
- 2.2 IA-32E MODE
  - 2.2.1 REX Prefixes
- 3.1.1.1 Opcode Column in the Instruction Summary Table (Instructions without VEX Prefix)
- 3.1.1.3 Instruction Column in the Opcode Summary Table
- B.1 MACHINE INSTRUCTION FORMAT
  - B.1.4.2 Reg Field (reg) for 64-Bit Mode
  - B.1.4.7 Condition Test (tttn) Field
  - B.2.1 *General Purpose Instruction Formats and Encodings for
    64-Bit Mode* -- this is GREAT.

*** Maybe consider porting to RISC-V?
The Wikipedia [[https://en.wikipedia.org/wiki/RISC-V][article]] states that "RISC-V encourages academic usage"
and that "the simplicity of the integer subset permits basic student
exercises". This is probably the ideal ISA to target after
=x86-64=. All work done for x86 could be relegated to an appendix so
that it's not wasted.

*** RISC-V Forth implementations
- https://github.com/jjyr/jonesforth_riscv
- https://github.com/theandrew168/derzforth
- https://github.com/mcmenaminadrian/riscyforth

*** Useful GDB commands & tricks
**** Breakpoints
- ~ignore id n~ ignores breakpoint =id= a number of =n= times. 
- ~tbreak~ for temporary breakpoints.

**** Watchpoints
- Create with ~watch~ / ~rwatch~ / ~awatch~.
- They appear on the =info breakpoint= page.

**** Disassembling
- ~disassemble/r $pc, +4 * 8~ disassembles 8 instructions (4 bytes)
  starting from =$pc=.

**** Display on every program stop
- ~display/4i $pc~ prints next 4 instructions after every step.


* Footnotes

[fn:1] SmithForth misses the opcode here.

[fn:2] We reset the address counter since no jumps occur from the code
below this point to the code above or vice versa. This has the
advantage of keeping the counter value contained to one byte. We will
use an overlined {{{addr(00)}}} when we do this again.
